/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PutV2ObjectsObjectRecordsRecordIdData = {
  /**
   * An object with an attribute `api_slug` or `attribute_id` as the key, and a single value (for single-select attributes), or an array of values (for single or multi-select attributes) as the values. For complete documentation on values for all attribute types, please see our [attribute type docs](/docs/attribute-types).
   */
  values: { [k: string]: any };
};

export type PutV2ObjectsObjectRecordsRecordIdRequestBody = {
  data: PutV2ObjectsObjectRecordsRecordIdData;
};

export type PutV2ObjectsObjectRecordsRecordIdRequest = {
  object: string;
  recordId: string;
  requestBody: PutV2ObjectsObjectRecordsRecordIdRequestBody;
};

export type PutV2ObjectsObjectRecordsRecordIdId = {
  /**
   * A UUID identifying the workspace this record belongs to.
   */
  workspaceId: string;
  /**
   * A UUID identifying the object this record belongs to.
   */
  objectId: string;
  /**
   * A UUID identifying this record.
   */
  recordId: string;
};

export type PutV2ObjectsObjectRecordsRecordIdRecordsData = {
  id: PutV2ObjectsObjectRecordsRecordIdId;
  /**
   * When this record was created.
   */
  createdAt: string;
  /**
   * A record type with an attribute `api_slug` as the key, and an array of value objects as the values.
   */
  values: { [k: string]: any };
};

/**
 * Success
 */
export type PutV2ObjectsObjectRecordsRecordIdResponseBody = {
  data: PutV2ObjectsObjectRecordsRecordIdRecordsData;
};

/** @internal */
export const PutV2ObjectsObjectRecordsRecordIdData$inboundSchema: z.ZodType<
  PutV2ObjectsObjectRecordsRecordIdData,
  z.ZodTypeDef,
  unknown
> = z.object({
  values: z.record(z.any()),
});

/** @internal */
export type PutV2ObjectsObjectRecordsRecordIdData$Outbound = {
  values: { [k: string]: any };
};

/** @internal */
export const PutV2ObjectsObjectRecordsRecordIdData$outboundSchema: z.ZodType<
  PutV2ObjectsObjectRecordsRecordIdData$Outbound,
  z.ZodTypeDef,
  PutV2ObjectsObjectRecordsRecordIdData
> = z.object({
  values: z.record(z.any()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV2ObjectsObjectRecordsRecordIdData$ {
  /** @deprecated use `PutV2ObjectsObjectRecordsRecordIdData$inboundSchema` instead. */
  export const inboundSchema =
    PutV2ObjectsObjectRecordsRecordIdData$inboundSchema;
  /** @deprecated use `PutV2ObjectsObjectRecordsRecordIdData$outboundSchema` instead. */
  export const outboundSchema =
    PutV2ObjectsObjectRecordsRecordIdData$outboundSchema;
  /** @deprecated use `PutV2ObjectsObjectRecordsRecordIdData$Outbound` instead. */
  export type Outbound = PutV2ObjectsObjectRecordsRecordIdData$Outbound;
}

export function putV2ObjectsObjectRecordsRecordIdDataToJSON(
  putV2ObjectsObjectRecordsRecordIdData: PutV2ObjectsObjectRecordsRecordIdData,
): string {
  return JSON.stringify(
    PutV2ObjectsObjectRecordsRecordIdData$outboundSchema.parse(
      putV2ObjectsObjectRecordsRecordIdData,
    ),
  );
}

export function putV2ObjectsObjectRecordsRecordIdDataFromJSON(
  jsonString: string,
): SafeParseResult<PutV2ObjectsObjectRecordsRecordIdData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PutV2ObjectsObjectRecordsRecordIdData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutV2ObjectsObjectRecordsRecordIdData' from JSON`,
  );
}

/** @internal */
export const PutV2ObjectsObjectRecordsRecordIdRequestBody$inboundSchema:
  z.ZodType<
    PutV2ObjectsObjectRecordsRecordIdRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    data: z.lazy(() => PutV2ObjectsObjectRecordsRecordIdData$inboundSchema),
  });

/** @internal */
export type PutV2ObjectsObjectRecordsRecordIdRequestBody$Outbound = {
  data: PutV2ObjectsObjectRecordsRecordIdData$Outbound;
};

/** @internal */
export const PutV2ObjectsObjectRecordsRecordIdRequestBody$outboundSchema:
  z.ZodType<
    PutV2ObjectsObjectRecordsRecordIdRequestBody$Outbound,
    z.ZodTypeDef,
    PutV2ObjectsObjectRecordsRecordIdRequestBody
  > = z.object({
    data: z.lazy(() => PutV2ObjectsObjectRecordsRecordIdData$outboundSchema),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV2ObjectsObjectRecordsRecordIdRequestBody$ {
  /** @deprecated use `PutV2ObjectsObjectRecordsRecordIdRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PutV2ObjectsObjectRecordsRecordIdRequestBody$inboundSchema;
  /** @deprecated use `PutV2ObjectsObjectRecordsRecordIdRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PutV2ObjectsObjectRecordsRecordIdRequestBody$outboundSchema;
  /** @deprecated use `PutV2ObjectsObjectRecordsRecordIdRequestBody$Outbound` instead. */
  export type Outbound = PutV2ObjectsObjectRecordsRecordIdRequestBody$Outbound;
}

export function putV2ObjectsObjectRecordsRecordIdRequestBodyToJSON(
  putV2ObjectsObjectRecordsRecordIdRequestBody:
    PutV2ObjectsObjectRecordsRecordIdRequestBody,
): string {
  return JSON.stringify(
    PutV2ObjectsObjectRecordsRecordIdRequestBody$outboundSchema.parse(
      putV2ObjectsObjectRecordsRecordIdRequestBody,
    ),
  );
}

export function putV2ObjectsObjectRecordsRecordIdRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PutV2ObjectsObjectRecordsRecordIdRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutV2ObjectsObjectRecordsRecordIdRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutV2ObjectsObjectRecordsRecordIdRequestBody' from JSON`,
  );
}

/** @internal */
export const PutV2ObjectsObjectRecordsRecordIdRequest$inboundSchema: z.ZodType<
  PutV2ObjectsObjectRecordsRecordIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: z.string(),
  record_id: z.string(),
  RequestBody: z.lazy(() =>
    PutV2ObjectsObjectRecordsRecordIdRequestBody$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "record_id": "recordId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PutV2ObjectsObjectRecordsRecordIdRequest$Outbound = {
  object: string;
  record_id: string;
  RequestBody: PutV2ObjectsObjectRecordsRecordIdRequestBody$Outbound;
};

/** @internal */
export const PutV2ObjectsObjectRecordsRecordIdRequest$outboundSchema: z.ZodType<
  PutV2ObjectsObjectRecordsRecordIdRequest$Outbound,
  z.ZodTypeDef,
  PutV2ObjectsObjectRecordsRecordIdRequest
> = z.object({
  object: z.string(),
  recordId: z.string(),
  requestBody: z.lazy(() =>
    PutV2ObjectsObjectRecordsRecordIdRequestBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    recordId: "record_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV2ObjectsObjectRecordsRecordIdRequest$ {
  /** @deprecated use `PutV2ObjectsObjectRecordsRecordIdRequest$inboundSchema` instead. */
  export const inboundSchema =
    PutV2ObjectsObjectRecordsRecordIdRequest$inboundSchema;
  /** @deprecated use `PutV2ObjectsObjectRecordsRecordIdRequest$outboundSchema` instead. */
  export const outboundSchema =
    PutV2ObjectsObjectRecordsRecordIdRequest$outboundSchema;
  /** @deprecated use `PutV2ObjectsObjectRecordsRecordIdRequest$Outbound` instead. */
  export type Outbound = PutV2ObjectsObjectRecordsRecordIdRequest$Outbound;
}

export function putV2ObjectsObjectRecordsRecordIdRequestToJSON(
  putV2ObjectsObjectRecordsRecordIdRequest:
    PutV2ObjectsObjectRecordsRecordIdRequest,
): string {
  return JSON.stringify(
    PutV2ObjectsObjectRecordsRecordIdRequest$outboundSchema.parse(
      putV2ObjectsObjectRecordsRecordIdRequest,
    ),
  );
}

export function putV2ObjectsObjectRecordsRecordIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  PutV2ObjectsObjectRecordsRecordIdRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutV2ObjectsObjectRecordsRecordIdRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutV2ObjectsObjectRecordsRecordIdRequest' from JSON`,
  );
}

/** @internal */
export const PutV2ObjectsObjectRecordsRecordIdId$inboundSchema: z.ZodType<
  PutV2ObjectsObjectRecordsRecordIdId,
  z.ZodTypeDef,
  unknown
> = z.object({
  workspace_id: z.string(),
  object_id: z.string(),
  record_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "workspace_id": "workspaceId",
    "object_id": "objectId",
    "record_id": "recordId",
  });
});

/** @internal */
export type PutV2ObjectsObjectRecordsRecordIdId$Outbound = {
  workspace_id: string;
  object_id: string;
  record_id: string;
};

/** @internal */
export const PutV2ObjectsObjectRecordsRecordIdId$outboundSchema: z.ZodType<
  PutV2ObjectsObjectRecordsRecordIdId$Outbound,
  z.ZodTypeDef,
  PutV2ObjectsObjectRecordsRecordIdId
> = z.object({
  workspaceId: z.string(),
  objectId: z.string(),
  recordId: z.string(),
}).transform((v) => {
  return remap$(v, {
    workspaceId: "workspace_id",
    objectId: "object_id",
    recordId: "record_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV2ObjectsObjectRecordsRecordIdId$ {
  /** @deprecated use `PutV2ObjectsObjectRecordsRecordIdId$inboundSchema` instead. */
  export const inboundSchema =
    PutV2ObjectsObjectRecordsRecordIdId$inboundSchema;
  /** @deprecated use `PutV2ObjectsObjectRecordsRecordIdId$outboundSchema` instead. */
  export const outboundSchema =
    PutV2ObjectsObjectRecordsRecordIdId$outboundSchema;
  /** @deprecated use `PutV2ObjectsObjectRecordsRecordIdId$Outbound` instead. */
  export type Outbound = PutV2ObjectsObjectRecordsRecordIdId$Outbound;
}

export function putV2ObjectsObjectRecordsRecordIdIdToJSON(
  putV2ObjectsObjectRecordsRecordIdId: PutV2ObjectsObjectRecordsRecordIdId,
): string {
  return JSON.stringify(
    PutV2ObjectsObjectRecordsRecordIdId$outboundSchema.parse(
      putV2ObjectsObjectRecordsRecordIdId,
    ),
  );
}

export function putV2ObjectsObjectRecordsRecordIdIdFromJSON(
  jsonString: string,
): SafeParseResult<PutV2ObjectsObjectRecordsRecordIdId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PutV2ObjectsObjectRecordsRecordIdId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutV2ObjectsObjectRecordsRecordIdId' from JSON`,
  );
}

/** @internal */
export const PutV2ObjectsObjectRecordsRecordIdRecordsData$inboundSchema:
  z.ZodType<
    PutV2ObjectsObjectRecordsRecordIdRecordsData,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.lazy(() => PutV2ObjectsObjectRecordsRecordIdId$inboundSchema),
    created_at: z.string(),
    values: z.record(z.any()),
  }).transform((v) => {
    return remap$(v, {
      "created_at": "createdAt",
    });
  });

/** @internal */
export type PutV2ObjectsObjectRecordsRecordIdRecordsData$Outbound = {
  id: PutV2ObjectsObjectRecordsRecordIdId$Outbound;
  created_at: string;
  values: { [k: string]: any };
};

/** @internal */
export const PutV2ObjectsObjectRecordsRecordIdRecordsData$outboundSchema:
  z.ZodType<
    PutV2ObjectsObjectRecordsRecordIdRecordsData$Outbound,
    z.ZodTypeDef,
    PutV2ObjectsObjectRecordsRecordIdRecordsData
  > = z.object({
    id: z.lazy(() => PutV2ObjectsObjectRecordsRecordIdId$outboundSchema),
    createdAt: z.string(),
    values: z.record(z.any()),
  }).transform((v) => {
    return remap$(v, {
      createdAt: "created_at",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV2ObjectsObjectRecordsRecordIdRecordsData$ {
  /** @deprecated use `PutV2ObjectsObjectRecordsRecordIdRecordsData$inboundSchema` instead. */
  export const inboundSchema =
    PutV2ObjectsObjectRecordsRecordIdRecordsData$inboundSchema;
  /** @deprecated use `PutV2ObjectsObjectRecordsRecordIdRecordsData$outboundSchema` instead. */
  export const outboundSchema =
    PutV2ObjectsObjectRecordsRecordIdRecordsData$outboundSchema;
  /** @deprecated use `PutV2ObjectsObjectRecordsRecordIdRecordsData$Outbound` instead. */
  export type Outbound = PutV2ObjectsObjectRecordsRecordIdRecordsData$Outbound;
}

export function putV2ObjectsObjectRecordsRecordIdRecordsDataToJSON(
  putV2ObjectsObjectRecordsRecordIdRecordsData:
    PutV2ObjectsObjectRecordsRecordIdRecordsData,
): string {
  return JSON.stringify(
    PutV2ObjectsObjectRecordsRecordIdRecordsData$outboundSchema.parse(
      putV2ObjectsObjectRecordsRecordIdRecordsData,
    ),
  );
}

export function putV2ObjectsObjectRecordsRecordIdRecordsDataFromJSON(
  jsonString: string,
): SafeParseResult<
  PutV2ObjectsObjectRecordsRecordIdRecordsData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutV2ObjectsObjectRecordsRecordIdRecordsData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutV2ObjectsObjectRecordsRecordIdRecordsData' from JSON`,
  );
}

/** @internal */
export const PutV2ObjectsObjectRecordsRecordIdResponseBody$inboundSchema:
  z.ZodType<
    PutV2ObjectsObjectRecordsRecordIdResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    data: z.lazy(() =>
      PutV2ObjectsObjectRecordsRecordIdRecordsData$inboundSchema
    ),
  });

/** @internal */
export type PutV2ObjectsObjectRecordsRecordIdResponseBody$Outbound = {
  data: PutV2ObjectsObjectRecordsRecordIdRecordsData$Outbound;
};

/** @internal */
export const PutV2ObjectsObjectRecordsRecordIdResponseBody$outboundSchema:
  z.ZodType<
    PutV2ObjectsObjectRecordsRecordIdResponseBody$Outbound,
    z.ZodTypeDef,
    PutV2ObjectsObjectRecordsRecordIdResponseBody
  > = z.object({
    data: z.lazy(() =>
      PutV2ObjectsObjectRecordsRecordIdRecordsData$outboundSchema
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV2ObjectsObjectRecordsRecordIdResponseBody$ {
  /** @deprecated use `PutV2ObjectsObjectRecordsRecordIdResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PutV2ObjectsObjectRecordsRecordIdResponseBody$inboundSchema;
  /** @deprecated use `PutV2ObjectsObjectRecordsRecordIdResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PutV2ObjectsObjectRecordsRecordIdResponseBody$outboundSchema;
  /** @deprecated use `PutV2ObjectsObjectRecordsRecordIdResponseBody$Outbound` instead. */
  export type Outbound = PutV2ObjectsObjectRecordsRecordIdResponseBody$Outbound;
}

export function putV2ObjectsObjectRecordsRecordIdResponseBodyToJSON(
  putV2ObjectsObjectRecordsRecordIdResponseBody:
    PutV2ObjectsObjectRecordsRecordIdResponseBody,
): string {
  return JSON.stringify(
    PutV2ObjectsObjectRecordsRecordIdResponseBody$outboundSchema.parse(
      putV2ObjectsObjectRecordsRecordIdResponseBody,
    ),
  );
}

export function putV2ObjectsObjectRecordsRecordIdResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PutV2ObjectsObjectRecordsRecordIdResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutV2ObjectsObjectRecordsRecordIdResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutV2ObjectsObjectRecordsRecordIdResponseBody' from JSON`,
  );
}
