/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SlugOrIdOfMatchingAttribute5 = {
  /**
   * A raw text field. Values are limited to 10MB.
   */
  value?: string | undefined;
};

/**
 * The ISO 3166-1 alpha-2 country code representing the country that this phone number belongs to.
 */
export const SlugOrIdOfMatchingAttributeCountryCode = {
  Af: "AF",
  Ax: "AX",
  Al: "AL",
  Dz: "DZ",
  As: "AS",
  Ad: "AD",
  Ao: "AO",
  Ai: "AI",
  Aq: "AQ",
  Ag: "AG",
  Ar: "AR",
  Am: "AM",
  Aw: "AW",
  Au: "AU",
  At: "AT",
  Az: "AZ",
  Bs: "BS",
  Bh: "BH",
  Bd: "BD",
  Bb: "BB",
  By: "BY",
  Be: "BE",
  Bz: "BZ",
  Bj: "BJ",
  Bm: "BM",
  Bt: "BT",
  Bo: "BO",
  Ba: "BA",
  Bw: "BW",
  Bv: "BV",
  Br: "BR",
  Io: "IO",
  Bn: "BN",
  Bg: "BG",
  Bf: "BF",
  Bi: "BI",
  Kh: "KH",
  Cm: "CM",
  Ca: "CA",
  Cv: "CV",
  Ky: "KY",
  Cf: "CF",
  Td: "TD",
  Cl: "CL",
  Cn: "CN",
  Cx: "CX",
  Cc: "CC",
  Co: "CO",
  Km: "KM",
  Cg: "CG",
  Cd: "CD",
  Ck: "CK",
  Cr: "CR",
  Ci: "CI",
  Hr: "HR",
  Cu: "CU",
  Cw: "CW",
  Cy: "CY",
  Cz: "CZ",
  Dk: "DK",
  Dj: "DJ",
  Dm: "DM",
  Do: "DO",
  Ec: "EC",
  Eg: "EG",
  Sv: "SV",
  Gq: "GQ",
  Er: "ER",
  Ee: "EE",
  Et: "ET",
  Fk: "FK",
  Fo: "FO",
  Fj: "FJ",
  Fi: "FI",
  Fr: "FR",
  Gf: "GF",
  Pf: "PF",
  Tf: "TF",
  Ga: "GA",
  Gm: "GM",
  Ge: "GE",
  De: "DE",
  Gh: "GH",
  Gi: "GI",
  Gr: "GR",
  Gl: "GL",
  Gd: "GD",
  Gp: "GP",
  Gu: "GU",
  Gt: "GT",
  Gg: "GG",
  Gn: "GN",
  Gw: "GW",
  Gy: "GY",
  Ht: "HT",
  Hm: "HM",
  Va: "VA",
  Hn: "HN",
  Hk: "HK",
  Hu: "HU",
  Is: "IS",
  In: "IN",
  Id: "ID",
  Ir: "IR",
  Iq: "IQ",
  Ie: "IE",
  Im: "IM",
  Il: "IL",
  It: "IT",
  Jm: "JM",
  Jp: "JP",
  Je: "JE",
  Jo: "JO",
  Kz: "KZ",
  Ke: "KE",
  Ki: "KI",
  Kr: "KR",
  Kw: "KW",
  Kg: "KG",
  La: "LA",
  Lv: "LV",
  Lb: "LB",
  Ls: "LS",
  Lr: "LR",
  Ly: "LY",
  Li: "LI",
  Lt: "LT",
  Lu: "LU",
  Mo: "MO",
  Mk: "MK",
  Mg: "MG",
  Mw: "MW",
  My: "MY",
  Mv: "MV",
  Ml: "ML",
  Mt: "MT",
  Mh: "MH",
  Mq: "MQ",
  Mr: "MR",
  Mu: "MU",
  Yt: "YT",
  Mx: "MX",
  Fm: "FM",
  Md: "MD",
  Mc: "MC",
  Mn: "MN",
  Me: "ME",
  Ms: "MS",
  Ma: "MA",
  Mz: "MZ",
  Mm: "MM",
  Na: "NA",
  Nr: "NR",
  Np: "NP",
  Nl: "NL",
  An: "AN",
  Nc: "NC",
  Nz: "NZ",
  Ni: "NI",
  Ne: "NE",
  Ng: "NG",
  Nu: "NU",
  Nf: "NF",
  Mp: "MP",
  No: "NO",
  Om: "OM",
  Pk: "PK",
  Pw: "PW",
  Ps: "PS",
  Pa: "PA",
  Pg: "PG",
  Py: "PY",
  Pe: "PE",
  Ph: "PH",
  Pn: "PN",
  Pl: "PL",
  Pt: "PT",
  Pr: "PR",
  Qa: "QA",
  Re: "RE",
  Ro: "RO",
  Ru: "RU",
  Rw: "RW",
  Bl: "BL",
  Sh: "SH",
  Kn: "KN",
  Lc: "LC",
  Mf: "MF",
  Pm: "PM",
  Vc: "VC",
  Ws: "WS",
  Sm: "SM",
  St: "ST",
  Sa: "SA",
  Sn: "SN",
  Ss: "SS",
  Rs: "RS",
  Sc: "SC",
  Sl: "SL",
  Sg: "SG",
  Sk: "SK",
  Si: "SI",
  Sb: "SB",
  So: "SO",
  Za: "ZA",
  Gs: "GS",
  Es: "ES",
  Lk: "LK",
  Sd: "SD",
  Sr: "SR",
  Sj: "SJ",
  Sz: "SZ",
  Se: "SE",
  Ch: "CH",
  Sy: "SY",
  Tw: "TW",
  Tj: "TJ",
  Tz: "TZ",
  Th: "TH",
  Tl: "TL",
  Tg: "TG",
  Tk: "TK",
  To: "TO",
  Tt: "TT",
  Tn: "TN",
  Tr: "TR",
  Tm: "TM",
  Tc: "TC",
  Tv: "TV",
  Ug: "UG",
  Ua: "UA",
  Ae: "AE",
  Gb: "GB",
  Us: "US",
  Um: "UM",
  Uy: "UY",
  Uz: "UZ",
  Vu: "VU",
  Ve: "VE",
  Vn: "VN",
  Vg: "VG",
  Vi: "VI",
  Wf: "WF",
  Eh: "EH",
  Ye: "YE",
  Zm: "ZM",
  Zw: "ZW",
} as const;
/**
 * The ISO 3166-1 alpha-2 country code representing the country that this phone number belongs to.
 */
export type SlugOrIdOfMatchingAttributeCountryCode = ClosedEnum<
  typeof SlugOrIdOfMatchingAttributeCountryCode
>;

export type SlugOrIdOfMatchingAttribute4 = {
  /**
   * The raw, original phone number, as inputted.
   */
  originalPhoneNumber?: string | undefined;
  /**
   * The ISO 3166-1 alpha-2 country code representing the country that this phone number belongs to.
   */
  countryCode?: SlugOrIdOfMatchingAttributeCountryCode | null | undefined;
};

export type SlugOrIdOfMatchingAttribute3 = {
  /**
   * Numbers are persisted as 64 bit floats.
   */
  value?: number | undefined;
};

export type PatchV2TasksTaskIdSlugOrIdOfMatchingAttribute2 = {
  /**
   * An email address string
   */
  emailAddress?: string | undefined;
};

export type PatchV2TasksTaskIdSlugOrIdOfMatchingAttribute1 = {
  /**
   * The full domain of the website.
   */
  domain?: string | undefined;
};

export type LinkedRecordsSlugOrIdOfMatchingAttribute =
  | PatchV2TasksTaskIdSlugOrIdOfMatchingAttribute1
  | PatchV2TasksTaskIdSlugOrIdOfMatchingAttribute2
  | SlugOrIdOfMatchingAttribute3
  | SlugOrIdOfMatchingAttribute5
  | SlugOrIdOfMatchingAttribute4;

export type PatchV2TasksTaskIdLinkedRecords2 = {
  /**
   * A UUID or slug to identify the object that the referenced record belongs to.
   */
  targetObject: string;
  /**
   * In addition to referencing records directly by record ID, you may also reference by a matching attribute of your choice. For example, if you want to add a reference to the person record with email "alice@website.com", you should pass a value with `target_object` set to `"people"` and `email_addresses` set to `[{email_address:"alice@website.com"}]`. The key should be the slug or ID of the matching attribute you would like to use and the value should be an array containing a single value of the appropriate attribute type (as specified below). Matching on multiple values is not currently supported. Matching attributes must be unique. This process is similar to how you use the `matching_attribute` query param in Attio's [assert endpoints](/reference/put_v2-objects-object-records).
   */
  slugOrIdOfMatchingAttribute: Array<
    | PatchV2TasksTaskIdSlugOrIdOfMatchingAttribute1
    | PatchV2TasksTaskIdSlugOrIdOfMatchingAttribute2
    | SlugOrIdOfMatchingAttribute3
    | SlugOrIdOfMatchingAttribute5
    | SlugOrIdOfMatchingAttribute4
  >;
};

export type PatchV2TasksTaskIdLinkedRecords1 = {
  /**
   * The ID or slug of the parent object the tasks refers to. This can reference both standard and custom objects.`
   */
  targetObject: string;
  /**
   * The ID of the parent record the task refers to.
   */
  targetRecordId: string;
};

export type PatchV2TasksTaskIdLinkedRecords =
  | PatchV2TasksTaskIdLinkedRecords1
  | PatchV2TasksTaskIdLinkedRecords2;

export type PatchV2TasksTaskIdAssignees2 = {
  /**
   * Workspace member actors can be referenced by email address as well as actor ID.
   */
  workspaceMemberEmailAddress: string;
};

/**
 * The actor type of the task assignee. Only `workspace-member` actors can be assigned to tasks. [Read more information on actor types here](/docs/actors).
 */
export const AssigneesReferencedActorType = {
  WorkspaceMember: "workspace-member",
} as const;
/**
 * The actor type of the task assignee. Only `workspace-member` actors can be assigned to tasks. [Read more information on actor types here](/docs/actors).
 */
export type AssigneesReferencedActorType = ClosedEnum<
  typeof AssigneesReferencedActorType
>;

export type PatchV2TasksTaskIdAssignees1 = {
  /**
   * The actor type of the task assignee. Only `workspace-member` actors can be assigned to tasks. [Read more information on actor types here](/docs/actors).
   */
  referencedActorType: AssigneesReferencedActorType;
  /**
   * The ID of the actor assigned to this task.
   */
  referencedActorId: string;
};

export type PatchV2TasksTaskIdAssignees =
  | PatchV2TasksTaskIdAssignees2
  | PatchV2TasksTaskIdAssignees1;

export type PatchV2TasksTaskIdData = {
  /**
   * The deadline of the task, in ISO 8601 format.
   */
  deadlineAt?: string | null | undefined;
  /**
   * Whether the task has been completed.
   */
  isCompleted?: boolean | undefined;
  /**
   * Records linked to the task. Creating record links within task content text is not possible via the API at present.
   */
  linkedRecords?:
    | Array<PatchV2TasksTaskIdLinkedRecords1 | PatchV2TasksTaskIdLinkedRecords2>
    | undefined;
  /**
   * Workspace members assigned to this task.
   */
  assignees?:
    | Array<PatchV2TasksTaskIdAssignees2 | PatchV2TasksTaskIdAssignees1>
    | undefined;
};

export type PatchV2TasksTaskIdRequestBody = {
  data: PatchV2TasksTaskIdData;
};

export type PatchV2TasksTaskIdRequest = {
  taskId: string;
  requestBody: PatchV2TasksTaskIdRequestBody;
};

/**
 * Success
 */
export type PatchV2TasksTaskIdResponseBody = {
  data: components.Task;
};

/** @internal */
export const SlugOrIdOfMatchingAttribute5$inboundSchema: z.ZodType<
  SlugOrIdOfMatchingAttribute5,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
});

/** @internal */
export type SlugOrIdOfMatchingAttribute5$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const SlugOrIdOfMatchingAttribute5$outboundSchema: z.ZodType<
  SlugOrIdOfMatchingAttribute5$Outbound,
  z.ZodTypeDef,
  SlugOrIdOfMatchingAttribute5
> = z.object({
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SlugOrIdOfMatchingAttribute5$ {
  /** @deprecated use `SlugOrIdOfMatchingAttribute5$inboundSchema` instead. */
  export const inboundSchema = SlugOrIdOfMatchingAttribute5$inboundSchema;
  /** @deprecated use `SlugOrIdOfMatchingAttribute5$outboundSchema` instead. */
  export const outboundSchema = SlugOrIdOfMatchingAttribute5$outboundSchema;
  /** @deprecated use `SlugOrIdOfMatchingAttribute5$Outbound` instead. */
  export type Outbound = SlugOrIdOfMatchingAttribute5$Outbound;
}

export function slugOrIdOfMatchingAttribute5ToJSON(
  slugOrIdOfMatchingAttribute5: SlugOrIdOfMatchingAttribute5,
): string {
  return JSON.stringify(
    SlugOrIdOfMatchingAttribute5$outboundSchema.parse(
      slugOrIdOfMatchingAttribute5,
    ),
  );
}

export function slugOrIdOfMatchingAttribute5FromJSON(
  jsonString: string,
): SafeParseResult<SlugOrIdOfMatchingAttribute5, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SlugOrIdOfMatchingAttribute5$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SlugOrIdOfMatchingAttribute5' from JSON`,
  );
}

/** @internal */
export const SlugOrIdOfMatchingAttributeCountryCode$inboundSchema:
  z.ZodNativeEnum<typeof SlugOrIdOfMatchingAttributeCountryCode> = z.nativeEnum(
    SlugOrIdOfMatchingAttributeCountryCode,
  );

/** @internal */
export const SlugOrIdOfMatchingAttributeCountryCode$outboundSchema:
  z.ZodNativeEnum<typeof SlugOrIdOfMatchingAttributeCountryCode> =
    SlugOrIdOfMatchingAttributeCountryCode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SlugOrIdOfMatchingAttributeCountryCode$ {
  /** @deprecated use `SlugOrIdOfMatchingAttributeCountryCode$inboundSchema` instead. */
  export const inboundSchema =
    SlugOrIdOfMatchingAttributeCountryCode$inboundSchema;
  /** @deprecated use `SlugOrIdOfMatchingAttributeCountryCode$outboundSchema` instead. */
  export const outboundSchema =
    SlugOrIdOfMatchingAttributeCountryCode$outboundSchema;
}

/** @internal */
export const SlugOrIdOfMatchingAttribute4$inboundSchema: z.ZodType<
  SlugOrIdOfMatchingAttribute4,
  z.ZodTypeDef,
  unknown
> = z.object({
  original_phone_number: z.string().optional(),
  country_code: z.nullable(SlugOrIdOfMatchingAttributeCountryCode$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "original_phone_number": "originalPhoneNumber",
    "country_code": "countryCode",
  });
});

/** @internal */
export type SlugOrIdOfMatchingAttribute4$Outbound = {
  original_phone_number?: string | undefined;
  country_code?: string | null | undefined;
};

/** @internal */
export const SlugOrIdOfMatchingAttribute4$outboundSchema: z.ZodType<
  SlugOrIdOfMatchingAttribute4$Outbound,
  z.ZodTypeDef,
  SlugOrIdOfMatchingAttribute4
> = z.object({
  originalPhoneNumber: z.string().optional(),
  countryCode: z.nullable(SlugOrIdOfMatchingAttributeCountryCode$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    originalPhoneNumber: "original_phone_number",
    countryCode: "country_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SlugOrIdOfMatchingAttribute4$ {
  /** @deprecated use `SlugOrIdOfMatchingAttribute4$inboundSchema` instead. */
  export const inboundSchema = SlugOrIdOfMatchingAttribute4$inboundSchema;
  /** @deprecated use `SlugOrIdOfMatchingAttribute4$outboundSchema` instead. */
  export const outboundSchema = SlugOrIdOfMatchingAttribute4$outboundSchema;
  /** @deprecated use `SlugOrIdOfMatchingAttribute4$Outbound` instead. */
  export type Outbound = SlugOrIdOfMatchingAttribute4$Outbound;
}

export function slugOrIdOfMatchingAttribute4ToJSON(
  slugOrIdOfMatchingAttribute4: SlugOrIdOfMatchingAttribute4,
): string {
  return JSON.stringify(
    SlugOrIdOfMatchingAttribute4$outboundSchema.parse(
      slugOrIdOfMatchingAttribute4,
    ),
  );
}

export function slugOrIdOfMatchingAttribute4FromJSON(
  jsonString: string,
): SafeParseResult<SlugOrIdOfMatchingAttribute4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SlugOrIdOfMatchingAttribute4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SlugOrIdOfMatchingAttribute4' from JSON`,
  );
}

/** @internal */
export const SlugOrIdOfMatchingAttribute3$inboundSchema: z.ZodType<
  SlugOrIdOfMatchingAttribute3,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.number().optional(),
});

/** @internal */
export type SlugOrIdOfMatchingAttribute3$Outbound = {
  value?: number | undefined;
};

/** @internal */
export const SlugOrIdOfMatchingAttribute3$outboundSchema: z.ZodType<
  SlugOrIdOfMatchingAttribute3$Outbound,
  z.ZodTypeDef,
  SlugOrIdOfMatchingAttribute3
> = z.object({
  value: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SlugOrIdOfMatchingAttribute3$ {
  /** @deprecated use `SlugOrIdOfMatchingAttribute3$inboundSchema` instead. */
  export const inboundSchema = SlugOrIdOfMatchingAttribute3$inboundSchema;
  /** @deprecated use `SlugOrIdOfMatchingAttribute3$outboundSchema` instead. */
  export const outboundSchema = SlugOrIdOfMatchingAttribute3$outboundSchema;
  /** @deprecated use `SlugOrIdOfMatchingAttribute3$Outbound` instead. */
  export type Outbound = SlugOrIdOfMatchingAttribute3$Outbound;
}

export function slugOrIdOfMatchingAttribute3ToJSON(
  slugOrIdOfMatchingAttribute3: SlugOrIdOfMatchingAttribute3,
): string {
  return JSON.stringify(
    SlugOrIdOfMatchingAttribute3$outboundSchema.parse(
      slugOrIdOfMatchingAttribute3,
    ),
  );
}

export function slugOrIdOfMatchingAttribute3FromJSON(
  jsonString: string,
): SafeParseResult<SlugOrIdOfMatchingAttribute3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SlugOrIdOfMatchingAttribute3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SlugOrIdOfMatchingAttribute3' from JSON`,
  );
}

/** @internal */
export const PatchV2TasksTaskIdSlugOrIdOfMatchingAttribute2$inboundSchema:
  z.ZodType<
    PatchV2TasksTaskIdSlugOrIdOfMatchingAttribute2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    email_address: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "email_address": "emailAddress",
    });
  });

/** @internal */
export type PatchV2TasksTaskIdSlugOrIdOfMatchingAttribute2$Outbound = {
  email_address?: string | undefined;
};

/** @internal */
export const PatchV2TasksTaskIdSlugOrIdOfMatchingAttribute2$outboundSchema:
  z.ZodType<
    PatchV2TasksTaskIdSlugOrIdOfMatchingAttribute2$Outbound,
    z.ZodTypeDef,
    PatchV2TasksTaskIdSlugOrIdOfMatchingAttribute2
  > = z.object({
    emailAddress: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      emailAddress: "email_address",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2TasksTaskIdSlugOrIdOfMatchingAttribute2$ {
  /** @deprecated use `PatchV2TasksTaskIdSlugOrIdOfMatchingAttribute2$inboundSchema` instead. */
  export const inboundSchema =
    PatchV2TasksTaskIdSlugOrIdOfMatchingAttribute2$inboundSchema;
  /** @deprecated use `PatchV2TasksTaskIdSlugOrIdOfMatchingAttribute2$outboundSchema` instead. */
  export const outboundSchema =
    PatchV2TasksTaskIdSlugOrIdOfMatchingAttribute2$outboundSchema;
  /** @deprecated use `PatchV2TasksTaskIdSlugOrIdOfMatchingAttribute2$Outbound` instead. */
  export type Outbound =
    PatchV2TasksTaskIdSlugOrIdOfMatchingAttribute2$Outbound;
}

export function patchV2TasksTaskIdSlugOrIdOfMatchingAttribute2ToJSON(
  patchV2TasksTaskIdSlugOrIdOfMatchingAttribute2:
    PatchV2TasksTaskIdSlugOrIdOfMatchingAttribute2,
): string {
  return JSON.stringify(
    PatchV2TasksTaskIdSlugOrIdOfMatchingAttribute2$outboundSchema.parse(
      patchV2TasksTaskIdSlugOrIdOfMatchingAttribute2,
    ),
  );
}

export function patchV2TasksTaskIdSlugOrIdOfMatchingAttribute2FromJSON(
  jsonString: string,
): SafeParseResult<
  PatchV2TasksTaskIdSlugOrIdOfMatchingAttribute2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchV2TasksTaskIdSlugOrIdOfMatchingAttribute2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchV2TasksTaskIdSlugOrIdOfMatchingAttribute2' from JSON`,
  );
}

/** @internal */
export const PatchV2TasksTaskIdSlugOrIdOfMatchingAttribute1$inboundSchema:
  z.ZodType<
    PatchV2TasksTaskIdSlugOrIdOfMatchingAttribute1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    domain: z.string().optional(),
  });

/** @internal */
export type PatchV2TasksTaskIdSlugOrIdOfMatchingAttribute1$Outbound = {
  domain?: string | undefined;
};

/** @internal */
export const PatchV2TasksTaskIdSlugOrIdOfMatchingAttribute1$outboundSchema:
  z.ZodType<
    PatchV2TasksTaskIdSlugOrIdOfMatchingAttribute1$Outbound,
    z.ZodTypeDef,
    PatchV2TasksTaskIdSlugOrIdOfMatchingAttribute1
  > = z.object({
    domain: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2TasksTaskIdSlugOrIdOfMatchingAttribute1$ {
  /** @deprecated use `PatchV2TasksTaskIdSlugOrIdOfMatchingAttribute1$inboundSchema` instead. */
  export const inboundSchema =
    PatchV2TasksTaskIdSlugOrIdOfMatchingAttribute1$inboundSchema;
  /** @deprecated use `PatchV2TasksTaskIdSlugOrIdOfMatchingAttribute1$outboundSchema` instead. */
  export const outboundSchema =
    PatchV2TasksTaskIdSlugOrIdOfMatchingAttribute1$outboundSchema;
  /** @deprecated use `PatchV2TasksTaskIdSlugOrIdOfMatchingAttribute1$Outbound` instead. */
  export type Outbound =
    PatchV2TasksTaskIdSlugOrIdOfMatchingAttribute1$Outbound;
}

export function patchV2TasksTaskIdSlugOrIdOfMatchingAttribute1ToJSON(
  patchV2TasksTaskIdSlugOrIdOfMatchingAttribute1:
    PatchV2TasksTaskIdSlugOrIdOfMatchingAttribute1,
): string {
  return JSON.stringify(
    PatchV2TasksTaskIdSlugOrIdOfMatchingAttribute1$outboundSchema.parse(
      patchV2TasksTaskIdSlugOrIdOfMatchingAttribute1,
    ),
  );
}

export function patchV2TasksTaskIdSlugOrIdOfMatchingAttribute1FromJSON(
  jsonString: string,
): SafeParseResult<
  PatchV2TasksTaskIdSlugOrIdOfMatchingAttribute1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchV2TasksTaskIdSlugOrIdOfMatchingAttribute1$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchV2TasksTaskIdSlugOrIdOfMatchingAttribute1' from JSON`,
  );
}

/** @internal */
export const LinkedRecordsSlugOrIdOfMatchingAttribute$inboundSchema: z.ZodType<
  LinkedRecordsSlugOrIdOfMatchingAttribute,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => PatchV2TasksTaskIdSlugOrIdOfMatchingAttribute1$inboundSchema),
  z.lazy(() => PatchV2TasksTaskIdSlugOrIdOfMatchingAttribute2$inboundSchema),
  z.lazy(() => SlugOrIdOfMatchingAttribute3$inboundSchema),
  z.lazy(() => SlugOrIdOfMatchingAttribute5$inboundSchema),
  z.lazy(() => SlugOrIdOfMatchingAttribute4$inboundSchema),
]);

/** @internal */
export type LinkedRecordsSlugOrIdOfMatchingAttribute$Outbound =
  | PatchV2TasksTaskIdSlugOrIdOfMatchingAttribute1$Outbound
  | PatchV2TasksTaskIdSlugOrIdOfMatchingAttribute2$Outbound
  | SlugOrIdOfMatchingAttribute3$Outbound
  | SlugOrIdOfMatchingAttribute5$Outbound
  | SlugOrIdOfMatchingAttribute4$Outbound;

/** @internal */
export const LinkedRecordsSlugOrIdOfMatchingAttribute$outboundSchema: z.ZodType<
  LinkedRecordsSlugOrIdOfMatchingAttribute$Outbound,
  z.ZodTypeDef,
  LinkedRecordsSlugOrIdOfMatchingAttribute
> = z.union([
  z.lazy(() => PatchV2TasksTaskIdSlugOrIdOfMatchingAttribute1$outboundSchema),
  z.lazy(() => PatchV2TasksTaskIdSlugOrIdOfMatchingAttribute2$outboundSchema),
  z.lazy(() => SlugOrIdOfMatchingAttribute3$outboundSchema),
  z.lazy(() => SlugOrIdOfMatchingAttribute5$outboundSchema),
  z.lazy(() => SlugOrIdOfMatchingAttribute4$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LinkedRecordsSlugOrIdOfMatchingAttribute$ {
  /** @deprecated use `LinkedRecordsSlugOrIdOfMatchingAttribute$inboundSchema` instead. */
  export const inboundSchema =
    LinkedRecordsSlugOrIdOfMatchingAttribute$inboundSchema;
  /** @deprecated use `LinkedRecordsSlugOrIdOfMatchingAttribute$outboundSchema` instead. */
  export const outboundSchema =
    LinkedRecordsSlugOrIdOfMatchingAttribute$outboundSchema;
  /** @deprecated use `LinkedRecordsSlugOrIdOfMatchingAttribute$Outbound` instead. */
  export type Outbound = LinkedRecordsSlugOrIdOfMatchingAttribute$Outbound;
}

export function linkedRecordsSlugOrIdOfMatchingAttributeToJSON(
  linkedRecordsSlugOrIdOfMatchingAttribute:
    LinkedRecordsSlugOrIdOfMatchingAttribute,
): string {
  return JSON.stringify(
    LinkedRecordsSlugOrIdOfMatchingAttribute$outboundSchema.parse(
      linkedRecordsSlugOrIdOfMatchingAttribute,
    ),
  );
}

export function linkedRecordsSlugOrIdOfMatchingAttributeFromJSON(
  jsonString: string,
): SafeParseResult<
  LinkedRecordsSlugOrIdOfMatchingAttribute,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      LinkedRecordsSlugOrIdOfMatchingAttribute$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'LinkedRecordsSlugOrIdOfMatchingAttribute' from JSON`,
  );
}

/** @internal */
export const PatchV2TasksTaskIdLinkedRecords2$inboundSchema: z.ZodType<
  PatchV2TasksTaskIdLinkedRecords2,
  z.ZodTypeDef,
  unknown
> = z.object({
  target_object: z.string(),
  "[slug_or_id_of_matching_attribute]": z.array(
    z.union([
      z.lazy(() =>
        PatchV2TasksTaskIdSlugOrIdOfMatchingAttribute1$inboundSchema
      ),
      z.lazy(() =>
        PatchV2TasksTaskIdSlugOrIdOfMatchingAttribute2$inboundSchema
      ),
      z.lazy(() => SlugOrIdOfMatchingAttribute3$inboundSchema),
      z.lazy(() => SlugOrIdOfMatchingAttribute5$inboundSchema),
      z.lazy(() => SlugOrIdOfMatchingAttribute4$inboundSchema),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    "target_object": "targetObject",
    "[slug_or_id_of_matching_attribute]": "slugOrIdOfMatchingAttribute",
  });
});

/** @internal */
export type PatchV2TasksTaskIdLinkedRecords2$Outbound = {
  target_object: string;
  "[slug_or_id_of_matching_attribute]": Array<
    | PatchV2TasksTaskIdSlugOrIdOfMatchingAttribute1$Outbound
    | PatchV2TasksTaskIdSlugOrIdOfMatchingAttribute2$Outbound
    | SlugOrIdOfMatchingAttribute3$Outbound
    | SlugOrIdOfMatchingAttribute5$Outbound
    | SlugOrIdOfMatchingAttribute4$Outbound
  >;
};

/** @internal */
export const PatchV2TasksTaskIdLinkedRecords2$outboundSchema: z.ZodType<
  PatchV2TasksTaskIdLinkedRecords2$Outbound,
  z.ZodTypeDef,
  PatchV2TasksTaskIdLinkedRecords2
> = z.object({
  targetObject: z.string(),
  slugOrIdOfMatchingAttribute: z.array(
    z.union([
      z.lazy(() =>
        PatchV2TasksTaskIdSlugOrIdOfMatchingAttribute1$outboundSchema
      ),
      z.lazy(() =>
        PatchV2TasksTaskIdSlugOrIdOfMatchingAttribute2$outboundSchema
      ),
      z.lazy(() => SlugOrIdOfMatchingAttribute3$outboundSchema),
      z.lazy(() => SlugOrIdOfMatchingAttribute5$outboundSchema),
      z.lazy(() => SlugOrIdOfMatchingAttribute4$outboundSchema),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    targetObject: "target_object",
    slugOrIdOfMatchingAttribute: "[slug_or_id_of_matching_attribute]",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2TasksTaskIdLinkedRecords2$ {
  /** @deprecated use `PatchV2TasksTaskIdLinkedRecords2$inboundSchema` instead. */
  export const inboundSchema = PatchV2TasksTaskIdLinkedRecords2$inboundSchema;
  /** @deprecated use `PatchV2TasksTaskIdLinkedRecords2$outboundSchema` instead. */
  export const outboundSchema = PatchV2TasksTaskIdLinkedRecords2$outboundSchema;
  /** @deprecated use `PatchV2TasksTaskIdLinkedRecords2$Outbound` instead. */
  export type Outbound = PatchV2TasksTaskIdLinkedRecords2$Outbound;
}

export function patchV2TasksTaskIdLinkedRecords2ToJSON(
  patchV2TasksTaskIdLinkedRecords2: PatchV2TasksTaskIdLinkedRecords2,
): string {
  return JSON.stringify(
    PatchV2TasksTaskIdLinkedRecords2$outboundSchema.parse(
      patchV2TasksTaskIdLinkedRecords2,
    ),
  );
}

export function patchV2TasksTaskIdLinkedRecords2FromJSON(
  jsonString: string,
): SafeParseResult<PatchV2TasksTaskIdLinkedRecords2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV2TasksTaskIdLinkedRecords2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV2TasksTaskIdLinkedRecords2' from JSON`,
  );
}

/** @internal */
export const PatchV2TasksTaskIdLinkedRecords1$inboundSchema: z.ZodType<
  PatchV2TasksTaskIdLinkedRecords1,
  z.ZodTypeDef,
  unknown
> = z.object({
  target_object: z.string(),
  target_record_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "target_object": "targetObject",
    "target_record_id": "targetRecordId",
  });
});

/** @internal */
export type PatchV2TasksTaskIdLinkedRecords1$Outbound = {
  target_object: string;
  target_record_id: string;
};

/** @internal */
export const PatchV2TasksTaskIdLinkedRecords1$outboundSchema: z.ZodType<
  PatchV2TasksTaskIdLinkedRecords1$Outbound,
  z.ZodTypeDef,
  PatchV2TasksTaskIdLinkedRecords1
> = z.object({
  targetObject: z.string(),
  targetRecordId: z.string(),
}).transform((v) => {
  return remap$(v, {
    targetObject: "target_object",
    targetRecordId: "target_record_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2TasksTaskIdLinkedRecords1$ {
  /** @deprecated use `PatchV2TasksTaskIdLinkedRecords1$inboundSchema` instead. */
  export const inboundSchema = PatchV2TasksTaskIdLinkedRecords1$inboundSchema;
  /** @deprecated use `PatchV2TasksTaskIdLinkedRecords1$outboundSchema` instead. */
  export const outboundSchema = PatchV2TasksTaskIdLinkedRecords1$outboundSchema;
  /** @deprecated use `PatchV2TasksTaskIdLinkedRecords1$Outbound` instead. */
  export type Outbound = PatchV2TasksTaskIdLinkedRecords1$Outbound;
}

export function patchV2TasksTaskIdLinkedRecords1ToJSON(
  patchV2TasksTaskIdLinkedRecords1: PatchV2TasksTaskIdLinkedRecords1,
): string {
  return JSON.stringify(
    PatchV2TasksTaskIdLinkedRecords1$outboundSchema.parse(
      patchV2TasksTaskIdLinkedRecords1,
    ),
  );
}

export function patchV2TasksTaskIdLinkedRecords1FromJSON(
  jsonString: string,
): SafeParseResult<PatchV2TasksTaskIdLinkedRecords1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV2TasksTaskIdLinkedRecords1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV2TasksTaskIdLinkedRecords1' from JSON`,
  );
}

/** @internal */
export const PatchV2TasksTaskIdLinkedRecords$inboundSchema: z.ZodType<
  PatchV2TasksTaskIdLinkedRecords,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => PatchV2TasksTaskIdLinkedRecords1$inboundSchema),
  z.lazy(() => PatchV2TasksTaskIdLinkedRecords2$inboundSchema),
]);

/** @internal */
export type PatchV2TasksTaskIdLinkedRecords$Outbound =
  | PatchV2TasksTaskIdLinkedRecords1$Outbound
  | PatchV2TasksTaskIdLinkedRecords2$Outbound;

/** @internal */
export const PatchV2TasksTaskIdLinkedRecords$outboundSchema: z.ZodType<
  PatchV2TasksTaskIdLinkedRecords$Outbound,
  z.ZodTypeDef,
  PatchV2TasksTaskIdLinkedRecords
> = z.union([
  z.lazy(() => PatchV2TasksTaskIdLinkedRecords1$outboundSchema),
  z.lazy(() => PatchV2TasksTaskIdLinkedRecords2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2TasksTaskIdLinkedRecords$ {
  /** @deprecated use `PatchV2TasksTaskIdLinkedRecords$inboundSchema` instead. */
  export const inboundSchema = PatchV2TasksTaskIdLinkedRecords$inboundSchema;
  /** @deprecated use `PatchV2TasksTaskIdLinkedRecords$outboundSchema` instead. */
  export const outboundSchema = PatchV2TasksTaskIdLinkedRecords$outboundSchema;
  /** @deprecated use `PatchV2TasksTaskIdLinkedRecords$Outbound` instead. */
  export type Outbound = PatchV2TasksTaskIdLinkedRecords$Outbound;
}

export function patchV2TasksTaskIdLinkedRecordsToJSON(
  patchV2TasksTaskIdLinkedRecords: PatchV2TasksTaskIdLinkedRecords,
): string {
  return JSON.stringify(
    PatchV2TasksTaskIdLinkedRecords$outboundSchema.parse(
      patchV2TasksTaskIdLinkedRecords,
    ),
  );
}

export function patchV2TasksTaskIdLinkedRecordsFromJSON(
  jsonString: string,
): SafeParseResult<PatchV2TasksTaskIdLinkedRecords, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV2TasksTaskIdLinkedRecords$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV2TasksTaskIdLinkedRecords' from JSON`,
  );
}

/** @internal */
export const PatchV2TasksTaskIdAssignees2$inboundSchema: z.ZodType<
  PatchV2TasksTaskIdAssignees2,
  z.ZodTypeDef,
  unknown
> = z.object({
  workspace_member_email_address: z.string(),
}).transform((v) => {
  return remap$(v, {
    "workspace_member_email_address": "workspaceMemberEmailAddress",
  });
});

/** @internal */
export type PatchV2TasksTaskIdAssignees2$Outbound = {
  workspace_member_email_address: string;
};

/** @internal */
export const PatchV2TasksTaskIdAssignees2$outboundSchema: z.ZodType<
  PatchV2TasksTaskIdAssignees2$Outbound,
  z.ZodTypeDef,
  PatchV2TasksTaskIdAssignees2
> = z.object({
  workspaceMemberEmailAddress: z.string(),
}).transform((v) => {
  return remap$(v, {
    workspaceMemberEmailAddress: "workspace_member_email_address",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2TasksTaskIdAssignees2$ {
  /** @deprecated use `PatchV2TasksTaskIdAssignees2$inboundSchema` instead. */
  export const inboundSchema = PatchV2TasksTaskIdAssignees2$inboundSchema;
  /** @deprecated use `PatchV2TasksTaskIdAssignees2$outboundSchema` instead. */
  export const outboundSchema = PatchV2TasksTaskIdAssignees2$outboundSchema;
  /** @deprecated use `PatchV2TasksTaskIdAssignees2$Outbound` instead. */
  export type Outbound = PatchV2TasksTaskIdAssignees2$Outbound;
}

export function patchV2TasksTaskIdAssignees2ToJSON(
  patchV2TasksTaskIdAssignees2: PatchV2TasksTaskIdAssignees2,
): string {
  return JSON.stringify(
    PatchV2TasksTaskIdAssignees2$outboundSchema.parse(
      patchV2TasksTaskIdAssignees2,
    ),
  );
}

export function patchV2TasksTaskIdAssignees2FromJSON(
  jsonString: string,
): SafeParseResult<PatchV2TasksTaskIdAssignees2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV2TasksTaskIdAssignees2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV2TasksTaskIdAssignees2' from JSON`,
  );
}

/** @internal */
export const AssigneesReferencedActorType$inboundSchema: z.ZodNativeEnum<
  typeof AssigneesReferencedActorType
> = z.nativeEnum(AssigneesReferencedActorType);

/** @internal */
export const AssigneesReferencedActorType$outboundSchema: z.ZodNativeEnum<
  typeof AssigneesReferencedActorType
> = AssigneesReferencedActorType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssigneesReferencedActorType$ {
  /** @deprecated use `AssigneesReferencedActorType$inboundSchema` instead. */
  export const inboundSchema = AssigneesReferencedActorType$inboundSchema;
  /** @deprecated use `AssigneesReferencedActorType$outboundSchema` instead. */
  export const outboundSchema = AssigneesReferencedActorType$outboundSchema;
}

/** @internal */
export const PatchV2TasksTaskIdAssignees1$inboundSchema: z.ZodType<
  PatchV2TasksTaskIdAssignees1,
  z.ZodTypeDef,
  unknown
> = z.object({
  referenced_actor_type: AssigneesReferencedActorType$inboundSchema,
  referenced_actor_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "referenced_actor_type": "referencedActorType",
    "referenced_actor_id": "referencedActorId",
  });
});

/** @internal */
export type PatchV2TasksTaskIdAssignees1$Outbound = {
  referenced_actor_type: string;
  referenced_actor_id: string;
};

/** @internal */
export const PatchV2TasksTaskIdAssignees1$outboundSchema: z.ZodType<
  PatchV2TasksTaskIdAssignees1$Outbound,
  z.ZodTypeDef,
  PatchV2TasksTaskIdAssignees1
> = z.object({
  referencedActorType: AssigneesReferencedActorType$outboundSchema,
  referencedActorId: z.string(),
}).transform((v) => {
  return remap$(v, {
    referencedActorType: "referenced_actor_type",
    referencedActorId: "referenced_actor_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2TasksTaskIdAssignees1$ {
  /** @deprecated use `PatchV2TasksTaskIdAssignees1$inboundSchema` instead. */
  export const inboundSchema = PatchV2TasksTaskIdAssignees1$inboundSchema;
  /** @deprecated use `PatchV2TasksTaskIdAssignees1$outboundSchema` instead. */
  export const outboundSchema = PatchV2TasksTaskIdAssignees1$outboundSchema;
  /** @deprecated use `PatchV2TasksTaskIdAssignees1$Outbound` instead. */
  export type Outbound = PatchV2TasksTaskIdAssignees1$Outbound;
}

export function patchV2TasksTaskIdAssignees1ToJSON(
  patchV2TasksTaskIdAssignees1: PatchV2TasksTaskIdAssignees1,
): string {
  return JSON.stringify(
    PatchV2TasksTaskIdAssignees1$outboundSchema.parse(
      patchV2TasksTaskIdAssignees1,
    ),
  );
}

export function patchV2TasksTaskIdAssignees1FromJSON(
  jsonString: string,
): SafeParseResult<PatchV2TasksTaskIdAssignees1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV2TasksTaskIdAssignees1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV2TasksTaskIdAssignees1' from JSON`,
  );
}

/** @internal */
export const PatchV2TasksTaskIdAssignees$inboundSchema: z.ZodType<
  PatchV2TasksTaskIdAssignees,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => PatchV2TasksTaskIdAssignees2$inboundSchema),
  z.lazy(() => PatchV2TasksTaskIdAssignees1$inboundSchema),
]);

/** @internal */
export type PatchV2TasksTaskIdAssignees$Outbound =
  | PatchV2TasksTaskIdAssignees2$Outbound
  | PatchV2TasksTaskIdAssignees1$Outbound;

/** @internal */
export const PatchV2TasksTaskIdAssignees$outboundSchema: z.ZodType<
  PatchV2TasksTaskIdAssignees$Outbound,
  z.ZodTypeDef,
  PatchV2TasksTaskIdAssignees
> = z.union([
  z.lazy(() => PatchV2TasksTaskIdAssignees2$outboundSchema),
  z.lazy(() => PatchV2TasksTaskIdAssignees1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2TasksTaskIdAssignees$ {
  /** @deprecated use `PatchV2TasksTaskIdAssignees$inboundSchema` instead. */
  export const inboundSchema = PatchV2TasksTaskIdAssignees$inboundSchema;
  /** @deprecated use `PatchV2TasksTaskIdAssignees$outboundSchema` instead. */
  export const outboundSchema = PatchV2TasksTaskIdAssignees$outboundSchema;
  /** @deprecated use `PatchV2TasksTaskIdAssignees$Outbound` instead. */
  export type Outbound = PatchV2TasksTaskIdAssignees$Outbound;
}

export function patchV2TasksTaskIdAssigneesToJSON(
  patchV2TasksTaskIdAssignees: PatchV2TasksTaskIdAssignees,
): string {
  return JSON.stringify(
    PatchV2TasksTaskIdAssignees$outboundSchema.parse(
      patchV2TasksTaskIdAssignees,
    ),
  );
}

export function patchV2TasksTaskIdAssigneesFromJSON(
  jsonString: string,
): SafeParseResult<PatchV2TasksTaskIdAssignees, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV2TasksTaskIdAssignees$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV2TasksTaskIdAssignees' from JSON`,
  );
}

/** @internal */
export const PatchV2TasksTaskIdData$inboundSchema: z.ZodType<
  PatchV2TasksTaskIdData,
  z.ZodTypeDef,
  unknown
> = z.object({
  deadline_at: z.nullable(z.string()).optional(),
  is_completed: z.boolean().optional(),
  linked_records: z.array(
    z.union([
      z.lazy(() => PatchV2TasksTaskIdLinkedRecords1$inboundSchema),
      z.lazy(() => PatchV2TasksTaskIdLinkedRecords2$inboundSchema),
    ]),
  ).optional(),
  assignees: z.array(
    z.union([
      z.lazy(() => PatchV2TasksTaskIdAssignees2$inboundSchema),
      z.lazy(() => PatchV2TasksTaskIdAssignees1$inboundSchema),
    ]),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "deadline_at": "deadlineAt",
    "is_completed": "isCompleted",
    "linked_records": "linkedRecords",
  });
});

/** @internal */
export type PatchV2TasksTaskIdData$Outbound = {
  deadline_at?: string | null | undefined;
  is_completed?: boolean | undefined;
  linked_records?:
    | Array<
      | PatchV2TasksTaskIdLinkedRecords1$Outbound
      | PatchV2TasksTaskIdLinkedRecords2$Outbound
    >
    | undefined;
  assignees?:
    | Array<
      | PatchV2TasksTaskIdAssignees2$Outbound
      | PatchV2TasksTaskIdAssignees1$Outbound
    >
    | undefined;
};

/** @internal */
export const PatchV2TasksTaskIdData$outboundSchema: z.ZodType<
  PatchV2TasksTaskIdData$Outbound,
  z.ZodTypeDef,
  PatchV2TasksTaskIdData
> = z.object({
  deadlineAt: z.nullable(z.string()).optional(),
  isCompleted: z.boolean().optional(),
  linkedRecords: z.array(
    z.union([
      z.lazy(() => PatchV2TasksTaskIdLinkedRecords1$outboundSchema),
      z.lazy(() => PatchV2TasksTaskIdLinkedRecords2$outboundSchema),
    ]),
  ).optional(),
  assignees: z.array(
    z.union([
      z.lazy(() => PatchV2TasksTaskIdAssignees2$outboundSchema),
      z.lazy(() => PatchV2TasksTaskIdAssignees1$outboundSchema),
    ]),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    deadlineAt: "deadline_at",
    isCompleted: "is_completed",
    linkedRecords: "linked_records",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2TasksTaskIdData$ {
  /** @deprecated use `PatchV2TasksTaskIdData$inboundSchema` instead. */
  export const inboundSchema = PatchV2TasksTaskIdData$inboundSchema;
  /** @deprecated use `PatchV2TasksTaskIdData$outboundSchema` instead. */
  export const outboundSchema = PatchV2TasksTaskIdData$outboundSchema;
  /** @deprecated use `PatchV2TasksTaskIdData$Outbound` instead. */
  export type Outbound = PatchV2TasksTaskIdData$Outbound;
}

export function patchV2TasksTaskIdDataToJSON(
  patchV2TasksTaskIdData: PatchV2TasksTaskIdData,
): string {
  return JSON.stringify(
    PatchV2TasksTaskIdData$outboundSchema.parse(patchV2TasksTaskIdData),
  );
}

export function patchV2TasksTaskIdDataFromJSON(
  jsonString: string,
): SafeParseResult<PatchV2TasksTaskIdData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV2TasksTaskIdData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV2TasksTaskIdData' from JSON`,
  );
}

/** @internal */
export const PatchV2TasksTaskIdRequestBody$inboundSchema: z.ZodType<
  PatchV2TasksTaskIdRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => PatchV2TasksTaskIdData$inboundSchema),
});

/** @internal */
export type PatchV2TasksTaskIdRequestBody$Outbound = {
  data: PatchV2TasksTaskIdData$Outbound;
};

/** @internal */
export const PatchV2TasksTaskIdRequestBody$outboundSchema: z.ZodType<
  PatchV2TasksTaskIdRequestBody$Outbound,
  z.ZodTypeDef,
  PatchV2TasksTaskIdRequestBody
> = z.object({
  data: z.lazy(() => PatchV2TasksTaskIdData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2TasksTaskIdRequestBody$ {
  /** @deprecated use `PatchV2TasksTaskIdRequestBody$inboundSchema` instead. */
  export const inboundSchema = PatchV2TasksTaskIdRequestBody$inboundSchema;
  /** @deprecated use `PatchV2TasksTaskIdRequestBody$outboundSchema` instead. */
  export const outboundSchema = PatchV2TasksTaskIdRequestBody$outboundSchema;
  /** @deprecated use `PatchV2TasksTaskIdRequestBody$Outbound` instead. */
  export type Outbound = PatchV2TasksTaskIdRequestBody$Outbound;
}

export function patchV2TasksTaskIdRequestBodyToJSON(
  patchV2TasksTaskIdRequestBody: PatchV2TasksTaskIdRequestBody,
): string {
  return JSON.stringify(
    PatchV2TasksTaskIdRequestBody$outboundSchema.parse(
      patchV2TasksTaskIdRequestBody,
    ),
  );
}

export function patchV2TasksTaskIdRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PatchV2TasksTaskIdRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV2TasksTaskIdRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV2TasksTaskIdRequestBody' from JSON`,
  );
}

/** @internal */
export const PatchV2TasksTaskIdRequest$inboundSchema: z.ZodType<
  PatchV2TasksTaskIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  task_id: z.string(),
  RequestBody: z.lazy(() => PatchV2TasksTaskIdRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "task_id": "taskId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PatchV2TasksTaskIdRequest$Outbound = {
  task_id: string;
  RequestBody: PatchV2TasksTaskIdRequestBody$Outbound;
};

/** @internal */
export const PatchV2TasksTaskIdRequest$outboundSchema: z.ZodType<
  PatchV2TasksTaskIdRequest$Outbound,
  z.ZodTypeDef,
  PatchV2TasksTaskIdRequest
> = z.object({
  taskId: z.string(),
  requestBody: z.lazy(() => PatchV2TasksTaskIdRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    taskId: "task_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2TasksTaskIdRequest$ {
  /** @deprecated use `PatchV2TasksTaskIdRequest$inboundSchema` instead. */
  export const inboundSchema = PatchV2TasksTaskIdRequest$inboundSchema;
  /** @deprecated use `PatchV2TasksTaskIdRequest$outboundSchema` instead. */
  export const outboundSchema = PatchV2TasksTaskIdRequest$outboundSchema;
  /** @deprecated use `PatchV2TasksTaskIdRequest$Outbound` instead. */
  export type Outbound = PatchV2TasksTaskIdRequest$Outbound;
}

export function patchV2TasksTaskIdRequestToJSON(
  patchV2TasksTaskIdRequest: PatchV2TasksTaskIdRequest,
): string {
  return JSON.stringify(
    PatchV2TasksTaskIdRequest$outboundSchema.parse(patchV2TasksTaskIdRequest),
  );
}

export function patchV2TasksTaskIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<PatchV2TasksTaskIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV2TasksTaskIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV2TasksTaskIdRequest' from JSON`,
  );
}

/** @internal */
export const PatchV2TasksTaskIdResponseBody$inboundSchema: z.ZodType<
  PatchV2TasksTaskIdResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: components.Task$inboundSchema,
});

/** @internal */
export type PatchV2TasksTaskIdResponseBody$Outbound = {
  data: components.Task$Outbound;
};

/** @internal */
export const PatchV2TasksTaskIdResponseBody$outboundSchema: z.ZodType<
  PatchV2TasksTaskIdResponseBody$Outbound,
  z.ZodTypeDef,
  PatchV2TasksTaskIdResponseBody
> = z.object({
  data: components.Task$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2TasksTaskIdResponseBody$ {
  /** @deprecated use `PatchV2TasksTaskIdResponseBody$inboundSchema` instead. */
  export const inboundSchema = PatchV2TasksTaskIdResponseBody$inboundSchema;
  /** @deprecated use `PatchV2TasksTaskIdResponseBody$outboundSchema` instead. */
  export const outboundSchema = PatchV2TasksTaskIdResponseBody$outboundSchema;
  /** @deprecated use `PatchV2TasksTaskIdResponseBody$Outbound` instead. */
  export type Outbound = PatchV2TasksTaskIdResponseBody$Outbound;
}

export function patchV2TasksTaskIdResponseBodyToJSON(
  patchV2TasksTaskIdResponseBody: PatchV2TasksTaskIdResponseBody,
): string {
  return JSON.stringify(
    PatchV2TasksTaskIdResponseBody$outboundSchema.parse(
      patchV2TasksTaskIdResponseBody,
    ),
  );
}

export function patchV2TasksTaskIdResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<PatchV2TasksTaskIdResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV2TasksTaskIdResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV2TasksTaskIdResponseBody' from JSON`,
  );
}
