/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetV2WebhooksWebhookIdRequest = {
  webhookId: string;
};

/**
 * Type of event the webhook is subscribed to.
 */
export const GetV2WebhooksWebhookIdEventType = {
  CommentCreated: "comment.created",
  CommentResolved: "comment.resolved",
  CommentUnresolved: "comment.unresolved",
  CommentDeleted: "comment.deleted",
  ListCreated: "list.created",
  ListUpdated: "list.updated",
  ListDeleted: "list.deleted",
  ListAttributeCreated: "list-attribute.created",
  ListAttributeUpdated: "list-attribute.updated",
  ListEntryCreated: "list-entry.created",
  ListEntryUpdated: "list-entry.updated",
  ListEntryDeleted: "list-entry.deleted",
  ObjectAttributeCreated: "object-attribute.created",
  ObjectAttributeUpdated: "object-attribute.updated",
  NoteCreated: "note.created",
  NoteUpdated: "note.updated",
  NoteDeleted: "note.deleted",
  RecordCreated: "record.created",
  RecordMerged: "record.merged",
  RecordUpdated: "record.updated",
  RecordDeleted: "record.deleted",
  TaskCreated: "task.created",
  TaskUpdated: "task.updated",
  TaskDeleted: "task.deleted",
  WorkspaceMemberCreated: "workspace-member.created",
} as const;
/**
 * Type of event the webhook is subscribed to.
 */
export type GetV2WebhooksWebhookIdEventType = ClosedEnum<
  typeof GetV2WebhooksWebhookIdEventType
>;

export const GetV2WebhooksWebhookIdDollarAndWebhooksOperator = {
  NotEquals: "not_equals",
} as const;
export type GetV2WebhooksWebhookIdDollarAndWebhooksOperator = ClosedEnum<
  typeof GetV2WebhooksWebhookIdDollarAndWebhooksOperator
>;

export type GetV2WebhooksWebhookIdDollarAnd2 = {
  field: string;
  operator: GetV2WebhooksWebhookIdDollarAndWebhooksOperator;
  value: string;
};

export const GetV2WebhooksWebhookIdDollarAndOperator = {
  Equals: "equals",
} as const;
export type GetV2WebhooksWebhookIdDollarAndOperator = ClosedEnum<
  typeof GetV2WebhooksWebhookIdDollarAndOperator
>;

export type GetV2WebhooksWebhookIdDollarAnd1 = {
  field: string;
  operator: GetV2WebhooksWebhookIdDollarAndOperator;
  value: string;
};

export type GetV2WebhooksWebhookIdFilterDollarAnd =
  | GetV2WebhooksWebhookIdDollarAnd1
  | GetV2WebhooksWebhookIdDollarAnd2;

export type GetV2WebhooksWebhookIdFilter2 = {
  dollarAnd: Array<
    GetV2WebhooksWebhookIdDollarAnd1 | GetV2WebhooksWebhookIdDollarAnd2
  >;
};

export const GetV2WebhooksWebhookIdDollarOrWebhooksOperator = {
  NotEquals: "not_equals",
} as const;
export type GetV2WebhooksWebhookIdDollarOrWebhooksOperator = ClosedEnum<
  typeof GetV2WebhooksWebhookIdDollarOrWebhooksOperator
>;

export type GetV2WebhooksWebhookIdDollarOr2 = {
  field: string;
  operator: GetV2WebhooksWebhookIdDollarOrWebhooksOperator;
  value: string;
};

export const GetV2WebhooksWebhookIdDollarOrOperator = {
  Equals: "equals",
} as const;
export type GetV2WebhooksWebhookIdDollarOrOperator = ClosedEnum<
  typeof GetV2WebhooksWebhookIdDollarOrOperator
>;

export type GetV2WebhooksWebhookIdDollarOr1 = {
  field: string;
  operator: GetV2WebhooksWebhookIdDollarOrOperator;
  value: string;
};

export type GetV2WebhooksWebhookIdFilterDollarOr =
  | GetV2WebhooksWebhookIdDollarOr1
  | GetV2WebhooksWebhookIdDollarOr2;

export type GetV2WebhooksWebhookIdFilter1 = {
  dollarOr: Array<
    GetV2WebhooksWebhookIdDollarOr1 | GetV2WebhooksWebhookIdDollarOr2
  >;
};

/**
 * Filters to determine whether the webhook event should be sent. If null, the filter always passes.
 */
export type GetV2WebhooksWebhookIdFilter =
  | GetV2WebhooksWebhookIdFilter1
  | GetV2WebhooksWebhookIdFilter2;

export type GetV2WebhooksWebhookIdSubscriptions = {
  /**
   * Type of event the webhook is subscribed to.
   */
  eventType: GetV2WebhooksWebhookIdEventType;
  /**
   * Filters to determine whether the webhook event should be sent. If null, the filter always passes.
   */
  filter: GetV2WebhooksWebhookIdFilter1 | GetV2WebhooksWebhookIdFilter2 | null;
};

export type GetV2WebhooksWebhookIdId = {
  /**
   * The ID of the workspace the webhook belongs to.
   */
  workspaceId: string;
  /**
   * The ID of the webhook.
   */
  webhookId: string;
};

/**
 * The state of the webhook. Webhooks marked as active and degraded will receive events, inactive ones will not. If a webhook remains in the degraded state for 7 days, it will be marked inactive.
 */
export const GetV2WebhooksWebhookIdStatus = {
  Active: "active",
  Degraded: "degraded",
  Inactive: "inactive",
} as const;
/**
 * The state of the webhook. Webhooks marked as active and degraded will receive events, inactive ones will not. If a webhook remains in the degraded state for 7 days, it will be marked inactive.
 */
export type GetV2WebhooksWebhookIdStatus = ClosedEnum<
  typeof GetV2WebhooksWebhookIdStatus
>;

export type GetV2WebhooksWebhookIdData = {
  /**
   * URL where the webhook events will be delivered to.
   */
  targetUrl: string;
  /**
   * One or more events the webhook is subscribed to.
   */
  subscriptions: Array<GetV2WebhooksWebhookIdSubscriptions>;
  id: GetV2WebhooksWebhookIdId;
  /**
   * The state of the webhook. Webhooks marked as active and degraded will receive events, inactive ones will not. If a webhook remains in the degraded state for 7 days, it will be marked inactive.
   */
  status: GetV2WebhooksWebhookIdStatus;
  /**
   * When the webhook was created.
   */
  createdAt: string;
};

/**
 * Success
 */
export type GetV2WebhooksWebhookIdResponseBody = {
  data: GetV2WebhooksWebhookIdData;
};

/** @internal */
export const GetV2WebhooksWebhookIdRequest$inboundSchema: z.ZodType<
  GetV2WebhooksWebhookIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  webhook_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "webhook_id": "webhookId",
  });
});

/** @internal */
export type GetV2WebhooksWebhookIdRequest$Outbound = {
  webhook_id: string;
};

/** @internal */
export const GetV2WebhooksWebhookIdRequest$outboundSchema: z.ZodType<
  GetV2WebhooksWebhookIdRequest$Outbound,
  z.ZodTypeDef,
  GetV2WebhooksWebhookIdRequest
> = z.object({
  webhookId: z.string(),
}).transform((v) => {
  return remap$(v, {
    webhookId: "webhook_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2WebhooksWebhookIdRequest$ {
  /** @deprecated use `GetV2WebhooksWebhookIdRequest$inboundSchema` instead. */
  export const inboundSchema = GetV2WebhooksWebhookIdRequest$inboundSchema;
  /** @deprecated use `GetV2WebhooksWebhookIdRequest$outboundSchema` instead. */
  export const outboundSchema = GetV2WebhooksWebhookIdRequest$outboundSchema;
  /** @deprecated use `GetV2WebhooksWebhookIdRequest$Outbound` instead. */
  export type Outbound = GetV2WebhooksWebhookIdRequest$Outbound;
}

export function getV2WebhooksWebhookIdRequestToJSON(
  getV2WebhooksWebhookIdRequest: GetV2WebhooksWebhookIdRequest,
): string {
  return JSON.stringify(
    GetV2WebhooksWebhookIdRequest$outboundSchema.parse(
      getV2WebhooksWebhookIdRequest,
    ),
  );
}

export function getV2WebhooksWebhookIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetV2WebhooksWebhookIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2WebhooksWebhookIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2WebhooksWebhookIdRequest' from JSON`,
  );
}

/** @internal */
export const GetV2WebhooksWebhookIdEventType$inboundSchema: z.ZodNativeEnum<
  typeof GetV2WebhooksWebhookIdEventType
> = z.nativeEnum(GetV2WebhooksWebhookIdEventType);

/** @internal */
export const GetV2WebhooksWebhookIdEventType$outboundSchema: z.ZodNativeEnum<
  typeof GetV2WebhooksWebhookIdEventType
> = GetV2WebhooksWebhookIdEventType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2WebhooksWebhookIdEventType$ {
  /** @deprecated use `GetV2WebhooksWebhookIdEventType$inboundSchema` instead. */
  export const inboundSchema = GetV2WebhooksWebhookIdEventType$inboundSchema;
  /** @deprecated use `GetV2WebhooksWebhookIdEventType$outboundSchema` instead. */
  export const outboundSchema = GetV2WebhooksWebhookIdEventType$outboundSchema;
}

/** @internal */
export const GetV2WebhooksWebhookIdDollarAndWebhooksOperator$inboundSchema:
  z.ZodNativeEnum<typeof GetV2WebhooksWebhookIdDollarAndWebhooksOperator> = z
    .nativeEnum(GetV2WebhooksWebhookIdDollarAndWebhooksOperator);

/** @internal */
export const GetV2WebhooksWebhookIdDollarAndWebhooksOperator$outboundSchema:
  z.ZodNativeEnum<typeof GetV2WebhooksWebhookIdDollarAndWebhooksOperator> =
    GetV2WebhooksWebhookIdDollarAndWebhooksOperator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2WebhooksWebhookIdDollarAndWebhooksOperator$ {
  /** @deprecated use `GetV2WebhooksWebhookIdDollarAndWebhooksOperator$inboundSchema` instead. */
  export const inboundSchema =
    GetV2WebhooksWebhookIdDollarAndWebhooksOperator$inboundSchema;
  /** @deprecated use `GetV2WebhooksWebhookIdDollarAndWebhooksOperator$outboundSchema` instead. */
  export const outboundSchema =
    GetV2WebhooksWebhookIdDollarAndWebhooksOperator$outboundSchema;
}

/** @internal */
export const GetV2WebhooksWebhookIdDollarAnd2$inboundSchema: z.ZodType<
  GetV2WebhooksWebhookIdDollarAnd2,
  z.ZodTypeDef,
  unknown
> = z.object({
  field: z.string(),
  operator: GetV2WebhooksWebhookIdDollarAndWebhooksOperator$inboundSchema,
  value: z.string(),
});

/** @internal */
export type GetV2WebhooksWebhookIdDollarAnd2$Outbound = {
  field: string;
  operator: string;
  value: string;
};

/** @internal */
export const GetV2WebhooksWebhookIdDollarAnd2$outboundSchema: z.ZodType<
  GetV2WebhooksWebhookIdDollarAnd2$Outbound,
  z.ZodTypeDef,
  GetV2WebhooksWebhookIdDollarAnd2
> = z.object({
  field: z.string(),
  operator: GetV2WebhooksWebhookIdDollarAndWebhooksOperator$outboundSchema,
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2WebhooksWebhookIdDollarAnd2$ {
  /** @deprecated use `GetV2WebhooksWebhookIdDollarAnd2$inboundSchema` instead. */
  export const inboundSchema = GetV2WebhooksWebhookIdDollarAnd2$inboundSchema;
  /** @deprecated use `GetV2WebhooksWebhookIdDollarAnd2$outboundSchema` instead. */
  export const outboundSchema = GetV2WebhooksWebhookIdDollarAnd2$outboundSchema;
  /** @deprecated use `GetV2WebhooksWebhookIdDollarAnd2$Outbound` instead. */
  export type Outbound = GetV2WebhooksWebhookIdDollarAnd2$Outbound;
}

export function getV2WebhooksWebhookIdDollarAnd2ToJSON(
  getV2WebhooksWebhookIdDollarAnd2: GetV2WebhooksWebhookIdDollarAnd2,
): string {
  return JSON.stringify(
    GetV2WebhooksWebhookIdDollarAnd2$outboundSchema.parse(
      getV2WebhooksWebhookIdDollarAnd2,
    ),
  );
}

export function getV2WebhooksWebhookIdDollarAnd2FromJSON(
  jsonString: string,
): SafeParseResult<GetV2WebhooksWebhookIdDollarAnd2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2WebhooksWebhookIdDollarAnd2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2WebhooksWebhookIdDollarAnd2' from JSON`,
  );
}

/** @internal */
export const GetV2WebhooksWebhookIdDollarAndOperator$inboundSchema:
  z.ZodNativeEnum<typeof GetV2WebhooksWebhookIdDollarAndOperator> = z
    .nativeEnum(GetV2WebhooksWebhookIdDollarAndOperator);

/** @internal */
export const GetV2WebhooksWebhookIdDollarAndOperator$outboundSchema:
  z.ZodNativeEnum<typeof GetV2WebhooksWebhookIdDollarAndOperator> =
    GetV2WebhooksWebhookIdDollarAndOperator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2WebhooksWebhookIdDollarAndOperator$ {
  /** @deprecated use `GetV2WebhooksWebhookIdDollarAndOperator$inboundSchema` instead. */
  export const inboundSchema =
    GetV2WebhooksWebhookIdDollarAndOperator$inboundSchema;
  /** @deprecated use `GetV2WebhooksWebhookIdDollarAndOperator$outboundSchema` instead. */
  export const outboundSchema =
    GetV2WebhooksWebhookIdDollarAndOperator$outboundSchema;
}

/** @internal */
export const GetV2WebhooksWebhookIdDollarAnd1$inboundSchema: z.ZodType<
  GetV2WebhooksWebhookIdDollarAnd1,
  z.ZodTypeDef,
  unknown
> = z.object({
  field: z.string(),
  operator: GetV2WebhooksWebhookIdDollarAndOperator$inboundSchema,
  value: z.string(),
});

/** @internal */
export type GetV2WebhooksWebhookIdDollarAnd1$Outbound = {
  field: string;
  operator: string;
  value: string;
};

/** @internal */
export const GetV2WebhooksWebhookIdDollarAnd1$outboundSchema: z.ZodType<
  GetV2WebhooksWebhookIdDollarAnd1$Outbound,
  z.ZodTypeDef,
  GetV2WebhooksWebhookIdDollarAnd1
> = z.object({
  field: z.string(),
  operator: GetV2WebhooksWebhookIdDollarAndOperator$outboundSchema,
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2WebhooksWebhookIdDollarAnd1$ {
  /** @deprecated use `GetV2WebhooksWebhookIdDollarAnd1$inboundSchema` instead. */
  export const inboundSchema = GetV2WebhooksWebhookIdDollarAnd1$inboundSchema;
  /** @deprecated use `GetV2WebhooksWebhookIdDollarAnd1$outboundSchema` instead. */
  export const outboundSchema = GetV2WebhooksWebhookIdDollarAnd1$outboundSchema;
  /** @deprecated use `GetV2WebhooksWebhookIdDollarAnd1$Outbound` instead. */
  export type Outbound = GetV2WebhooksWebhookIdDollarAnd1$Outbound;
}

export function getV2WebhooksWebhookIdDollarAnd1ToJSON(
  getV2WebhooksWebhookIdDollarAnd1: GetV2WebhooksWebhookIdDollarAnd1,
): string {
  return JSON.stringify(
    GetV2WebhooksWebhookIdDollarAnd1$outboundSchema.parse(
      getV2WebhooksWebhookIdDollarAnd1,
    ),
  );
}

export function getV2WebhooksWebhookIdDollarAnd1FromJSON(
  jsonString: string,
): SafeParseResult<GetV2WebhooksWebhookIdDollarAnd1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2WebhooksWebhookIdDollarAnd1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2WebhooksWebhookIdDollarAnd1' from JSON`,
  );
}

/** @internal */
export const GetV2WebhooksWebhookIdFilterDollarAnd$inboundSchema: z.ZodType<
  GetV2WebhooksWebhookIdFilterDollarAnd,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetV2WebhooksWebhookIdDollarAnd1$inboundSchema),
  z.lazy(() => GetV2WebhooksWebhookIdDollarAnd2$inboundSchema),
]);

/** @internal */
export type GetV2WebhooksWebhookIdFilterDollarAnd$Outbound =
  | GetV2WebhooksWebhookIdDollarAnd1$Outbound
  | GetV2WebhooksWebhookIdDollarAnd2$Outbound;

/** @internal */
export const GetV2WebhooksWebhookIdFilterDollarAnd$outboundSchema: z.ZodType<
  GetV2WebhooksWebhookIdFilterDollarAnd$Outbound,
  z.ZodTypeDef,
  GetV2WebhooksWebhookIdFilterDollarAnd
> = z.union([
  z.lazy(() => GetV2WebhooksWebhookIdDollarAnd1$outboundSchema),
  z.lazy(() => GetV2WebhooksWebhookIdDollarAnd2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2WebhooksWebhookIdFilterDollarAnd$ {
  /** @deprecated use `GetV2WebhooksWebhookIdFilterDollarAnd$inboundSchema` instead. */
  export const inboundSchema =
    GetV2WebhooksWebhookIdFilterDollarAnd$inboundSchema;
  /** @deprecated use `GetV2WebhooksWebhookIdFilterDollarAnd$outboundSchema` instead. */
  export const outboundSchema =
    GetV2WebhooksWebhookIdFilterDollarAnd$outboundSchema;
  /** @deprecated use `GetV2WebhooksWebhookIdFilterDollarAnd$Outbound` instead. */
  export type Outbound = GetV2WebhooksWebhookIdFilterDollarAnd$Outbound;
}

export function getV2WebhooksWebhookIdFilterDollarAndToJSON(
  getV2WebhooksWebhookIdFilterDollarAnd: GetV2WebhooksWebhookIdFilterDollarAnd,
): string {
  return JSON.stringify(
    GetV2WebhooksWebhookIdFilterDollarAnd$outboundSchema.parse(
      getV2WebhooksWebhookIdFilterDollarAnd,
    ),
  );
}

export function getV2WebhooksWebhookIdFilterDollarAndFromJSON(
  jsonString: string,
): SafeParseResult<GetV2WebhooksWebhookIdFilterDollarAnd, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2WebhooksWebhookIdFilterDollarAnd$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2WebhooksWebhookIdFilterDollarAnd' from JSON`,
  );
}

/** @internal */
export const GetV2WebhooksWebhookIdFilter2$inboundSchema: z.ZodType<
  GetV2WebhooksWebhookIdFilter2,
  z.ZodTypeDef,
  unknown
> = z.object({
  $and: z.array(
    z.union([
      z.lazy(() => GetV2WebhooksWebhookIdDollarAnd1$inboundSchema),
      z.lazy(() => GetV2WebhooksWebhookIdDollarAnd2$inboundSchema),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    "$and": "dollarAnd",
  });
});

/** @internal */
export type GetV2WebhooksWebhookIdFilter2$Outbound = {
  $and: Array<
    | GetV2WebhooksWebhookIdDollarAnd1$Outbound
    | GetV2WebhooksWebhookIdDollarAnd2$Outbound
  >;
};

/** @internal */
export const GetV2WebhooksWebhookIdFilter2$outboundSchema: z.ZodType<
  GetV2WebhooksWebhookIdFilter2$Outbound,
  z.ZodTypeDef,
  GetV2WebhooksWebhookIdFilter2
> = z.object({
  dollarAnd: z.array(
    z.union([
      z.lazy(() => GetV2WebhooksWebhookIdDollarAnd1$outboundSchema),
      z.lazy(() => GetV2WebhooksWebhookIdDollarAnd2$outboundSchema),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    dollarAnd: "$and",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2WebhooksWebhookIdFilter2$ {
  /** @deprecated use `GetV2WebhooksWebhookIdFilter2$inboundSchema` instead. */
  export const inboundSchema = GetV2WebhooksWebhookIdFilter2$inboundSchema;
  /** @deprecated use `GetV2WebhooksWebhookIdFilter2$outboundSchema` instead. */
  export const outboundSchema = GetV2WebhooksWebhookIdFilter2$outboundSchema;
  /** @deprecated use `GetV2WebhooksWebhookIdFilter2$Outbound` instead. */
  export type Outbound = GetV2WebhooksWebhookIdFilter2$Outbound;
}

export function getV2WebhooksWebhookIdFilter2ToJSON(
  getV2WebhooksWebhookIdFilter2: GetV2WebhooksWebhookIdFilter2,
): string {
  return JSON.stringify(
    GetV2WebhooksWebhookIdFilter2$outboundSchema.parse(
      getV2WebhooksWebhookIdFilter2,
    ),
  );
}

export function getV2WebhooksWebhookIdFilter2FromJSON(
  jsonString: string,
): SafeParseResult<GetV2WebhooksWebhookIdFilter2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2WebhooksWebhookIdFilter2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2WebhooksWebhookIdFilter2' from JSON`,
  );
}

/** @internal */
export const GetV2WebhooksWebhookIdDollarOrWebhooksOperator$inboundSchema:
  z.ZodNativeEnum<typeof GetV2WebhooksWebhookIdDollarOrWebhooksOperator> = z
    .nativeEnum(GetV2WebhooksWebhookIdDollarOrWebhooksOperator);

/** @internal */
export const GetV2WebhooksWebhookIdDollarOrWebhooksOperator$outboundSchema:
  z.ZodNativeEnum<typeof GetV2WebhooksWebhookIdDollarOrWebhooksOperator> =
    GetV2WebhooksWebhookIdDollarOrWebhooksOperator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2WebhooksWebhookIdDollarOrWebhooksOperator$ {
  /** @deprecated use `GetV2WebhooksWebhookIdDollarOrWebhooksOperator$inboundSchema` instead. */
  export const inboundSchema =
    GetV2WebhooksWebhookIdDollarOrWebhooksOperator$inboundSchema;
  /** @deprecated use `GetV2WebhooksWebhookIdDollarOrWebhooksOperator$outboundSchema` instead. */
  export const outboundSchema =
    GetV2WebhooksWebhookIdDollarOrWebhooksOperator$outboundSchema;
}

/** @internal */
export const GetV2WebhooksWebhookIdDollarOr2$inboundSchema: z.ZodType<
  GetV2WebhooksWebhookIdDollarOr2,
  z.ZodTypeDef,
  unknown
> = z.object({
  field: z.string(),
  operator: GetV2WebhooksWebhookIdDollarOrWebhooksOperator$inboundSchema,
  value: z.string(),
});

/** @internal */
export type GetV2WebhooksWebhookIdDollarOr2$Outbound = {
  field: string;
  operator: string;
  value: string;
};

/** @internal */
export const GetV2WebhooksWebhookIdDollarOr2$outboundSchema: z.ZodType<
  GetV2WebhooksWebhookIdDollarOr2$Outbound,
  z.ZodTypeDef,
  GetV2WebhooksWebhookIdDollarOr2
> = z.object({
  field: z.string(),
  operator: GetV2WebhooksWebhookIdDollarOrWebhooksOperator$outboundSchema,
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2WebhooksWebhookIdDollarOr2$ {
  /** @deprecated use `GetV2WebhooksWebhookIdDollarOr2$inboundSchema` instead. */
  export const inboundSchema = GetV2WebhooksWebhookIdDollarOr2$inboundSchema;
  /** @deprecated use `GetV2WebhooksWebhookIdDollarOr2$outboundSchema` instead. */
  export const outboundSchema = GetV2WebhooksWebhookIdDollarOr2$outboundSchema;
  /** @deprecated use `GetV2WebhooksWebhookIdDollarOr2$Outbound` instead. */
  export type Outbound = GetV2WebhooksWebhookIdDollarOr2$Outbound;
}

export function getV2WebhooksWebhookIdDollarOr2ToJSON(
  getV2WebhooksWebhookIdDollarOr2: GetV2WebhooksWebhookIdDollarOr2,
): string {
  return JSON.stringify(
    GetV2WebhooksWebhookIdDollarOr2$outboundSchema.parse(
      getV2WebhooksWebhookIdDollarOr2,
    ),
  );
}

export function getV2WebhooksWebhookIdDollarOr2FromJSON(
  jsonString: string,
): SafeParseResult<GetV2WebhooksWebhookIdDollarOr2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2WebhooksWebhookIdDollarOr2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2WebhooksWebhookIdDollarOr2' from JSON`,
  );
}

/** @internal */
export const GetV2WebhooksWebhookIdDollarOrOperator$inboundSchema:
  z.ZodNativeEnum<typeof GetV2WebhooksWebhookIdDollarOrOperator> = z.nativeEnum(
    GetV2WebhooksWebhookIdDollarOrOperator,
  );

/** @internal */
export const GetV2WebhooksWebhookIdDollarOrOperator$outboundSchema:
  z.ZodNativeEnum<typeof GetV2WebhooksWebhookIdDollarOrOperator> =
    GetV2WebhooksWebhookIdDollarOrOperator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2WebhooksWebhookIdDollarOrOperator$ {
  /** @deprecated use `GetV2WebhooksWebhookIdDollarOrOperator$inboundSchema` instead. */
  export const inboundSchema =
    GetV2WebhooksWebhookIdDollarOrOperator$inboundSchema;
  /** @deprecated use `GetV2WebhooksWebhookIdDollarOrOperator$outboundSchema` instead. */
  export const outboundSchema =
    GetV2WebhooksWebhookIdDollarOrOperator$outboundSchema;
}

/** @internal */
export const GetV2WebhooksWebhookIdDollarOr1$inboundSchema: z.ZodType<
  GetV2WebhooksWebhookIdDollarOr1,
  z.ZodTypeDef,
  unknown
> = z.object({
  field: z.string(),
  operator: GetV2WebhooksWebhookIdDollarOrOperator$inboundSchema,
  value: z.string(),
});

/** @internal */
export type GetV2WebhooksWebhookIdDollarOr1$Outbound = {
  field: string;
  operator: string;
  value: string;
};

/** @internal */
export const GetV2WebhooksWebhookIdDollarOr1$outboundSchema: z.ZodType<
  GetV2WebhooksWebhookIdDollarOr1$Outbound,
  z.ZodTypeDef,
  GetV2WebhooksWebhookIdDollarOr1
> = z.object({
  field: z.string(),
  operator: GetV2WebhooksWebhookIdDollarOrOperator$outboundSchema,
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2WebhooksWebhookIdDollarOr1$ {
  /** @deprecated use `GetV2WebhooksWebhookIdDollarOr1$inboundSchema` instead. */
  export const inboundSchema = GetV2WebhooksWebhookIdDollarOr1$inboundSchema;
  /** @deprecated use `GetV2WebhooksWebhookIdDollarOr1$outboundSchema` instead. */
  export const outboundSchema = GetV2WebhooksWebhookIdDollarOr1$outboundSchema;
  /** @deprecated use `GetV2WebhooksWebhookIdDollarOr1$Outbound` instead. */
  export type Outbound = GetV2WebhooksWebhookIdDollarOr1$Outbound;
}

export function getV2WebhooksWebhookIdDollarOr1ToJSON(
  getV2WebhooksWebhookIdDollarOr1: GetV2WebhooksWebhookIdDollarOr1,
): string {
  return JSON.stringify(
    GetV2WebhooksWebhookIdDollarOr1$outboundSchema.parse(
      getV2WebhooksWebhookIdDollarOr1,
    ),
  );
}

export function getV2WebhooksWebhookIdDollarOr1FromJSON(
  jsonString: string,
): SafeParseResult<GetV2WebhooksWebhookIdDollarOr1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2WebhooksWebhookIdDollarOr1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2WebhooksWebhookIdDollarOr1' from JSON`,
  );
}

/** @internal */
export const GetV2WebhooksWebhookIdFilterDollarOr$inboundSchema: z.ZodType<
  GetV2WebhooksWebhookIdFilterDollarOr,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetV2WebhooksWebhookIdDollarOr1$inboundSchema),
  z.lazy(() => GetV2WebhooksWebhookIdDollarOr2$inboundSchema),
]);

/** @internal */
export type GetV2WebhooksWebhookIdFilterDollarOr$Outbound =
  | GetV2WebhooksWebhookIdDollarOr1$Outbound
  | GetV2WebhooksWebhookIdDollarOr2$Outbound;

/** @internal */
export const GetV2WebhooksWebhookIdFilterDollarOr$outboundSchema: z.ZodType<
  GetV2WebhooksWebhookIdFilterDollarOr$Outbound,
  z.ZodTypeDef,
  GetV2WebhooksWebhookIdFilterDollarOr
> = z.union([
  z.lazy(() => GetV2WebhooksWebhookIdDollarOr1$outboundSchema),
  z.lazy(() => GetV2WebhooksWebhookIdDollarOr2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2WebhooksWebhookIdFilterDollarOr$ {
  /** @deprecated use `GetV2WebhooksWebhookIdFilterDollarOr$inboundSchema` instead. */
  export const inboundSchema =
    GetV2WebhooksWebhookIdFilterDollarOr$inboundSchema;
  /** @deprecated use `GetV2WebhooksWebhookIdFilterDollarOr$outboundSchema` instead. */
  export const outboundSchema =
    GetV2WebhooksWebhookIdFilterDollarOr$outboundSchema;
  /** @deprecated use `GetV2WebhooksWebhookIdFilterDollarOr$Outbound` instead. */
  export type Outbound = GetV2WebhooksWebhookIdFilterDollarOr$Outbound;
}

export function getV2WebhooksWebhookIdFilterDollarOrToJSON(
  getV2WebhooksWebhookIdFilterDollarOr: GetV2WebhooksWebhookIdFilterDollarOr,
): string {
  return JSON.stringify(
    GetV2WebhooksWebhookIdFilterDollarOr$outboundSchema.parse(
      getV2WebhooksWebhookIdFilterDollarOr,
    ),
  );
}

export function getV2WebhooksWebhookIdFilterDollarOrFromJSON(
  jsonString: string,
): SafeParseResult<GetV2WebhooksWebhookIdFilterDollarOr, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2WebhooksWebhookIdFilterDollarOr$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2WebhooksWebhookIdFilterDollarOr' from JSON`,
  );
}

/** @internal */
export const GetV2WebhooksWebhookIdFilter1$inboundSchema: z.ZodType<
  GetV2WebhooksWebhookIdFilter1,
  z.ZodTypeDef,
  unknown
> = z.object({
  $or: z.array(
    z.union([
      z.lazy(() => GetV2WebhooksWebhookIdDollarOr1$inboundSchema),
      z.lazy(() => GetV2WebhooksWebhookIdDollarOr2$inboundSchema),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    "$or": "dollarOr",
  });
});

/** @internal */
export type GetV2WebhooksWebhookIdFilter1$Outbound = {
  $or: Array<
    | GetV2WebhooksWebhookIdDollarOr1$Outbound
    | GetV2WebhooksWebhookIdDollarOr2$Outbound
  >;
};

/** @internal */
export const GetV2WebhooksWebhookIdFilter1$outboundSchema: z.ZodType<
  GetV2WebhooksWebhookIdFilter1$Outbound,
  z.ZodTypeDef,
  GetV2WebhooksWebhookIdFilter1
> = z.object({
  dollarOr: z.array(
    z.union([
      z.lazy(() => GetV2WebhooksWebhookIdDollarOr1$outboundSchema),
      z.lazy(() => GetV2WebhooksWebhookIdDollarOr2$outboundSchema),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    dollarOr: "$or",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2WebhooksWebhookIdFilter1$ {
  /** @deprecated use `GetV2WebhooksWebhookIdFilter1$inboundSchema` instead. */
  export const inboundSchema = GetV2WebhooksWebhookIdFilter1$inboundSchema;
  /** @deprecated use `GetV2WebhooksWebhookIdFilter1$outboundSchema` instead. */
  export const outboundSchema = GetV2WebhooksWebhookIdFilter1$outboundSchema;
  /** @deprecated use `GetV2WebhooksWebhookIdFilter1$Outbound` instead. */
  export type Outbound = GetV2WebhooksWebhookIdFilter1$Outbound;
}

export function getV2WebhooksWebhookIdFilter1ToJSON(
  getV2WebhooksWebhookIdFilter1: GetV2WebhooksWebhookIdFilter1,
): string {
  return JSON.stringify(
    GetV2WebhooksWebhookIdFilter1$outboundSchema.parse(
      getV2WebhooksWebhookIdFilter1,
    ),
  );
}

export function getV2WebhooksWebhookIdFilter1FromJSON(
  jsonString: string,
): SafeParseResult<GetV2WebhooksWebhookIdFilter1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2WebhooksWebhookIdFilter1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2WebhooksWebhookIdFilter1' from JSON`,
  );
}

/** @internal */
export const GetV2WebhooksWebhookIdFilter$inboundSchema: z.ZodType<
  GetV2WebhooksWebhookIdFilter,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetV2WebhooksWebhookIdFilter1$inboundSchema),
  z.lazy(() => GetV2WebhooksWebhookIdFilter2$inboundSchema),
]);

/** @internal */
export type GetV2WebhooksWebhookIdFilter$Outbound =
  | GetV2WebhooksWebhookIdFilter1$Outbound
  | GetV2WebhooksWebhookIdFilter2$Outbound;

/** @internal */
export const GetV2WebhooksWebhookIdFilter$outboundSchema: z.ZodType<
  GetV2WebhooksWebhookIdFilter$Outbound,
  z.ZodTypeDef,
  GetV2WebhooksWebhookIdFilter
> = z.union([
  z.lazy(() => GetV2WebhooksWebhookIdFilter1$outboundSchema),
  z.lazy(() => GetV2WebhooksWebhookIdFilter2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2WebhooksWebhookIdFilter$ {
  /** @deprecated use `GetV2WebhooksWebhookIdFilter$inboundSchema` instead. */
  export const inboundSchema = GetV2WebhooksWebhookIdFilter$inboundSchema;
  /** @deprecated use `GetV2WebhooksWebhookIdFilter$outboundSchema` instead. */
  export const outboundSchema = GetV2WebhooksWebhookIdFilter$outboundSchema;
  /** @deprecated use `GetV2WebhooksWebhookIdFilter$Outbound` instead. */
  export type Outbound = GetV2WebhooksWebhookIdFilter$Outbound;
}

export function getV2WebhooksWebhookIdFilterToJSON(
  getV2WebhooksWebhookIdFilter: GetV2WebhooksWebhookIdFilter,
): string {
  return JSON.stringify(
    GetV2WebhooksWebhookIdFilter$outboundSchema.parse(
      getV2WebhooksWebhookIdFilter,
    ),
  );
}

export function getV2WebhooksWebhookIdFilterFromJSON(
  jsonString: string,
): SafeParseResult<GetV2WebhooksWebhookIdFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2WebhooksWebhookIdFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2WebhooksWebhookIdFilter' from JSON`,
  );
}

/** @internal */
export const GetV2WebhooksWebhookIdSubscriptions$inboundSchema: z.ZodType<
  GetV2WebhooksWebhookIdSubscriptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  event_type: GetV2WebhooksWebhookIdEventType$inboundSchema,
  filter: z.nullable(
    z.union([
      z.lazy(() => GetV2WebhooksWebhookIdFilter1$inboundSchema),
      z.lazy(() => GetV2WebhooksWebhookIdFilter2$inboundSchema),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    "event_type": "eventType",
  });
});

/** @internal */
export type GetV2WebhooksWebhookIdSubscriptions$Outbound = {
  event_type: string;
  filter:
    | GetV2WebhooksWebhookIdFilter1$Outbound
    | GetV2WebhooksWebhookIdFilter2$Outbound
    | null;
};

/** @internal */
export const GetV2WebhooksWebhookIdSubscriptions$outboundSchema: z.ZodType<
  GetV2WebhooksWebhookIdSubscriptions$Outbound,
  z.ZodTypeDef,
  GetV2WebhooksWebhookIdSubscriptions
> = z.object({
  eventType: GetV2WebhooksWebhookIdEventType$outboundSchema,
  filter: z.nullable(
    z.union([
      z.lazy(() => GetV2WebhooksWebhookIdFilter1$outboundSchema),
      z.lazy(() => GetV2WebhooksWebhookIdFilter2$outboundSchema),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    eventType: "event_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2WebhooksWebhookIdSubscriptions$ {
  /** @deprecated use `GetV2WebhooksWebhookIdSubscriptions$inboundSchema` instead. */
  export const inboundSchema =
    GetV2WebhooksWebhookIdSubscriptions$inboundSchema;
  /** @deprecated use `GetV2WebhooksWebhookIdSubscriptions$outboundSchema` instead. */
  export const outboundSchema =
    GetV2WebhooksWebhookIdSubscriptions$outboundSchema;
  /** @deprecated use `GetV2WebhooksWebhookIdSubscriptions$Outbound` instead. */
  export type Outbound = GetV2WebhooksWebhookIdSubscriptions$Outbound;
}

export function getV2WebhooksWebhookIdSubscriptionsToJSON(
  getV2WebhooksWebhookIdSubscriptions: GetV2WebhooksWebhookIdSubscriptions,
): string {
  return JSON.stringify(
    GetV2WebhooksWebhookIdSubscriptions$outboundSchema.parse(
      getV2WebhooksWebhookIdSubscriptions,
    ),
  );
}

export function getV2WebhooksWebhookIdSubscriptionsFromJSON(
  jsonString: string,
): SafeParseResult<GetV2WebhooksWebhookIdSubscriptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2WebhooksWebhookIdSubscriptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2WebhooksWebhookIdSubscriptions' from JSON`,
  );
}

/** @internal */
export const GetV2WebhooksWebhookIdId$inboundSchema: z.ZodType<
  GetV2WebhooksWebhookIdId,
  z.ZodTypeDef,
  unknown
> = z.object({
  workspace_id: z.string(),
  webhook_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "workspace_id": "workspaceId",
    "webhook_id": "webhookId",
  });
});

/** @internal */
export type GetV2WebhooksWebhookIdId$Outbound = {
  workspace_id: string;
  webhook_id: string;
};

/** @internal */
export const GetV2WebhooksWebhookIdId$outboundSchema: z.ZodType<
  GetV2WebhooksWebhookIdId$Outbound,
  z.ZodTypeDef,
  GetV2WebhooksWebhookIdId
> = z.object({
  workspaceId: z.string(),
  webhookId: z.string(),
}).transform((v) => {
  return remap$(v, {
    workspaceId: "workspace_id",
    webhookId: "webhook_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2WebhooksWebhookIdId$ {
  /** @deprecated use `GetV2WebhooksWebhookIdId$inboundSchema` instead. */
  export const inboundSchema = GetV2WebhooksWebhookIdId$inboundSchema;
  /** @deprecated use `GetV2WebhooksWebhookIdId$outboundSchema` instead. */
  export const outboundSchema = GetV2WebhooksWebhookIdId$outboundSchema;
  /** @deprecated use `GetV2WebhooksWebhookIdId$Outbound` instead. */
  export type Outbound = GetV2WebhooksWebhookIdId$Outbound;
}

export function getV2WebhooksWebhookIdIdToJSON(
  getV2WebhooksWebhookIdId: GetV2WebhooksWebhookIdId,
): string {
  return JSON.stringify(
    GetV2WebhooksWebhookIdId$outboundSchema.parse(getV2WebhooksWebhookIdId),
  );
}

export function getV2WebhooksWebhookIdIdFromJSON(
  jsonString: string,
): SafeParseResult<GetV2WebhooksWebhookIdId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2WebhooksWebhookIdId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2WebhooksWebhookIdId' from JSON`,
  );
}

/** @internal */
export const GetV2WebhooksWebhookIdStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetV2WebhooksWebhookIdStatus
> = z.nativeEnum(GetV2WebhooksWebhookIdStatus);

/** @internal */
export const GetV2WebhooksWebhookIdStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetV2WebhooksWebhookIdStatus
> = GetV2WebhooksWebhookIdStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2WebhooksWebhookIdStatus$ {
  /** @deprecated use `GetV2WebhooksWebhookIdStatus$inboundSchema` instead. */
  export const inboundSchema = GetV2WebhooksWebhookIdStatus$inboundSchema;
  /** @deprecated use `GetV2WebhooksWebhookIdStatus$outboundSchema` instead. */
  export const outboundSchema = GetV2WebhooksWebhookIdStatus$outboundSchema;
}

/** @internal */
export const GetV2WebhooksWebhookIdData$inboundSchema: z.ZodType<
  GetV2WebhooksWebhookIdData,
  z.ZodTypeDef,
  unknown
> = z.object({
  target_url: z.string(),
  subscriptions: z.array(
    z.lazy(() => GetV2WebhooksWebhookIdSubscriptions$inboundSchema),
  ),
  id: z.lazy(() => GetV2WebhooksWebhookIdId$inboundSchema),
  status: GetV2WebhooksWebhookIdStatus$inboundSchema,
  created_at: z.string(),
}).transform((v) => {
  return remap$(v, {
    "target_url": "targetUrl",
    "created_at": "createdAt",
  });
});

/** @internal */
export type GetV2WebhooksWebhookIdData$Outbound = {
  target_url: string;
  subscriptions: Array<GetV2WebhooksWebhookIdSubscriptions$Outbound>;
  id: GetV2WebhooksWebhookIdId$Outbound;
  status: string;
  created_at: string;
};

/** @internal */
export const GetV2WebhooksWebhookIdData$outboundSchema: z.ZodType<
  GetV2WebhooksWebhookIdData$Outbound,
  z.ZodTypeDef,
  GetV2WebhooksWebhookIdData
> = z.object({
  targetUrl: z.string(),
  subscriptions: z.array(
    z.lazy(() => GetV2WebhooksWebhookIdSubscriptions$outboundSchema),
  ),
  id: z.lazy(() => GetV2WebhooksWebhookIdId$outboundSchema),
  status: GetV2WebhooksWebhookIdStatus$outboundSchema,
  createdAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    targetUrl: "target_url",
    createdAt: "created_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2WebhooksWebhookIdData$ {
  /** @deprecated use `GetV2WebhooksWebhookIdData$inboundSchema` instead. */
  export const inboundSchema = GetV2WebhooksWebhookIdData$inboundSchema;
  /** @deprecated use `GetV2WebhooksWebhookIdData$outboundSchema` instead. */
  export const outboundSchema = GetV2WebhooksWebhookIdData$outboundSchema;
  /** @deprecated use `GetV2WebhooksWebhookIdData$Outbound` instead. */
  export type Outbound = GetV2WebhooksWebhookIdData$Outbound;
}

export function getV2WebhooksWebhookIdDataToJSON(
  getV2WebhooksWebhookIdData: GetV2WebhooksWebhookIdData,
): string {
  return JSON.stringify(
    GetV2WebhooksWebhookIdData$outboundSchema.parse(getV2WebhooksWebhookIdData),
  );
}

export function getV2WebhooksWebhookIdDataFromJSON(
  jsonString: string,
): SafeParseResult<GetV2WebhooksWebhookIdData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2WebhooksWebhookIdData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2WebhooksWebhookIdData' from JSON`,
  );
}

/** @internal */
export const GetV2WebhooksWebhookIdResponseBody$inboundSchema: z.ZodType<
  GetV2WebhooksWebhookIdResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => GetV2WebhooksWebhookIdData$inboundSchema),
});

/** @internal */
export type GetV2WebhooksWebhookIdResponseBody$Outbound = {
  data: GetV2WebhooksWebhookIdData$Outbound;
};

/** @internal */
export const GetV2WebhooksWebhookIdResponseBody$outboundSchema: z.ZodType<
  GetV2WebhooksWebhookIdResponseBody$Outbound,
  z.ZodTypeDef,
  GetV2WebhooksWebhookIdResponseBody
> = z.object({
  data: z.lazy(() => GetV2WebhooksWebhookIdData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2WebhooksWebhookIdResponseBody$ {
  /** @deprecated use `GetV2WebhooksWebhookIdResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetV2WebhooksWebhookIdResponseBody$inboundSchema;
  /** @deprecated use `GetV2WebhooksWebhookIdResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetV2WebhooksWebhookIdResponseBody$outboundSchema;
  /** @deprecated use `GetV2WebhooksWebhookIdResponseBody$Outbound` instead. */
  export type Outbound = GetV2WebhooksWebhookIdResponseBody$Outbound;
}

export function getV2WebhooksWebhookIdResponseBodyToJSON(
  getV2WebhooksWebhookIdResponseBody: GetV2WebhooksWebhookIdResponseBody,
): string {
  return JSON.stringify(
    GetV2WebhooksWebhookIdResponseBody$outboundSchema.parse(
      getV2WebhooksWebhookIdResponseBody,
    ),
  );
}

export function getV2WebhooksWebhookIdResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetV2WebhooksWebhookIdResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2WebhooksWebhookIdResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2WebhooksWebhookIdResponseBody' from JSON`,
  );
}
