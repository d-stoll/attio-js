/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Type of event the webhook is subscribed to.
 */
export const EventType = {
  CommentCreated: "comment.created",
  CommentResolved: "comment.resolved",
  CommentUnresolved: "comment.unresolved",
  CommentDeleted: "comment.deleted",
  ListCreated: "list.created",
  ListUpdated: "list.updated",
  ListDeleted: "list.deleted",
  ListAttributeCreated: "list-attribute.created",
  ListAttributeUpdated: "list-attribute.updated",
  ListEntryCreated: "list-entry.created",
  ListEntryUpdated: "list-entry.updated",
  ListEntryDeleted: "list-entry.deleted",
  ObjectAttributeCreated: "object-attribute.created",
  ObjectAttributeUpdated: "object-attribute.updated",
  NoteCreated: "note.created",
  NoteUpdated: "note.updated",
  NoteDeleted: "note.deleted",
  RecordCreated: "record.created",
  RecordMerged: "record.merged",
  RecordUpdated: "record.updated",
  RecordDeleted: "record.deleted",
  TaskCreated: "task.created",
  TaskUpdated: "task.updated",
  TaskDeleted: "task.deleted",
  WorkspaceMemberCreated: "workspace-member.created",
} as const;
/**
 * Type of event the webhook is subscribed to.
 */
export type EventType = ClosedEnum<typeof EventType>;

export const PostV2WebhooksDollarAndOperator = {
  NotEquals: "not_equals",
} as const;
export type PostV2WebhooksDollarAndOperator = ClosedEnum<
  typeof PostV2WebhooksDollarAndOperator
>;

export type DollarAnd2 = {
  field: string;
  operator: PostV2WebhooksDollarAndOperator;
  value: string;
};

export const DollarAndOperator = {
  Equals: "equals",
} as const;
export type DollarAndOperator = ClosedEnum<typeof DollarAndOperator>;

export type DollarAnd1 = {
  field: string;
  operator: DollarAndOperator;
  value: string;
};

export type DollarAnd = DollarAnd1 | DollarAnd2;

export type Filter2 = {
  dollarAnd: Array<DollarAnd1 | DollarAnd2>;
};

export const DollarOrOperator = {
  NotEquals: "not_equals",
} as const;
export type DollarOrOperator = ClosedEnum<typeof DollarOrOperator>;

export type DollarOr2 = {
  field: string;
  operator: DollarOrOperator;
  value: string;
};

export const Operator = {
  Equals: "equals",
} as const;
export type Operator = ClosedEnum<typeof Operator>;

export type DollarOr1 = {
  field: string;
  operator: Operator;
  value: string;
};

export type DollarOr = DollarOr1 | DollarOr2;

export type Filter1 = {
  dollarOr: Array<DollarOr1 | DollarOr2>;
};

/**
 * Filters to determine whether the webhook event should be sent. If null, the filter always passes.
 */
export type Filter = Filter1 | Filter2;

export type Subscriptions = {
  /**
   * Type of event the webhook is subscribed to.
   */
  eventType: EventType;
  /**
   * Filters to determine whether the webhook event should be sent. If null, the filter always passes.
   */
  filter: Filter1 | Filter2 | null;
};

export type PostV2WebhooksData = {
  /**
   * URL where the webhook events will be delivered to.
   */
  targetUrl: string;
  /**
   * One or more events the webhook is subscribed to.
   */
  subscriptions: Array<Subscriptions>;
};

export type PostV2WebhooksRequestBody = {
  data: PostV2WebhooksData;
};

/**
 * Type of event the webhook is subscribed to.
 */
export const PostV2WebhooksEventType = {
  CommentCreated: "comment.created",
  CommentResolved: "comment.resolved",
  CommentUnresolved: "comment.unresolved",
  CommentDeleted: "comment.deleted",
  ListCreated: "list.created",
  ListUpdated: "list.updated",
  ListDeleted: "list.deleted",
  ListAttributeCreated: "list-attribute.created",
  ListAttributeUpdated: "list-attribute.updated",
  ListEntryCreated: "list-entry.created",
  ListEntryUpdated: "list-entry.updated",
  ListEntryDeleted: "list-entry.deleted",
  ObjectAttributeCreated: "object-attribute.created",
  ObjectAttributeUpdated: "object-attribute.updated",
  NoteCreated: "note.created",
  NoteUpdated: "note.updated",
  NoteDeleted: "note.deleted",
  RecordCreated: "record.created",
  RecordMerged: "record.merged",
  RecordUpdated: "record.updated",
  RecordDeleted: "record.deleted",
  TaskCreated: "task.created",
  TaskUpdated: "task.updated",
  TaskDeleted: "task.deleted",
  WorkspaceMemberCreated: "workspace-member.created",
} as const;
/**
 * Type of event the webhook is subscribed to.
 */
export type PostV2WebhooksEventType = ClosedEnum<
  typeof PostV2WebhooksEventType
>;

export const PostV2WebhooksDollarAndWebhooksResponseOperator = {
  NotEquals: "not_equals",
} as const;
export type PostV2WebhooksDollarAndWebhooksResponseOperator = ClosedEnum<
  typeof PostV2WebhooksDollarAndWebhooksResponseOperator
>;

export type PostV2WebhooksDollarAnd2 = {
  field: string;
  operator: PostV2WebhooksDollarAndWebhooksResponseOperator;
  value: string;
};

export const PostV2WebhooksDollarAndWebhooksOperator = {
  Equals: "equals",
} as const;
export type PostV2WebhooksDollarAndWebhooksOperator = ClosedEnum<
  typeof PostV2WebhooksDollarAndWebhooksOperator
>;

export type PostV2WebhooksDollarAnd1 = {
  field: string;
  operator: PostV2WebhooksDollarAndWebhooksOperator;
  value: string;
};

export type PostV2WebhooksFilterDollarAnd =
  | PostV2WebhooksDollarAnd1
  | PostV2WebhooksDollarAnd2;

export type PostV2WebhooksFilter2 = {
  dollarAnd: Array<PostV2WebhooksDollarAnd1 | PostV2WebhooksDollarAnd2>;
};

export const PostV2WebhooksDollarOrWebhooksOperator = {
  NotEquals: "not_equals",
} as const;
export type PostV2WebhooksDollarOrWebhooksOperator = ClosedEnum<
  typeof PostV2WebhooksDollarOrWebhooksOperator
>;

export type PostV2WebhooksDollarOr2 = {
  field: string;
  operator: PostV2WebhooksDollarOrWebhooksOperator;
  value: string;
};

export const PostV2WebhooksDollarOrOperator = {
  Equals: "equals",
} as const;
export type PostV2WebhooksDollarOrOperator = ClosedEnum<
  typeof PostV2WebhooksDollarOrOperator
>;

export type PostV2WebhooksDollarOr1 = {
  field: string;
  operator: PostV2WebhooksDollarOrOperator;
  value: string;
};

export type PostV2WebhooksFilterDollarOr =
  | PostV2WebhooksDollarOr1
  | PostV2WebhooksDollarOr2;

export type PostV2WebhooksFilter1 = {
  dollarOr: Array<PostV2WebhooksDollarOr1 | PostV2WebhooksDollarOr2>;
};

/**
 * Filters to determine whether the webhook event should be sent. If null, the filter always passes.
 */
export type PostV2WebhooksFilter =
  | PostV2WebhooksFilter1
  | PostV2WebhooksFilter2;

export type PostV2WebhooksSubscriptions = {
  /**
   * Type of event the webhook is subscribed to.
   */
  eventType: PostV2WebhooksEventType;
  /**
   * Filters to determine whether the webhook event should be sent. If null, the filter always passes.
   */
  filter: PostV2WebhooksFilter1 | PostV2WebhooksFilter2 | null;
};

export type PostV2WebhooksId = {
  /**
   * The ID of the workspace the webhook belongs to.
   */
  workspaceId: string;
  /**
   * The ID of the webhook.
   */
  webhookId: string;
};

/**
 * The state of the webhook. Webhooks marked as active and degraded will receive events, inactive ones will not. If a webhook remains in the degraded state for 7 days, it will be marked inactive.
 */
export const PostV2WebhooksStatus = {
  Active: "active",
  Degraded: "degraded",
  Inactive: "inactive",
} as const;
/**
 * The state of the webhook. Webhooks marked as active and degraded will receive events, inactive ones will not. If a webhook remains in the degraded state for 7 days, it will be marked inactive.
 */
export type PostV2WebhooksStatus = ClosedEnum<typeof PostV2WebhooksStatus>;

export type PostV2WebhooksWebhooksData = {
  /**
   * URL where the webhook events will be delivered to.
   */
  targetUrl: string;
  /**
   * One or more events the webhook is subscribed to.
   */
  subscriptions: Array<PostV2WebhooksSubscriptions>;
  id: PostV2WebhooksId;
  /**
   * The state of the webhook. Webhooks marked as active and degraded will receive events, inactive ones will not. If a webhook remains in the degraded state for 7 days, it will be marked inactive.
   */
  status: PostV2WebhooksStatus;
  /**
   * When the webhook was created.
   */
  createdAt: string;
  /**
   * The key which is used to sign the webhook events. This is only shown when setting up the webhook initially.
   */
  secret: string;
};

/**
 * Success
 */
export type PostV2WebhooksResponseBody = {
  data: PostV2WebhooksWebhooksData;
};

/** @internal */
export const EventType$inboundSchema: z.ZodNativeEnum<typeof EventType> = z
  .nativeEnum(EventType);

/** @internal */
export const EventType$outboundSchema: z.ZodNativeEnum<typeof EventType> =
  EventType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventType$ {
  /** @deprecated use `EventType$inboundSchema` instead. */
  export const inboundSchema = EventType$inboundSchema;
  /** @deprecated use `EventType$outboundSchema` instead. */
  export const outboundSchema = EventType$outboundSchema;
}

/** @internal */
export const PostV2WebhooksDollarAndOperator$inboundSchema: z.ZodNativeEnum<
  typeof PostV2WebhooksDollarAndOperator
> = z.nativeEnum(PostV2WebhooksDollarAndOperator);

/** @internal */
export const PostV2WebhooksDollarAndOperator$outboundSchema: z.ZodNativeEnum<
  typeof PostV2WebhooksDollarAndOperator
> = PostV2WebhooksDollarAndOperator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2WebhooksDollarAndOperator$ {
  /** @deprecated use `PostV2WebhooksDollarAndOperator$inboundSchema` instead. */
  export const inboundSchema = PostV2WebhooksDollarAndOperator$inboundSchema;
  /** @deprecated use `PostV2WebhooksDollarAndOperator$outboundSchema` instead. */
  export const outboundSchema = PostV2WebhooksDollarAndOperator$outboundSchema;
}

/** @internal */
export const DollarAnd2$inboundSchema: z.ZodType<
  DollarAnd2,
  z.ZodTypeDef,
  unknown
> = z.object({
  field: z.string(),
  operator: PostV2WebhooksDollarAndOperator$inboundSchema,
  value: z.string(),
});

/** @internal */
export type DollarAnd2$Outbound = {
  field: string;
  operator: string;
  value: string;
};

/** @internal */
export const DollarAnd2$outboundSchema: z.ZodType<
  DollarAnd2$Outbound,
  z.ZodTypeDef,
  DollarAnd2
> = z.object({
  field: z.string(),
  operator: PostV2WebhooksDollarAndOperator$outboundSchema,
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DollarAnd2$ {
  /** @deprecated use `DollarAnd2$inboundSchema` instead. */
  export const inboundSchema = DollarAnd2$inboundSchema;
  /** @deprecated use `DollarAnd2$outboundSchema` instead. */
  export const outboundSchema = DollarAnd2$outboundSchema;
  /** @deprecated use `DollarAnd2$Outbound` instead. */
  export type Outbound = DollarAnd2$Outbound;
}

export function dollarAnd2ToJSON(dollarAnd2: DollarAnd2): string {
  return JSON.stringify(DollarAnd2$outboundSchema.parse(dollarAnd2));
}

export function dollarAnd2FromJSON(
  jsonString: string,
): SafeParseResult<DollarAnd2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DollarAnd2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DollarAnd2' from JSON`,
  );
}

/** @internal */
export const DollarAndOperator$inboundSchema: z.ZodNativeEnum<
  typeof DollarAndOperator
> = z.nativeEnum(DollarAndOperator);

/** @internal */
export const DollarAndOperator$outboundSchema: z.ZodNativeEnum<
  typeof DollarAndOperator
> = DollarAndOperator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DollarAndOperator$ {
  /** @deprecated use `DollarAndOperator$inboundSchema` instead. */
  export const inboundSchema = DollarAndOperator$inboundSchema;
  /** @deprecated use `DollarAndOperator$outboundSchema` instead. */
  export const outboundSchema = DollarAndOperator$outboundSchema;
}

/** @internal */
export const DollarAnd1$inboundSchema: z.ZodType<
  DollarAnd1,
  z.ZodTypeDef,
  unknown
> = z.object({
  field: z.string(),
  operator: DollarAndOperator$inboundSchema,
  value: z.string(),
});

/** @internal */
export type DollarAnd1$Outbound = {
  field: string;
  operator: string;
  value: string;
};

/** @internal */
export const DollarAnd1$outboundSchema: z.ZodType<
  DollarAnd1$Outbound,
  z.ZodTypeDef,
  DollarAnd1
> = z.object({
  field: z.string(),
  operator: DollarAndOperator$outboundSchema,
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DollarAnd1$ {
  /** @deprecated use `DollarAnd1$inboundSchema` instead. */
  export const inboundSchema = DollarAnd1$inboundSchema;
  /** @deprecated use `DollarAnd1$outboundSchema` instead. */
  export const outboundSchema = DollarAnd1$outboundSchema;
  /** @deprecated use `DollarAnd1$Outbound` instead. */
  export type Outbound = DollarAnd1$Outbound;
}

export function dollarAnd1ToJSON(dollarAnd1: DollarAnd1): string {
  return JSON.stringify(DollarAnd1$outboundSchema.parse(dollarAnd1));
}

export function dollarAnd1FromJSON(
  jsonString: string,
): SafeParseResult<DollarAnd1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DollarAnd1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DollarAnd1' from JSON`,
  );
}

/** @internal */
export const DollarAnd$inboundSchema: z.ZodType<
  DollarAnd,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => DollarAnd1$inboundSchema),
  z.lazy(() => DollarAnd2$inboundSchema),
]);

/** @internal */
export type DollarAnd$Outbound = DollarAnd1$Outbound | DollarAnd2$Outbound;

/** @internal */
export const DollarAnd$outboundSchema: z.ZodType<
  DollarAnd$Outbound,
  z.ZodTypeDef,
  DollarAnd
> = z.union([
  z.lazy(() => DollarAnd1$outboundSchema),
  z.lazy(() => DollarAnd2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DollarAnd$ {
  /** @deprecated use `DollarAnd$inboundSchema` instead. */
  export const inboundSchema = DollarAnd$inboundSchema;
  /** @deprecated use `DollarAnd$outboundSchema` instead. */
  export const outboundSchema = DollarAnd$outboundSchema;
  /** @deprecated use `DollarAnd$Outbound` instead. */
  export type Outbound = DollarAnd$Outbound;
}

export function dollarAndToJSON(dollarAnd: DollarAnd): string {
  return JSON.stringify(DollarAnd$outboundSchema.parse(dollarAnd));
}

export function dollarAndFromJSON(
  jsonString: string,
): SafeParseResult<DollarAnd, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DollarAnd$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DollarAnd' from JSON`,
  );
}

/** @internal */
export const Filter2$inboundSchema: z.ZodType<Filter2, z.ZodTypeDef, unknown> =
  z.object({
    $and: z.array(
      z.union([
        z.lazy(() => DollarAnd1$inboundSchema),
        z.lazy(() => DollarAnd2$inboundSchema),
      ]),
    ),
  }).transform((v) => {
    return remap$(v, {
      "$and": "dollarAnd",
    });
  });

/** @internal */
export type Filter2$Outbound = {
  $and: Array<DollarAnd1$Outbound | DollarAnd2$Outbound>;
};

/** @internal */
export const Filter2$outboundSchema: z.ZodType<
  Filter2$Outbound,
  z.ZodTypeDef,
  Filter2
> = z.object({
  dollarAnd: z.array(
    z.union([
      z.lazy(() => DollarAnd1$outboundSchema),
      z.lazy(() => DollarAnd2$outboundSchema),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    dollarAnd: "$and",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Filter2$ {
  /** @deprecated use `Filter2$inboundSchema` instead. */
  export const inboundSchema = Filter2$inboundSchema;
  /** @deprecated use `Filter2$outboundSchema` instead. */
  export const outboundSchema = Filter2$outboundSchema;
  /** @deprecated use `Filter2$Outbound` instead. */
  export type Outbound = Filter2$Outbound;
}

export function filter2ToJSON(filter2: Filter2): string {
  return JSON.stringify(Filter2$outboundSchema.parse(filter2));
}

export function filter2FromJSON(
  jsonString: string,
): SafeParseResult<Filter2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Filter2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Filter2' from JSON`,
  );
}

/** @internal */
export const DollarOrOperator$inboundSchema: z.ZodNativeEnum<
  typeof DollarOrOperator
> = z.nativeEnum(DollarOrOperator);

/** @internal */
export const DollarOrOperator$outboundSchema: z.ZodNativeEnum<
  typeof DollarOrOperator
> = DollarOrOperator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DollarOrOperator$ {
  /** @deprecated use `DollarOrOperator$inboundSchema` instead. */
  export const inboundSchema = DollarOrOperator$inboundSchema;
  /** @deprecated use `DollarOrOperator$outboundSchema` instead. */
  export const outboundSchema = DollarOrOperator$outboundSchema;
}

/** @internal */
export const DollarOr2$inboundSchema: z.ZodType<
  DollarOr2,
  z.ZodTypeDef,
  unknown
> = z.object({
  field: z.string(),
  operator: DollarOrOperator$inboundSchema,
  value: z.string(),
});

/** @internal */
export type DollarOr2$Outbound = {
  field: string;
  operator: string;
  value: string;
};

/** @internal */
export const DollarOr2$outboundSchema: z.ZodType<
  DollarOr2$Outbound,
  z.ZodTypeDef,
  DollarOr2
> = z.object({
  field: z.string(),
  operator: DollarOrOperator$outboundSchema,
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DollarOr2$ {
  /** @deprecated use `DollarOr2$inboundSchema` instead. */
  export const inboundSchema = DollarOr2$inboundSchema;
  /** @deprecated use `DollarOr2$outboundSchema` instead. */
  export const outboundSchema = DollarOr2$outboundSchema;
  /** @deprecated use `DollarOr2$Outbound` instead. */
  export type Outbound = DollarOr2$Outbound;
}

export function dollarOr2ToJSON(dollarOr2: DollarOr2): string {
  return JSON.stringify(DollarOr2$outboundSchema.parse(dollarOr2));
}

export function dollarOr2FromJSON(
  jsonString: string,
): SafeParseResult<DollarOr2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DollarOr2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DollarOr2' from JSON`,
  );
}

/** @internal */
export const Operator$inboundSchema: z.ZodNativeEnum<typeof Operator> = z
  .nativeEnum(Operator);

/** @internal */
export const Operator$outboundSchema: z.ZodNativeEnum<typeof Operator> =
  Operator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Operator$ {
  /** @deprecated use `Operator$inboundSchema` instead. */
  export const inboundSchema = Operator$inboundSchema;
  /** @deprecated use `Operator$outboundSchema` instead. */
  export const outboundSchema = Operator$outboundSchema;
}

/** @internal */
export const DollarOr1$inboundSchema: z.ZodType<
  DollarOr1,
  z.ZodTypeDef,
  unknown
> = z.object({
  field: z.string(),
  operator: Operator$inboundSchema,
  value: z.string(),
});

/** @internal */
export type DollarOr1$Outbound = {
  field: string;
  operator: string;
  value: string;
};

/** @internal */
export const DollarOr1$outboundSchema: z.ZodType<
  DollarOr1$Outbound,
  z.ZodTypeDef,
  DollarOr1
> = z.object({
  field: z.string(),
  operator: Operator$outboundSchema,
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DollarOr1$ {
  /** @deprecated use `DollarOr1$inboundSchema` instead. */
  export const inboundSchema = DollarOr1$inboundSchema;
  /** @deprecated use `DollarOr1$outboundSchema` instead. */
  export const outboundSchema = DollarOr1$outboundSchema;
  /** @deprecated use `DollarOr1$Outbound` instead. */
  export type Outbound = DollarOr1$Outbound;
}

export function dollarOr1ToJSON(dollarOr1: DollarOr1): string {
  return JSON.stringify(DollarOr1$outboundSchema.parse(dollarOr1));
}

export function dollarOr1FromJSON(
  jsonString: string,
): SafeParseResult<DollarOr1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DollarOr1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DollarOr1' from JSON`,
  );
}

/** @internal */
export const DollarOr$inboundSchema: z.ZodType<
  DollarOr,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => DollarOr1$inboundSchema),
  z.lazy(() => DollarOr2$inboundSchema),
]);

/** @internal */
export type DollarOr$Outbound = DollarOr1$Outbound | DollarOr2$Outbound;

/** @internal */
export const DollarOr$outboundSchema: z.ZodType<
  DollarOr$Outbound,
  z.ZodTypeDef,
  DollarOr
> = z.union([
  z.lazy(() => DollarOr1$outboundSchema),
  z.lazy(() => DollarOr2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DollarOr$ {
  /** @deprecated use `DollarOr$inboundSchema` instead. */
  export const inboundSchema = DollarOr$inboundSchema;
  /** @deprecated use `DollarOr$outboundSchema` instead. */
  export const outboundSchema = DollarOr$outboundSchema;
  /** @deprecated use `DollarOr$Outbound` instead. */
  export type Outbound = DollarOr$Outbound;
}

export function dollarOrToJSON(dollarOr: DollarOr): string {
  return JSON.stringify(DollarOr$outboundSchema.parse(dollarOr));
}

export function dollarOrFromJSON(
  jsonString: string,
): SafeParseResult<DollarOr, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DollarOr$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DollarOr' from JSON`,
  );
}

/** @internal */
export const Filter1$inboundSchema: z.ZodType<Filter1, z.ZodTypeDef, unknown> =
  z.object({
    $or: z.array(
      z.union([
        z.lazy(() => DollarOr1$inboundSchema),
        z.lazy(() => DollarOr2$inboundSchema),
      ]),
    ),
  }).transform((v) => {
    return remap$(v, {
      "$or": "dollarOr",
    });
  });

/** @internal */
export type Filter1$Outbound = {
  $or: Array<DollarOr1$Outbound | DollarOr2$Outbound>;
};

/** @internal */
export const Filter1$outboundSchema: z.ZodType<
  Filter1$Outbound,
  z.ZodTypeDef,
  Filter1
> = z.object({
  dollarOr: z.array(
    z.union([
      z.lazy(() => DollarOr1$outboundSchema),
      z.lazy(() => DollarOr2$outboundSchema),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    dollarOr: "$or",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Filter1$ {
  /** @deprecated use `Filter1$inboundSchema` instead. */
  export const inboundSchema = Filter1$inboundSchema;
  /** @deprecated use `Filter1$outboundSchema` instead. */
  export const outboundSchema = Filter1$outboundSchema;
  /** @deprecated use `Filter1$Outbound` instead. */
  export type Outbound = Filter1$Outbound;
}

export function filter1ToJSON(filter1: Filter1): string {
  return JSON.stringify(Filter1$outboundSchema.parse(filter1));
}

export function filter1FromJSON(
  jsonString: string,
): SafeParseResult<Filter1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Filter1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Filter1' from JSON`,
  );
}

/** @internal */
export const Filter$inboundSchema: z.ZodType<Filter, z.ZodTypeDef, unknown> = z
  .union([
    z.lazy(() => Filter1$inboundSchema),
    z.lazy(() => Filter2$inboundSchema),
  ]);

/** @internal */
export type Filter$Outbound = Filter1$Outbound | Filter2$Outbound;

/** @internal */
export const Filter$outboundSchema: z.ZodType<
  Filter$Outbound,
  z.ZodTypeDef,
  Filter
> = z.union([
  z.lazy(() => Filter1$outboundSchema),
  z.lazy(() => Filter2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Filter$ {
  /** @deprecated use `Filter$inboundSchema` instead. */
  export const inboundSchema = Filter$inboundSchema;
  /** @deprecated use `Filter$outboundSchema` instead. */
  export const outboundSchema = Filter$outboundSchema;
  /** @deprecated use `Filter$Outbound` instead. */
  export type Outbound = Filter$Outbound;
}

export function filterToJSON(filter: Filter): string {
  return JSON.stringify(Filter$outboundSchema.parse(filter));
}

export function filterFromJSON(
  jsonString: string,
): SafeParseResult<Filter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Filter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Filter' from JSON`,
  );
}

/** @internal */
export const Subscriptions$inboundSchema: z.ZodType<
  Subscriptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  event_type: EventType$inboundSchema,
  filter: z.nullable(
    z.union([
      z.lazy(() => Filter1$inboundSchema),
      z.lazy(() => Filter2$inboundSchema),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    "event_type": "eventType",
  });
});

/** @internal */
export type Subscriptions$Outbound = {
  event_type: string;
  filter: Filter1$Outbound | Filter2$Outbound | null;
};

/** @internal */
export const Subscriptions$outboundSchema: z.ZodType<
  Subscriptions$Outbound,
  z.ZodTypeDef,
  Subscriptions
> = z.object({
  eventType: EventType$outboundSchema,
  filter: z.nullable(
    z.union([
      z.lazy(() => Filter1$outboundSchema),
      z.lazy(() => Filter2$outboundSchema),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    eventType: "event_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Subscriptions$ {
  /** @deprecated use `Subscriptions$inboundSchema` instead. */
  export const inboundSchema = Subscriptions$inboundSchema;
  /** @deprecated use `Subscriptions$outboundSchema` instead. */
  export const outboundSchema = Subscriptions$outboundSchema;
  /** @deprecated use `Subscriptions$Outbound` instead. */
  export type Outbound = Subscriptions$Outbound;
}

export function subscriptionsToJSON(subscriptions: Subscriptions): string {
  return JSON.stringify(Subscriptions$outboundSchema.parse(subscriptions));
}

export function subscriptionsFromJSON(
  jsonString: string,
): SafeParseResult<Subscriptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Subscriptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Subscriptions' from JSON`,
  );
}

/** @internal */
export const PostV2WebhooksData$inboundSchema: z.ZodType<
  PostV2WebhooksData,
  z.ZodTypeDef,
  unknown
> = z.object({
  target_url: z.string(),
  subscriptions: z.array(z.lazy(() => Subscriptions$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "target_url": "targetUrl",
  });
});

/** @internal */
export type PostV2WebhooksData$Outbound = {
  target_url: string;
  subscriptions: Array<Subscriptions$Outbound>;
};

/** @internal */
export const PostV2WebhooksData$outboundSchema: z.ZodType<
  PostV2WebhooksData$Outbound,
  z.ZodTypeDef,
  PostV2WebhooksData
> = z.object({
  targetUrl: z.string(),
  subscriptions: z.array(z.lazy(() => Subscriptions$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    targetUrl: "target_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2WebhooksData$ {
  /** @deprecated use `PostV2WebhooksData$inboundSchema` instead. */
  export const inboundSchema = PostV2WebhooksData$inboundSchema;
  /** @deprecated use `PostV2WebhooksData$outboundSchema` instead. */
  export const outboundSchema = PostV2WebhooksData$outboundSchema;
  /** @deprecated use `PostV2WebhooksData$Outbound` instead. */
  export type Outbound = PostV2WebhooksData$Outbound;
}

export function postV2WebhooksDataToJSON(
  postV2WebhooksData: PostV2WebhooksData,
): string {
  return JSON.stringify(
    PostV2WebhooksData$outboundSchema.parse(postV2WebhooksData),
  );
}

export function postV2WebhooksDataFromJSON(
  jsonString: string,
): SafeParseResult<PostV2WebhooksData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV2WebhooksData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV2WebhooksData' from JSON`,
  );
}

/** @internal */
export const PostV2WebhooksRequestBody$inboundSchema: z.ZodType<
  PostV2WebhooksRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => PostV2WebhooksData$inboundSchema),
});

/** @internal */
export type PostV2WebhooksRequestBody$Outbound = {
  data: PostV2WebhooksData$Outbound;
};

/** @internal */
export const PostV2WebhooksRequestBody$outboundSchema: z.ZodType<
  PostV2WebhooksRequestBody$Outbound,
  z.ZodTypeDef,
  PostV2WebhooksRequestBody
> = z.object({
  data: z.lazy(() => PostV2WebhooksData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2WebhooksRequestBody$ {
  /** @deprecated use `PostV2WebhooksRequestBody$inboundSchema` instead. */
  export const inboundSchema = PostV2WebhooksRequestBody$inboundSchema;
  /** @deprecated use `PostV2WebhooksRequestBody$outboundSchema` instead. */
  export const outboundSchema = PostV2WebhooksRequestBody$outboundSchema;
  /** @deprecated use `PostV2WebhooksRequestBody$Outbound` instead. */
  export type Outbound = PostV2WebhooksRequestBody$Outbound;
}

export function postV2WebhooksRequestBodyToJSON(
  postV2WebhooksRequestBody: PostV2WebhooksRequestBody,
): string {
  return JSON.stringify(
    PostV2WebhooksRequestBody$outboundSchema.parse(postV2WebhooksRequestBody),
  );
}

export function postV2WebhooksRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PostV2WebhooksRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV2WebhooksRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV2WebhooksRequestBody' from JSON`,
  );
}

/** @internal */
export const PostV2WebhooksEventType$inboundSchema: z.ZodNativeEnum<
  typeof PostV2WebhooksEventType
> = z.nativeEnum(PostV2WebhooksEventType);

/** @internal */
export const PostV2WebhooksEventType$outboundSchema: z.ZodNativeEnum<
  typeof PostV2WebhooksEventType
> = PostV2WebhooksEventType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2WebhooksEventType$ {
  /** @deprecated use `PostV2WebhooksEventType$inboundSchema` instead. */
  export const inboundSchema = PostV2WebhooksEventType$inboundSchema;
  /** @deprecated use `PostV2WebhooksEventType$outboundSchema` instead. */
  export const outboundSchema = PostV2WebhooksEventType$outboundSchema;
}

/** @internal */
export const PostV2WebhooksDollarAndWebhooksResponseOperator$inboundSchema:
  z.ZodNativeEnum<typeof PostV2WebhooksDollarAndWebhooksResponseOperator> = z
    .nativeEnum(PostV2WebhooksDollarAndWebhooksResponseOperator);

/** @internal */
export const PostV2WebhooksDollarAndWebhooksResponseOperator$outboundSchema:
  z.ZodNativeEnum<typeof PostV2WebhooksDollarAndWebhooksResponseOperator> =
    PostV2WebhooksDollarAndWebhooksResponseOperator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2WebhooksDollarAndWebhooksResponseOperator$ {
  /** @deprecated use `PostV2WebhooksDollarAndWebhooksResponseOperator$inboundSchema` instead. */
  export const inboundSchema =
    PostV2WebhooksDollarAndWebhooksResponseOperator$inboundSchema;
  /** @deprecated use `PostV2WebhooksDollarAndWebhooksResponseOperator$outboundSchema` instead. */
  export const outboundSchema =
    PostV2WebhooksDollarAndWebhooksResponseOperator$outboundSchema;
}

/** @internal */
export const PostV2WebhooksDollarAnd2$inboundSchema: z.ZodType<
  PostV2WebhooksDollarAnd2,
  z.ZodTypeDef,
  unknown
> = z.object({
  field: z.string(),
  operator: PostV2WebhooksDollarAndWebhooksResponseOperator$inboundSchema,
  value: z.string(),
});

/** @internal */
export type PostV2WebhooksDollarAnd2$Outbound = {
  field: string;
  operator: string;
  value: string;
};

/** @internal */
export const PostV2WebhooksDollarAnd2$outboundSchema: z.ZodType<
  PostV2WebhooksDollarAnd2$Outbound,
  z.ZodTypeDef,
  PostV2WebhooksDollarAnd2
> = z.object({
  field: z.string(),
  operator: PostV2WebhooksDollarAndWebhooksResponseOperator$outboundSchema,
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2WebhooksDollarAnd2$ {
  /** @deprecated use `PostV2WebhooksDollarAnd2$inboundSchema` instead. */
  export const inboundSchema = PostV2WebhooksDollarAnd2$inboundSchema;
  /** @deprecated use `PostV2WebhooksDollarAnd2$outboundSchema` instead. */
  export const outboundSchema = PostV2WebhooksDollarAnd2$outboundSchema;
  /** @deprecated use `PostV2WebhooksDollarAnd2$Outbound` instead. */
  export type Outbound = PostV2WebhooksDollarAnd2$Outbound;
}

export function postV2WebhooksDollarAnd2ToJSON(
  postV2WebhooksDollarAnd2: PostV2WebhooksDollarAnd2,
): string {
  return JSON.stringify(
    PostV2WebhooksDollarAnd2$outboundSchema.parse(postV2WebhooksDollarAnd2),
  );
}

export function postV2WebhooksDollarAnd2FromJSON(
  jsonString: string,
): SafeParseResult<PostV2WebhooksDollarAnd2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV2WebhooksDollarAnd2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV2WebhooksDollarAnd2' from JSON`,
  );
}

/** @internal */
export const PostV2WebhooksDollarAndWebhooksOperator$inboundSchema:
  z.ZodNativeEnum<typeof PostV2WebhooksDollarAndWebhooksOperator> = z
    .nativeEnum(PostV2WebhooksDollarAndWebhooksOperator);

/** @internal */
export const PostV2WebhooksDollarAndWebhooksOperator$outboundSchema:
  z.ZodNativeEnum<typeof PostV2WebhooksDollarAndWebhooksOperator> =
    PostV2WebhooksDollarAndWebhooksOperator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2WebhooksDollarAndWebhooksOperator$ {
  /** @deprecated use `PostV2WebhooksDollarAndWebhooksOperator$inboundSchema` instead. */
  export const inboundSchema =
    PostV2WebhooksDollarAndWebhooksOperator$inboundSchema;
  /** @deprecated use `PostV2WebhooksDollarAndWebhooksOperator$outboundSchema` instead. */
  export const outboundSchema =
    PostV2WebhooksDollarAndWebhooksOperator$outboundSchema;
}

/** @internal */
export const PostV2WebhooksDollarAnd1$inboundSchema: z.ZodType<
  PostV2WebhooksDollarAnd1,
  z.ZodTypeDef,
  unknown
> = z.object({
  field: z.string(),
  operator: PostV2WebhooksDollarAndWebhooksOperator$inboundSchema,
  value: z.string(),
});

/** @internal */
export type PostV2WebhooksDollarAnd1$Outbound = {
  field: string;
  operator: string;
  value: string;
};

/** @internal */
export const PostV2WebhooksDollarAnd1$outboundSchema: z.ZodType<
  PostV2WebhooksDollarAnd1$Outbound,
  z.ZodTypeDef,
  PostV2WebhooksDollarAnd1
> = z.object({
  field: z.string(),
  operator: PostV2WebhooksDollarAndWebhooksOperator$outboundSchema,
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2WebhooksDollarAnd1$ {
  /** @deprecated use `PostV2WebhooksDollarAnd1$inboundSchema` instead. */
  export const inboundSchema = PostV2WebhooksDollarAnd1$inboundSchema;
  /** @deprecated use `PostV2WebhooksDollarAnd1$outboundSchema` instead. */
  export const outboundSchema = PostV2WebhooksDollarAnd1$outboundSchema;
  /** @deprecated use `PostV2WebhooksDollarAnd1$Outbound` instead. */
  export type Outbound = PostV2WebhooksDollarAnd1$Outbound;
}

export function postV2WebhooksDollarAnd1ToJSON(
  postV2WebhooksDollarAnd1: PostV2WebhooksDollarAnd1,
): string {
  return JSON.stringify(
    PostV2WebhooksDollarAnd1$outboundSchema.parse(postV2WebhooksDollarAnd1),
  );
}

export function postV2WebhooksDollarAnd1FromJSON(
  jsonString: string,
): SafeParseResult<PostV2WebhooksDollarAnd1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV2WebhooksDollarAnd1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV2WebhooksDollarAnd1' from JSON`,
  );
}

/** @internal */
export const PostV2WebhooksFilterDollarAnd$inboundSchema: z.ZodType<
  PostV2WebhooksFilterDollarAnd,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => PostV2WebhooksDollarAnd1$inboundSchema),
  z.lazy(() => PostV2WebhooksDollarAnd2$inboundSchema),
]);

/** @internal */
export type PostV2WebhooksFilterDollarAnd$Outbound =
  | PostV2WebhooksDollarAnd1$Outbound
  | PostV2WebhooksDollarAnd2$Outbound;

/** @internal */
export const PostV2WebhooksFilterDollarAnd$outboundSchema: z.ZodType<
  PostV2WebhooksFilterDollarAnd$Outbound,
  z.ZodTypeDef,
  PostV2WebhooksFilterDollarAnd
> = z.union([
  z.lazy(() => PostV2WebhooksDollarAnd1$outboundSchema),
  z.lazy(() => PostV2WebhooksDollarAnd2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2WebhooksFilterDollarAnd$ {
  /** @deprecated use `PostV2WebhooksFilterDollarAnd$inboundSchema` instead. */
  export const inboundSchema = PostV2WebhooksFilterDollarAnd$inboundSchema;
  /** @deprecated use `PostV2WebhooksFilterDollarAnd$outboundSchema` instead. */
  export const outboundSchema = PostV2WebhooksFilterDollarAnd$outboundSchema;
  /** @deprecated use `PostV2WebhooksFilterDollarAnd$Outbound` instead. */
  export type Outbound = PostV2WebhooksFilterDollarAnd$Outbound;
}

export function postV2WebhooksFilterDollarAndToJSON(
  postV2WebhooksFilterDollarAnd: PostV2WebhooksFilterDollarAnd,
): string {
  return JSON.stringify(
    PostV2WebhooksFilterDollarAnd$outboundSchema.parse(
      postV2WebhooksFilterDollarAnd,
    ),
  );
}

export function postV2WebhooksFilterDollarAndFromJSON(
  jsonString: string,
): SafeParseResult<PostV2WebhooksFilterDollarAnd, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV2WebhooksFilterDollarAnd$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV2WebhooksFilterDollarAnd' from JSON`,
  );
}

/** @internal */
export const PostV2WebhooksFilter2$inboundSchema: z.ZodType<
  PostV2WebhooksFilter2,
  z.ZodTypeDef,
  unknown
> = z.object({
  $and: z.array(
    z.union([
      z.lazy(() => PostV2WebhooksDollarAnd1$inboundSchema),
      z.lazy(() => PostV2WebhooksDollarAnd2$inboundSchema),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    "$and": "dollarAnd",
  });
});

/** @internal */
export type PostV2WebhooksFilter2$Outbound = {
  $and: Array<
    PostV2WebhooksDollarAnd1$Outbound | PostV2WebhooksDollarAnd2$Outbound
  >;
};

/** @internal */
export const PostV2WebhooksFilter2$outboundSchema: z.ZodType<
  PostV2WebhooksFilter2$Outbound,
  z.ZodTypeDef,
  PostV2WebhooksFilter2
> = z.object({
  dollarAnd: z.array(
    z.union([
      z.lazy(() => PostV2WebhooksDollarAnd1$outboundSchema),
      z.lazy(() => PostV2WebhooksDollarAnd2$outboundSchema),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    dollarAnd: "$and",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2WebhooksFilter2$ {
  /** @deprecated use `PostV2WebhooksFilter2$inboundSchema` instead. */
  export const inboundSchema = PostV2WebhooksFilter2$inboundSchema;
  /** @deprecated use `PostV2WebhooksFilter2$outboundSchema` instead. */
  export const outboundSchema = PostV2WebhooksFilter2$outboundSchema;
  /** @deprecated use `PostV2WebhooksFilter2$Outbound` instead. */
  export type Outbound = PostV2WebhooksFilter2$Outbound;
}

export function postV2WebhooksFilter2ToJSON(
  postV2WebhooksFilter2: PostV2WebhooksFilter2,
): string {
  return JSON.stringify(
    PostV2WebhooksFilter2$outboundSchema.parse(postV2WebhooksFilter2),
  );
}

export function postV2WebhooksFilter2FromJSON(
  jsonString: string,
): SafeParseResult<PostV2WebhooksFilter2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV2WebhooksFilter2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV2WebhooksFilter2' from JSON`,
  );
}

/** @internal */
export const PostV2WebhooksDollarOrWebhooksOperator$inboundSchema:
  z.ZodNativeEnum<typeof PostV2WebhooksDollarOrWebhooksOperator> = z.nativeEnum(
    PostV2WebhooksDollarOrWebhooksOperator,
  );

/** @internal */
export const PostV2WebhooksDollarOrWebhooksOperator$outboundSchema:
  z.ZodNativeEnum<typeof PostV2WebhooksDollarOrWebhooksOperator> =
    PostV2WebhooksDollarOrWebhooksOperator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2WebhooksDollarOrWebhooksOperator$ {
  /** @deprecated use `PostV2WebhooksDollarOrWebhooksOperator$inboundSchema` instead. */
  export const inboundSchema =
    PostV2WebhooksDollarOrWebhooksOperator$inboundSchema;
  /** @deprecated use `PostV2WebhooksDollarOrWebhooksOperator$outboundSchema` instead. */
  export const outboundSchema =
    PostV2WebhooksDollarOrWebhooksOperator$outboundSchema;
}

/** @internal */
export const PostV2WebhooksDollarOr2$inboundSchema: z.ZodType<
  PostV2WebhooksDollarOr2,
  z.ZodTypeDef,
  unknown
> = z.object({
  field: z.string(),
  operator: PostV2WebhooksDollarOrWebhooksOperator$inboundSchema,
  value: z.string(),
});

/** @internal */
export type PostV2WebhooksDollarOr2$Outbound = {
  field: string;
  operator: string;
  value: string;
};

/** @internal */
export const PostV2WebhooksDollarOr2$outboundSchema: z.ZodType<
  PostV2WebhooksDollarOr2$Outbound,
  z.ZodTypeDef,
  PostV2WebhooksDollarOr2
> = z.object({
  field: z.string(),
  operator: PostV2WebhooksDollarOrWebhooksOperator$outboundSchema,
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2WebhooksDollarOr2$ {
  /** @deprecated use `PostV2WebhooksDollarOr2$inboundSchema` instead. */
  export const inboundSchema = PostV2WebhooksDollarOr2$inboundSchema;
  /** @deprecated use `PostV2WebhooksDollarOr2$outboundSchema` instead. */
  export const outboundSchema = PostV2WebhooksDollarOr2$outboundSchema;
  /** @deprecated use `PostV2WebhooksDollarOr2$Outbound` instead. */
  export type Outbound = PostV2WebhooksDollarOr2$Outbound;
}

export function postV2WebhooksDollarOr2ToJSON(
  postV2WebhooksDollarOr2: PostV2WebhooksDollarOr2,
): string {
  return JSON.stringify(
    PostV2WebhooksDollarOr2$outboundSchema.parse(postV2WebhooksDollarOr2),
  );
}

export function postV2WebhooksDollarOr2FromJSON(
  jsonString: string,
): SafeParseResult<PostV2WebhooksDollarOr2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV2WebhooksDollarOr2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV2WebhooksDollarOr2' from JSON`,
  );
}

/** @internal */
export const PostV2WebhooksDollarOrOperator$inboundSchema: z.ZodNativeEnum<
  typeof PostV2WebhooksDollarOrOperator
> = z.nativeEnum(PostV2WebhooksDollarOrOperator);

/** @internal */
export const PostV2WebhooksDollarOrOperator$outboundSchema: z.ZodNativeEnum<
  typeof PostV2WebhooksDollarOrOperator
> = PostV2WebhooksDollarOrOperator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2WebhooksDollarOrOperator$ {
  /** @deprecated use `PostV2WebhooksDollarOrOperator$inboundSchema` instead. */
  export const inboundSchema = PostV2WebhooksDollarOrOperator$inboundSchema;
  /** @deprecated use `PostV2WebhooksDollarOrOperator$outboundSchema` instead. */
  export const outboundSchema = PostV2WebhooksDollarOrOperator$outboundSchema;
}

/** @internal */
export const PostV2WebhooksDollarOr1$inboundSchema: z.ZodType<
  PostV2WebhooksDollarOr1,
  z.ZodTypeDef,
  unknown
> = z.object({
  field: z.string(),
  operator: PostV2WebhooksDollarOrOperator$inboundSchema,
  value: z.string(),
});

/** @internal */
export type PostV2WebhooksDollarOr1$Outbound = {
  field: string;
  operator: string;
  value: string;
};

/** @internal */
export const PostV2WebhooksDollarOr1$outboundSchema: z.ZodType<
  PostV2WebhooksDollarOr1$Outbound,
  z.ZodTypeDef,
  PostV2WebhooksDollarOr1
> = z.object({
  field: z.string(),
  operator: PostV2WebhooksDollarOrOperator$outboundSchema,
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2WebhooksDollarOr1$ {
  /** @deprecated use `PostV2WebhooksDollarOr1$inboundSchema` instead. */
  export const inboundSchema = PostV2WebhooksDollarOr1$inboundSchema;
  /** @deprecated use `PostV2WebhooksDollarOr1$outboundSchema` instead. */
  export const outboundSchema = PostV2WebhooksDollarOr1$outboundSchema;
  /** @deprecated use `PostV2WebhooksDollarOr1$Outbound` instead. */
  export type Outbound = PostV2WebhooksDollarOr1$Outbound;
}

export function postV2WebhooksDollarOr1ToJSON(
  postV2WebhooksDollarOr1: PostV2WebhooksDollarOr1,
): string {
  return JSON.stringify(
    PostV2WebhooksDollarOr1$outboundSchema.parse(postV2WebhooksDollarOr1),
  );
}

export function postV2WebhooksDollarOr1FromJSON(
  jsonString: string,
): SafeParseResult<PostV2WebhooksDollarOr1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV2WebhooksDollarOr1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV2WebhooksDollarOr1' from JSON`,
  );
}

/** @internal */
export const PostV2WebhooksFilterDollarOr$inboundSchema: z.ZodType<
  PostV2WebhooksFilterDollarOr,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => PostV2WebhooksDollarOr1$inboundSchema),
  z.lazy(() => PostV2WebhooksDollarOr2$inboundSchema),
]);

/** @internal */
export type PostV2WebhooksFilterDollarOr$Outbound =
  | PostV2WebhooksDollarOr1$Outbound
  | PostV2WebhooksDollarOr2$Outbound;

/** @internal */
export const PostV2WebhooksFilterDollarOr$outboundSchema: z.ZodType<
  PostV2WebhooksFilterDollarOr$Outbound,
  z.ZodTypeDef,
  PostV2WebhooksFilterDollarOr
> = z.union([
  z.lazy(() => PostV2WebhooksDollarOr1$outboundSchema),
  z.lazy(() => PostV2WebhooksDollarOr2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2WebhooksFilterDollarOr$ {
  /** @deprecated use `PostV2WebhooksFilterDollarOr$inboundSchema` instead. */
  export const inboundSchema = PostV2WebhooksFilterDollarOr$inboundSchema;
  /** @deprecated use `PostV2WebhooksFilterDollarOr$outboundSchema` instead. */
  export const outboundSchema = PostV2WebhooksFilterDollarOr$outboundSchema;
  /** @deprecated use `PostV2WebhooksFilterDollarOr$Outbound` instead. */
  export type Outbound = PostV2WebhooksFilterDollarOr$Outbound;
}

export function postV2WebhooksFilterDollarOrToJSON(
  postV2WebhooksFilterDollarOr: PostV2WebhooksFilterDollarOr,
): string {
  return JSON.stringify(
    PostV2WebhooksFilterDollarOr$outboundSchema.parse(
      postV2WebhooksFilterDollarOr,
    ),
  );
}

export function postV2WebhooksFilterDollarOrFromJSON(
  jsonString: string,
): SafeParseResult<PostV2WebhooksFilterDollarOr, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV2WebhooksFilterDollarOr$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV2WebhooksFilterDollarOr' from JSON`,
  );
}

/** @internal */
export const PostV2WebhooksFilter1$inboundSchema: z.ZodType<
  PostV2WebhooksFilter1,
  z.ZodTypeDef,
  unknown
> = z.object({
  $or: z.array(
    z.union([
      z.lazy(() => PostV2WebhooksDollarOr1$inboundSchema),
      z.lazy(() => PostV2WebhooksDollarOr2$inboundSchema),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    "$or": "dollarOr",
  });
});

/** @internal */
export type PostV2WebhooksFilter1$Outbound = {
  $or: Array<
    PostV2WebhooksDollarOr1$Outbound | PostV2WebhooksDollarOr2$Outbound
  >;
};

/** @internal */
export const PostV2WebhooksFilter1$outboundSchema: z.ZodType<
  PostV2WebhooksFilter1$Outbound,
  z.ZodTypeDef,
  PostV2WebhooksFilter1
> = z.object({
  dollarOr: z.array(
    z.union([
      z.lazy(() => PostV2WebhooksDollarOr1$outboundSchema),
      z.lazy(() => PostV2WebhooksDollarOr2$outboundSchema),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    dollarOr: "$or",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2WebhooksFilter1$ {
  /** @deprecated use `PostV2WebhooksFilter1$inboundSchema` instead. */
  export const inboundSchema = PostV2WebhooksFilter1$inboundSchema;
  /** @deprecated use `PostV2WebhooksFilter1$outboundSchema` instead. */
  export const outboundSchema = PostV2WebhooksFilter1$outboundSchema;
  /** @deprecated use `PostV2WebhooksFilter1$Outbound` instead. */
  export type Outbound = PostV2WebhooksFilter1$Outbound;
}

export function postV2WebhooksFilter1ToJSON(
  postV2WebhooksFilter1: PostV2WebhooksFilter1,
): string {
  return JSON.stringify(
    PostV2WebhooksFilter1$outboundSchema.parse(postV2WebhooksFilter1),
  );
}

export function postV2WebhooksFilter1FromJSON(
  jsonString: string,
): SafeParseResult<PostV2WebhooksFilter1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV2WebhooksFilter1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV2WebhooksFilter1' from JSON`,
  );
}

/** @internal */
export const PostV2WebhooksFilter$inboundSchema: z.ZodType<
  PostV2WebhooksFilter,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => PostV2WebhooksFilter1$inboundSchema),
  z.lazy(() => PostV2WebhooksFilter2$inboundSchema),
]);

/** @internal */
export type PostV2WebhooksFilter$Outbound =
  | PostV2WebhooksFilter1$Outbound
  | PostV2WebhooksFilter2$Outbound;

/** @internal */
export const PostV2WebhooksFilter$outboundSchema: z.ZodType<
  PostV2WebhooksFilter$Outbound,
  z.ZodTypeDef,
  PostV2WebhooksFilter
> = z.union([
  z.lazy(() => PostV2WebhooksFilter1$outboundSchema),
  z.lazy(() => PostV2WebhooksFilter2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2WebhooksFilter$ {
  /** @deprecated use `PostV2WebhooksFilter$inboundSchema` instead. */
  export const inboundSchema = PostV2WebhooksFilter$inboundSchema;
  /** @deprecated use `PostV2WebhooksFilter$outboundSchema` instead. */
  export const outboundSchema = PostV2WebhooksFilter$outboundSchema;
  /** @deprecated use `PostV2WebhooksFilter$Outbound` instead. */
  export type Outbound = PostV2WebhooksFilter$Outbound;
}

export function postV2WebhooksFilterToJSON(
  postV2WebhooksFilter: PostV2WebhooksFilter,
): string {
  return JSON.stringify(
    PostV2WebhooksFilter$outboundSchema.parse(postV2WebhooksFilter),
  );
}

export function postV2WebhooksFilterFromJSON(
  jsonString: string,
): SafeParseResult<PostV2WebhooksFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV2WebhooksFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV2WebhooksFilter' from JSON`,
  );
}

/** @internal */
export const PostV2WebhooksSubscriptions$inboundSchema: z.ZodType<
  PostV2WebhooksSubscriptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  event_type: PostV2WebhooksEventType$inboundSchema,
  filter: z.nullable(
    z.union([
      z.lazy(() => PostV2WebhooksFilter1$inboundSchema),
      z.lazy(() => PostV2WebhooksFilter2$inboundSchema),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    "event_type": "eventType",
  });
});

/** @internal */
export type PostV2WebhooksSubscriptions$Outbound = {
  event_type: string;
  filter:
    | PostV2WebhooksFilter1$Outbound
    | PostV2WebhooksFilter2$Outbound
    | null;
};

/** @internal */
export const PostV2WebhooksSubscriptions$outboundSchema: z.ZodType<
  PostV2WebhooksSubscriptions$Outbound,
  z.ZodTypeDef,
  PostV2WebhooksSubscriptions
> = z.object({
  eventType: PostV2WebhooksEventType$outboundSchema,
  filter: z.nullable(
    z.union([
      z.lazy(() => PostV2WebhooksFilter1$outboundSchema),
      z.lazy(() => PostV2WebhooksFilter2$outboundSchema),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    eventType: "event_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2WebhooksSubscriptions$ {
  /** @deprecated use `PostV2WebhooksSubscriptions$inboundSchema` instead. */
  export const inboundSchema = PostV2WebhooksSubscriptions$inboundSchema;
  /** @deprecated use `PostV2WebhooksSubscriptions$outboundSchema` instead. */
  export const outboundSchema = PostV2WebhooksSubscriptions$outboundSchema;
  /** @deprecated use `PostV2WebhooksSubscriptions$Outbound` instead. */
  export type Outbound = PostV2WebhooksSubscriptions$Outbound;
}

export function postV2WebhooksSubscriptionsToJSON(
  postV2WebhooksSubscriptions: PostV2WebhooksSubscriptions,
): string {
  return JSON.stringify(
    PostV2WebhooksSubscriptions$outboundSchema.parse(
      postV2WebhooksSubscriptions,
    ),
  );
}

export function postV2WebhooksSubscriptionsFromJSON(
  jsonString: string,
): SafeParseResult<PostV2WebhooksSubscriptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV2WebhooksSubscriptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV2WebhooksSubscriptions' from JSON`,
  );
}

/** @internal */
export const PostV2WebhooksId$inboundSchema: z.ZodType<
  PostV2WebhooksId,
  z.ZodTypeDef,
  unknown
> = z.object({
  workspace_id: z.string(),
  webhook_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "workspace_id": "workspaceId",
    "webhook_id": "webhookId",
  });
});

/** @internal */
export type PostV2WebhooksId$Outbound = {
  workspace_id: string;
  webhook_id: string;
};

/** @internal */
export const PostV2WebhooksId$outboundSchema: z.ZodType<
  PostV2WebhooksId$Outbound,
  z.ZodTypeDef,
  PostV2WebhooksId
> = z.object({
  workspaceId: z.string(),
  webhookId: z.string(),
}).transform((v) => {
  return remap$(v, {
    workspaceId: "workspace_id",
    webhookId: "webhook_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2WebhooksId$ {
  /** @deprecated use `PostV2WebhooksId$inboundSchema` instead. */
  export const inboundSchema = PostV2WebhooksId$inboundSchema;
  /** @deprecated use `PostV2WebhooksId$outboundSchema` instead. */
  export const outboundSchema = PostV2WebhooksId$outboundSchema;
  /** @deprecated use `PostV2WebhooksId$Outbound` instead. */
  export type Outbound = PostV2WebhooksId$Outbound;
}

export function postV2WebhooksIdToJSON(
  postV2WebhooksId: PostV2WebhooksId,
): string {
  return JSON.stringify(
    PostV2WebhooksId$outboundSchema.parse(postV2WebhooksId),
  );
}

export function postV2WebhooksIdFromJSON(
  jsonString: string,
): SafeParseResult<PostV2WebhooksId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV2WebhooksId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV2WebhooksId' from JSON`,
  );
}

/** @internal */
export const PostV2WebhooksStatus$inboundSchema: z.ZodNativeEnum<
  typeof PostV2WebhooksStatus
> = z.nativeEnum(PostV2WebhooksStatus);

/** @internal */
export const PostV2WebhooksStatus$outboundSchema: z.ZodNativeEnum<
  typeof PostV2WebhooksStatus
> = PostV2WebhooksStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2WebhooksStatus$ {
  /** @deprecated use `PostV2WebhooksStatus$inboundSchema` instead. */
  export const inboundSchema = PostV2WebhooksStatus$inboundSchema;
  /** @deprecated use `PostV2WebhooksStatus$outboundSchema` instead. */
  export const outboundSchema = PostV2WebhooksStatus$outboundSchema;
}

/** @internal */
export const PostV2WebhooksWebhooksData$inboundSchema: z.ZodType<
  PostV2WebhooksWebhooksData,
  z.ZodTypeDef,
  unknown
> = z.object({
  target_url: z.string(),
  subscriptions: z.array(
    z.lazy(() => PostV2WebhooksSubscriptions$inboundSchema),
  ),
  id: z.lazy(() => PostV2WebhooksId$inboundSchema),
  status: PostV2WebhooksStatus$inboundSchema,
  created_at: z.string(),
  secret: z.string(),
}).transform((v) => {
  return remap$(v, {
    "target_url": "targetUrl",
    "created_at": "createdAt",
  });
});

/** @internal */
export type PostV2WebhooksWebhooksData$Outbound = {
  target_url: string;
  subscriptions: Array<PostV2WebhooksSubscriptions$Outbound>;
  id: PostV2WebhooksId$Outbound;
  status: string;
  created_at: string;
  secret: string;
};

/** @internal */
export const PostV2WebhooksWebhooksData$outboundSchema: z.ZodType<
  PostV2WebhooksWebhooksData$Outbound,
  z.ZodTypeDef,
  PostV2WebhooksWebhooksData
> = z.object({
  targetUrl: z.string(),
  subscriptions: z.array(
    z.lazy(() => PostV2WebhooksSubscriptions$outboundSchema),
  ),
  id: z.lazy(() => PostV2WebhooksId$outboundSchema),
  status: PostV2WebhooksStatus$outboundSchema,
  createdAt: z.string(),
  secret: z.string(),
}).transform((v) => {
  return remap$(v, {
    targetUrl: "target_url",
    createdAt: "created_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2WebhooksWebhooksData$ {
  /** @deprecated use `PostV2WebhooksWebhooksData$inboundSchema` instead. */
  export const inboundSchema = PostV2WebhooksWebhooksData$inboundSchema;
  /** @deprecated use `PostV2WebhooksWebhooksData$outboundSchema` instead. */
  export const outboundSchema = PostV2WebhooksWebhooksData$outboundSchema;
  /** @deprecated use `PostV2WebhooksWebhooksData$Outbound` instead. */
  export type Outbound = PostV2WebhooksWebhooksData$Outbound;
}

export function postV2WebhooksWebhooksDataToJSON(
  postV2WebhooksWebhooksData: PostV2WebhooksWebhooksData,
): string {
  return JSON.stringify(
    PostV2WebhooksWebhooksData$outboundSchema.parse(postV2WebhooksWebhooksData),
  );
}

export function postV2WebhooksWebhooksDataFromJSON(
  jsonString: string,
): SafeParseResult<PostV2WebhooksWebhooksData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV2WebhooksWebhooksData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV2WebhooksWebhooksData' from JSON`,
  );
}

/** @internal */
export const PostV2WebhooksResponseBody$inboundSchema: z.ZodType<
  PostV2WebhooksResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => PostV2WebhooksWebhooksData$inboundSchema),
});

/** @internal */
export type PostV2WebhooksResponseBody$Outbound = {
  data: PostV2WebhooksWebhooksData$Outbound;
};

/** @internal */
export const PostV2WebhooksResponseBody$outboundSchema: z.ZodType<
  PostV2WebhooksResponseBody$Outbound,
  z.ZodTypeDef,
  PostV2WebhooksResponseBody
> = z.object({
  data: z.lazy(() => PostV2WebhooksWebhooksData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2WebhooksResponseBody$ {
  /** @deprecated use `PostV2WebhooksResponseBody$inboundSchema` instead. */
  export const inboundSchema = PostV2WebhooksResponseBody$inboundSchema;
  /** @deprecated use `PostV2WebhooksResponseBody$outboundSchema` instead. */
  export const outboundSchema = PostV2WebhooksResponseBody$outboundSchema;
  /** @deprecated use `PostV2WebhooksResponseBody$Outbound` instead. */
  export type Outbound = PostV2WebhooksResponseBody$Outbound;
}

export function postV2WebhooksResponseBodyToJSON(
  postV2WebhooksResponseBody: PostV2WebhooksResponseBody,
): string {
  return JSON.stringify(
    PostV2WebhooksResponseBody$outboundSchema.parse(postV2WebhooksResponseBody),
  );
}

export function postV2WebhooksResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<PostV2WebhooksResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV2WebhooksResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV2WebhooksResponseBody' from JSON`,
  );
}
