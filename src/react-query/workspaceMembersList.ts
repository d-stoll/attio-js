/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { AttioCore } from "../core.js";
import { workspaceMembersList } from "../funcs/workspaceMembersList.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useAttioContext } from "./_context.js";
import { QueryHookOptions, SuspenseQueryHookOptions } from "./_types.js";

export type WorkspaceMembersListQueryData =
  operations.GetV2WorkspaceMembersResponseBody;

/**
 * List workspace members
 *
 * @remarks
 * Lists all workspace members in the workspace.
 *
 * Required scopes: `user_management:read`.
 */
export function useWorkspaceMembersList(
  options?: QueryHookOptions<WorkspaceMembersListQueryData>,
): UseQueryResult<WorkspaceMembersListQueryData, Error> {
  const client = useAttioContext();
  return useQuery({
    ...buildWorkspaceMembersListQuery(
      client,
      options,
    ),
    ...options,
  });
}

/**
 * List workspace members
 *
 * @remarks
 * Lists all workspace members in the workspace.
 *
 * Required scopes: `user_management:read`.
 */
export function useWorkspaceMembersListSuspense(
  options?: SuspenseQueryHookOptions<WorkspaceMembersListQueryData>,
): UseSuspenseQueryResult<WorkspaceMembersListQueryData, Error> {
  const client = useAttioContext();
  return useSuspenseQuery({
    ...buildWorkspaceMembersListQuery(
      client,
      options,
    ),
    ...options,
  });
}

export function prefetchWorkspaceMembersList(
  queryClient: QueryClient,
  client$: AttioCore,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildWorkspaceMembersListQuery(
      client$,
    ),
  });
}

export function setWorkspaceMembersListData(
  client: QueryClient,
  data: WorkspaceMembersListQueryData,
): WorkspaceMembersListQueryData | undefined {
  const key = queryKeyWorkspaceMembersList();

  return client.setQueryData<WorkspaceMembersListQueryData>(key, data);
}

export function invalidateAllWorkspaceMembersList(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["attio-js", "workspaceMembers", "list"],
  });
}

export function buildWorkspaceMembersListQuery(
  client$: AttioCore,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<WorkspaceMembersListQueryData>;
} {
  return {
    queryKey: queryKeyWorkspaceMembersList(),
    queryFn: async function workspaceMembersListQueryFn(
      ctx,
    ): Promise<WorkspaceMembersListQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(workspaceMembersList(
        client$,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyWorkspaceMembersList(): QueryKey {
  return ["attio-js", "workspaceMembers", "list"];
}
