/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteV2CommentsCommentIdRequest = {
  commentId: string;
};

/**
 * Success
 */
export type DeleteV2CommentsCommentIdResponseBody = {};

/** @internal */
export const DeleteV2CommentsCommentIdRequest$inboundSchema: z.ZodType<
  DeleteV2CommentsCommentIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  comment_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "comment_id": "commentId",
  });
});

/** @internal */
export type DeleteV2CommentsCommentIdRequest$Outbound = {
  comment_id: string;
};

/** @internal */
export const DeleteV2CommentsCommentIdRequest$outboundSchema: z.ZodType<
  DeleteV2CommentsCommentIdRequest$Outbound,
  z.ZodTypeDef,
  DeleteV2CommentsCommentIdRequest
> = z.object({
  commentId: z.string(),
}).transform((v) => {
  return remap$(v, {
    commentId: "comment_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteV2CommentsCommentIdRequest$ {
  /** @deprecated use `DeleteV2CommentsCommentIdRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteV2CommentsCommentIdRequest$inboundSchema;
  /** @deprecated use `DeleteV2CommentsCommentIdRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteV2CommentsCommentIdRequest$outboundSchema;
  /** @deprecated use `DeleteV2CommentsCommentIdRequest$Outbound` instead. */
  export type Outbound = DeleteV2CommentsCommentIdRequest$Outbound;
}

export function deleteV2CommentsCommentIdRequestToJSON(
  deleteV2CommentsCommentIdRequest: DeleteV2CommentsCommentIdRequest,
): string {
  return JSON.stringify(
    DeleteV2CommentsCommentIdRequest$outboundSchema.parse(
      deleteV2CommentsCommentIdRequest,
    ),
  );
}

export function deleteV2CommentsCommentIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteV2CommentsCommentIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteV2CommentsCommentIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteV2CommentsCommentIdRequest' from JSON`,
  );
}

/** @internal */
export const DeleteV2CommentsCommentIdResponseBody$inboundSchema: z.ZodType<
  DeleteV2CommentsCommentIdResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type DeleteV2CommentsCommentIdResponseBody$Outbound = {};

/** @internal */
export const DeleteV2CommentsCommentIdResponseBody$outboundSchema: z.ZodType<
  DeleteV2CommentsCommentIdResponseBody$Outbound,
  z.ZodTypeDef,
  DeleteV2CommentsCommentIdResponseBody
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteV2CommentsCommentIdResponseBody$ {
  /** @deprecated use `DeleteV2CommentsCommentIdResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    DeleteV2CommentsCommentIdResponseBody$inboundSchema;
  /** @deprecated use `DeleteV2CommentsCommentIdResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    DeleteV2CommentsCommentIdResponseBody$outboundSchema;
  /** @deprecated use `DeleteV2CommentsCommentIdResponseBody$Outbound` instead. */
  export type Outbound = DeleteV2CommentsCommentIdResponseBody$Outbound;
}

export function deleteV2CommentsCommentIdResponseBodyToJSON(
  deleteV2CommentsCommentIdResponseBody: DeleteV2CommentsCommentIdResponseBody,
): string {
  return JSON.stringify(
    DeleteV2CommentsCommentIdResponseBody$outboundSchema.parse(
      deleteV2CommentsCommentIdResponseBody,
    ),
  );
}

export function deleteV2CommentsCommentIdResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<DeleteV2CommentsCommentIdResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteV2CommentsCommentIdResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteV2CommentsCommentIdResponseBody' from JSON`,
  );
}
