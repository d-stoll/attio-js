/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { AttioCore } from "../core.js";
import { encodeSimple } from "../lib/encodings.js";
import * as M from "../lib/matchers.js";
import { compactMap } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import { AttioError } from "../models/errors/attioerror.js";
import {
  GetV2WorkspaceMembersWorkspaceMemberIdNotFoundError,
  GetV2WorkspaceMembersWorkspaceMemberIdNotFoundError$inboundSchema,
} from "../models/errors/getv2objectsobject.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import { ResponseValidationError } from "../models/errors/responsevalidationerror.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import {
  GetV2WorkspaceMembersWorkspaceMemberIdRequest,
  GetV2WorkspaceMembersWorkspaceMemberIdRequest$outboundSchema,
  GetV2WorkspaceMembersWorkspaceMemberIdResponse,
  GetV2WorkspaceMembersWorkspaceMemberIdResponse$inboundSchema,
} from "../models/operations/getv2workspacemembersworkspacememberid.js";
import { APICall, APIPromise } from "../types/async.js";
import { Result } from "../types/fp.js";

/**
 * Get a workspace member
 *
 * @remarks
 * Gets a single workspace member by ID.
 *
 * Required scopes: `user_management:read`.
 */
export function workspaceMembersGet(
  client: AttioCore,
  request: GetV2WorkspaceMembersWorkspaceMemberIdRequest,
  options?: RequestOptions,
): APIPromise<
  Result<
    GetV2WorkspaceMembersWorkspaceMemberIdResponse,
    | GetV2WorkspaceMembersWorkspaceMemberIdNotFoundError
    | AttioError
    | ResponseValidationError
    | ConnectionError
    | RequestAbortedError
    | RequestTimeoutError
    | InvalidRequestError
    | UnexpectedClientError
    | SDKValidationError
  >
> {
  return new APIPromise($do(
    client,
    request,
    options,
  ));
}

async function $do(
  client: AttioCore,
  request: GetV2WorkspaceMembersWorkspaceMemberIdRequest,
  options?: RequestOptions,
): Promise<
  [
    Result<
      GetV2WorkspaceMembersWorkspaceMemberIdResponse,
      | GetV2WorkspaceMembersWorkspaceMemberIdNotFoundError
      | AttioError
      | ResponseValidationError
      | ConnectionError
      | RequestAbortedError
      | RequestTimeoutError
      | InvalidRequestError
      | UnexpectedClientError
      | SDKValidationError
    >,
    APICall,
  ]
> {
  const parsed = safeParse(
    request,
    (value) =>
      GetV2WorkspaceMembersWorkspaceMemberIdRequest$outboundSchema.parse(value),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return [parsed, { status: "invalid" }];
  }
  const payload = parsed.value;
  const body = null;

  const pathParams = {
    workspace_member_id: encodeSimple(
      "workspace_member_id",
      payload.workspace_member_id,
      { explode: false, charEncoding: "percent" },
    ),
  };

  const path = pathToFunc("/v2/workspace_members/{workspace_member_id}")(
    pathParams,
  );

  const headers = new Headers(compactMap({
    Accept: "application/json",
  }));

  const secConfig = await extractSecurity(client._options.apiKey);
  const securityInput = secConfig == null ? {} : { apiKey: secConfig };
  const requestSecurity = resolveGlobalSecurity(securityInput);

  const context = {
    options: client._options,
    baseURL: options?.serverURL ?? client._baseURL ?? "",
    operationID: "get_/v2/workspace_members/{workspace_member_id}",
    oAuth2Scopes: [],

    resolvedSecurity: requestSecurity,

    securitySource: client._options.apiKey,
    retryConfig: options?.retries
      || client._options.retryConfig
      || { strategy: "none" },
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  };

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "GET",
    baseURL: options?.serverURL,
    path: path,
    headers: headers,
    body: body,
    userAgent: client._options.userAgent,
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return [requestRes, { status: "invalid" }];
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ["404", "4XX", "5XX"],
    retryConfig: context.retryConfig,
    retryCodes: context.retryCodes,
  });
  if (!doResult.ok) {
    return [doResult, { status: "request-error", request: req }];
  }
  const response = doResult.value;

  const responseFields = {
    HttpMeta: { Response: response, Request: req },
  };

  const [result] = await M.match<
    GetV2WorkspaceMembersWorkspaceMemberIdResponse,
    | GetV2WorkspaceMembersWorkspaceMemberIdNotFoundError
    | AttioError
    | ResponseValidationError
    | ConnectionError
    | RequestAbortedError
    | RequestTimeoutError
    | InvalidRequestError
    | UnexpectedClientError
    | SDKValidationError
  >(
    M.json(200, GetV2WorkspaceMembersWorkspaceMemberIdResponse$inboundSchema),
    M.jsonErr(
      404,
      GetV2WorkspaceMembersWorkspaceMemberIdNotFoundError$inboundSchema,
    ),
    M.fail("4XX"),
    M.fail("5XX"),
  )(response, req, { extraFields: responseFields });
  if (!result.ok) {
    return [result, { status: "complete", request: req, response }];
  }

  return [result, { status: "complete", request: req, response }];
}
