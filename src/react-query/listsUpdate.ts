/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { AttioCore } from "../core.js";
import { listsUpdate } from "../funcs/listsUpdate.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useAttioContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type ListsUpdateMutationVariables = {
  request: operations.PatchV2ListsListRequest;
  options?: RequestOptions;
};

export type ListsUpdateMutationData = operations.PatchV2ListsListResponseBody;

/**
 * Update a list
 *
 * @remarks
 * Updates an existing list. Permissions for the list are controlled with the `workspace_access` and `workspace_member_access` parameters. Please note that lists must have either `workspace_access` set to `"full-access"` or one or more element of `workspace_member_access` with a `"full-access"` level. It is also possible to receive a `403` billing error if your workspace is not on a plan that supports either advanced workspace or workspace member level access for lists. Changing the parent object of a list is not possible through the API as it can have unintended side-effects that should be considered carefully. If you wish to carry out a parent object change you should do so through the UI.
 *
 * Required scopes: `list_configuration:read-write`.
 */
export function useListsUpdateMutation(
  options?: MutationHookOptions<
    ListsUpdateMutationData,
    Error,
    ListsUpdateMutationVariables
  >,
): UseMutationResult<
  ListsUpdateMutationData,
  Error,
  ListsUpdateMutationVariables
> {
  const client = useAttioContext();
  return useMutation({
    ...buildListsUpdateMutation(client, options),
    ...options,
  });
}

export function mutationKeyListsUpdate(): MutationKey {
  return ["attio-js", "Lists", "update"];
}

export function buildListsUpdateMutation(
  client$: AttioCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: ListsUpdateMutationVariables,
  ) => Promise<ListsUpdateMutationData>;
} {
  return {
    mutationKey: mutationKeyListsUpdate(),
    mutationFn: function listsUpdateMutationFn({
      request,
      options,
    }): Promise<ListsUpdateMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(listsUpdate(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
