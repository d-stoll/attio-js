/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SelectOption,
  SelectOption$inboundSchema,
  SelectOption$Outbound,
  SelectOption$outboundSchema,
} from "./selectoption.js";
import {
  Status,
  Status$inboundSchema,
  Status$Outbound,
  Status$outboundSchema,
} from "./status.js";

/**
 * The attribute type of the value.
 */
export const OutputValue19AttributeType = {
  Timestamp: "timestamp",
} as const;
/**
 * The attribute type of the value.
 */
export type OutputValue19AttributeType = ClosedEnum<
  typeof OutputValue19AttributeType
>;

export type Nineteen = {
  /**
   * The attribute type of the value.
   */
  attributeType: OutputValue19AttributeType;
  /**
   * A timestamp value represents a single, universal moment in time using an ISO 8601 formatted string. This means that a timestamp consists of a date, a time (with nanosecond precision), and a time zone. Attio will coerce timestamps which do not provide full nanosecond precision and UTC is assumed if no time zone is provided. For example, "2023", "2023-01", "2023-01-02", "2023-01-02T13:00", "2023-01-02T13:00:00", and "2023-01-02T13:00:00.000000000" will all be coerced to "2023-01-02T13:00:00.000000000Z". Timestamps are always returned in UTC. For example, writing a timestamp value using the string "2023-01-02T13:00:00.000000000+02:00" will result in the value "2023-01-02T11:00:00.000000000Z" being returned. The maximum date is "9999-12-31T23:59:59.999999999Z".
   */
  value: Date;
};

/**
 * The attribute type of the value.
 */
export const OutputValue18AttributeType = {
  Text: "text",
} as const;
/**
 * The attribute type of the value.
 */
export type OutputValue18AttributeType = ClosedEnum<
  typeof OutputValue18AttributeType
>;

export type Eighteen = {
  /**
   * A raw text field. Values are limited to 10MB.
   */
  value: string;
  /**
   * The attribute type of the value.
   */
  attributeType: OutputValue18AttributeType;
};

/**
 * The attribute type of the value.
 */
export const OutputValue17AttributeType = {
  Select: "select",
} as const;
/**
 * The attribute type of the value.
 */
export type OutputValue17AttributeType = ClosedEnum<
  typeof OutputValue17AttributeType
>;

export type Seventeen = {
  option: SelectOption;
  /**
   * The attribute type of the value.
   */
  attributeType: OutputValue17AttributeType;
};

/**
 * The attribute type of the value.
 */
export const OutputValue16AttributeType = {
  Select: "select",
} as const;
/**
 * The attribute type of the value.
 */
export type OutputValue16AttributeType = ClosedEnum<
  typeof OutputValue16AttributeType
>;

export type Sixteen = {
  /**
   * The UUID identifying the selected select option.
   */
  option: string;
  /**
   * The attribute type of the value.
   */
  attributeType: OutputValue16AttributeType;
};

/**
 * The attribute type of the value.
 */
export const OutputValue15AttributeType = {
  Rating: "rating",
} as const;
/**
 * The attribute type of the value.
 */
export type OutputValue15AttributeType = ClosedEnum<
  typeof OutputValue15AttributeType
>;

export type Fifteen = {
  /**
   * A number between 0 and 5 (inclusive) to represent a star rating.
   */
  value: number;
  /**
   * The attribute type of the value.
   */
  attributeType: OutputValue15AttributeType;
};

/**
 * The attribute type of the value.
 */
export const OutputValue14AttributeType = {
  Status: "status",
} as const;
/**
 * The attribute type of the value.
 */
export type OutputValue14AttributeType = ClosedEnum<
  typeof OutputValue14AttributeType
>;

export type Fourteen = {
  status: Status;
  /**
   * The attribute type of the value.
   */
  attributeType: OutputValue14AttributeType;
};

/**
 * The attribute type of the value.
 */
export const OutputValue13AttributeType = {
  Status: "status",
} as const;
/**
 * The attribute type of the value.
 */
export type OutputValue13AttributeType = ClosedEnum<
  typeof OutputValue13AttributeType
>;

export type Thirteen = {
  /**
   * The UUID identifying the selected status.
   */
  status: string;
  /**
   * The attribute type of the value.
   */
  attributeType: OutputValue13AttributeType;
};

/**
 * The ISO 3166-1 alpha-2 country code representing the country that this phone number belongs to.
 */
export const OutputValueCountryCode = {
  Af: "AF",
  Ax: "AX",
  Al: "AL",
  Dz: "DZ",
  As: "AS",
  Ad: "AD",
  Ao: "AO",
  Ai: "AI",
  Aq: "AQ",
  Ag: "AG",
  Ar: "AR",
  Am: "AM",
  Aw: "AW",
  Au: "AU",
  At: "AT",
  Az: "AZ",
  Bs: "BS",
  Bh: "BH",
  Bd: "BD",
  Bb: "BB",
  By: "BY",
  Be: "BE",
  Bz: "BZ",
  Bj: "BJ",
  Bm: "BM",
  Bt: "BT",
  Bo: "BO",
  Ba: "BA",
  Bw: "BW",
  Bv: "BV",
  Br: "BR",
  Io: "IO",
  Bn: "BN",
  Bg: "BG",
  Bf: "BF",
  Bi: "BI",
  Kh: "KH",
  Cm: "CM",
  Ca: "CA",
  Cv: "CV",
  Ky: "KY",
  Cf: "CF",
  Td: "TD",
  Cl: "CL",
  Cn: "CN",
  Cx: "CX",
  Cc: "CC",
  Co: "CO",
  Km: "KM",
  Cg: "CG",
  Cd: "CD",
  Ck: "CK",
  Cr: "CR",
  Ci: "CI",
  Hr: "HR",
  Cu: "CU",
  Cw: "CW",
  Cy: "CY",
  Cz: "CZ",
  Dk: "DK",
  Dj: "DJ",
  Dm: "DM",
  Do: "DO",
  Ec: "EC",
  Eg: "EG",
  Sv: "SV",
  Gq: "GQ",
  Er: "ER",
  Ee: "EE",
  Et: "ET",
  Fk: "FK",
  Fo: "FO",
  Fj: "FJ",
  Fi: "FI",
  Fr: "FR",
  Gf: "GF",
  Pf: "PF",
  Tf: "TF",
  Ga: "GA",
  Gm: "GM",
  Ge: "GE",
  De: "DE",
  Gh: "GH",
  Gi: "GI",
  Gr: "GR",
  Gl: "GL",
  Gd: "GD",
  Gp: "GP",
  Gu: "GU",
  Gt: "GT",
  Gg: "GG",
  Gn: "GN",
  Gw: "GW",
  Gy: "GY",
  Ht: "HT",
  Hm: "HM",
  Va: "VA",
  Hn: "HN",
  Hk: "HK",
  Hu: "HU",
  Is: "IS",
  In: "IN",
  Id: "ID",
  Ir: "IR",
  Iq: "IQ",
  Ie: "IE",
  Im: "IM",
  Il: "IL",
  It: "IT",
  Jm: "JM",
  Jp: "JP",
  Je: "JE",
  Jo: "JO",
  Kz: "KZ",
  Ke: "KE",
  Ki: "KI",
  Kr: "KR",
  Kw: "KW",
  Kg: "KG",
  La: "LA",
  Lv: "LV",
  Lb: "LB",
  Ls: "LS",
  Lr: "LR",
  Ly: "LY",
  Li: "LI",
  Lt: "LT",
  Lu: "LU",
  Mo: "MO",
  Mk: "MK",
  Mg: "MG",
  Mw: "MW",
  My: "MY",
  Mv: "MV",
  Ml: "ML",
  Mt: "MT",
  Mh: "MH",
  Mq: "MQ",
  Mr: "MR",
  Mu: "MU",
  Yt: "YT",
  Mx: "MX",
  Fm: "FM",
  Md: "MD",
  Mc: "MC",
  Mn: "MN",
  Me: "ME",
  Ms: "MS",
  Ma: "MA",
  Mz: "MZ",
  Mm: "MM",
  Na: "NA",
  Nr: "NR",
  Np: "NP",
  Nl: "NL",
  An: "AN",
  Nc: "NC",
  Nz: "NZ",
  Ni: "NI",
  Ne: "NE",
  Ng: "NG",
  Nu: "NU",
  Nf: "NF",
  Mp: "MP",
  No: "NO",
  Om: "OM",
  Pk: "PK",
  Pw: "PW",
  Ps: "PS",
  Pa: "PA",
  Pg: "PG",
  Py: "PY",
  Pe: "PE",
  Ph: "PH",
  Pn: "PN",
  Pl: "PL",
  Pt: "PT",
  Pr: "PR",
  Qa: "QA",
  Re: "RE",
  Ro: "RO",
  Ru: "RU",
  Rw: "RW",
  Bl: "BL",
  Sh: "SH",
  Kn: "KN",
  Lc: "LC",
  Mf: "MF",
  Pm: "PM",
  Vc: "VC",
  Ws: "WS",
  Sm: "SM",
  St: "ST",
  Sa: "SA",
  Sn: "SN",
  Ss: "SS",
  Rs: "RS",
  Sc: "SC",
  Sl: "SL",
  Sg: "SG",
  Sk: "SK",
  Si: "SI",
  Sb: "SB",
  So: "SO",
  Za: "ZA",
  Gs: "GS",
  Es: "ES",
  Lk: "LK",
  Sd: "SD",
  Sr: "SR",
  Sj: "SJ",
  Sz: "SZ",
  Se: "SE",
  Ch: "CH",
  Sy: "SY",
  Tw: "TW",
  Tj: "TJ",
  Tz: "TZ",
  Th: "TH",
  Tl: "TL",
  Tg: "TG",
  Tk: "TK",
  To: "TO",
  Tt: "TT",
  Tn: "TN",
  Tr: "TR",
  Tm: "TM",
  Tc: "TC",
  Tv: "TV",
  Ug: "UG",
  Ua: "UA",
  Ae: "AE",
  Gb: "GB",
  Us: "US",
  Um: "UM",
  Uy: "UY",
  Uz: "UZ",
  Vu: "VU",
  Ve: "VE",
  Vn: "VN",
  Vg: "VG",
  Vi: "VI",
  Wf: "WF",
  Eh: "EH",
  Ye: "YE",
  Zm: "ZM",
  Zw: "ZW",
} as const;
/**
 * The ISO 3166-1 alpha-2 country code representing the country that this phone number belongs to.
 */
export type OutputValueCountryCode = ClosedEnum<typeof OutputValueCountryCode>;

/**
 * The attribute type of the value.
 */
export const OutputValue12AttributeType = {
  PhoneNumber: "phone-number",
} as const;
/**
 * The attribute type of the value.
 */
export type OutputValue12AttributeType = ClosedEnum<
  typeof OutputValue12AttributeType
>;

export type Twelve = {
  /**
   * The raw, original phone number, as inputted.
   */
  originalPhoneNumber: string;
  /**
   * The ISO 3166-1 alpha-2 country code representing the country that this phone number belongs to.
   */
  countryCode: OutputValueCountryCode;
  phoneNumber: string;
  /**
   * The attribute type of the value.
   */
  attributeType: OutputValue12AttributeType;
};

/**
 * The attribute type of the value.
 */
export const OutputValue11AttributeType = {
  PersonalName: "personal-name",
} as const;
/**
 * The attribute type of the value.
 */
export type OutputValue11AttributeType = ClosedEnum<
  typeof OutputValue11AttributeType
>;

export type Eleven = {
  /**
   * The first name.
   */
  firstName: string;
  /**
   * The last name.
   */
  lastName: string;
  /**
   * The full name.
   */
  fullName: string;
  /**
   * The attribute type of the value.
   */
  attributeType: OutputValue11AttributeType;
};

/**
 * The attribute type of the value.
 */
export const OutputValue10AttributeType = {
  Number: "number",
} as const;
/**
 * The attribute type of the value.
 */
export type OutputValue10AttributeType = ClosedEnum<
  typeof OutputValue10AttributeType
>;

export type Ten = {
  /**
   * Numbers are persisted as 64 bit floats.
   */
  value: number;
  /**
   * The attribute type of the value.
   */
  attributeType: OutputValue10AttributeType;
};

/**
 * The ISO 3166-1 alpha-2 country code for the country this location is in.
 */
export const CountryCode = {
  Af: "AF",
  Ax: "AX",
  Al: "AL",
  Dz: "DZ",
  As: "AS",
  Ad: "AD",
  Ao: "AO",
  Ai: "AI",
  Aq: "AQ",
  Ag: "AG",
  Ar: "AR",
  Am: "AM",
  Aw: "AW",
  Au: "AU",
  At: "AT",
  Az: "AZ",
  Bs: "BS",
  Bh: "BH",
  Bd: "BD",
  Bb: "BB",
  By: "BY",
  Be: "BE",
  Bz: "BZ",
  Bj: "BJ",
  Bm: "BM",
  Bt: "BT",
  Bo: "BO",
  Ba: "BA",
  Bw: "BW",
  Bv: "BV",
  Br: "BR",
  Io: "IO",
  Bn: "BN",
  Bg: "BG",
  Bf: "BF",
  Bi: "BI",
  Kh: "KH",
  Cm: "CM",
  Ca: "CA",
  Cv: "CV",
  Ky: "KY",
  Cf: "CF",
  Td: "TD",
  Cl: "CL",
  Cn: "CN",
  Cx: "CX",
  Cc: "CC",
  Co: "CO",
  Km: "KM",
  Cg: "CG",
  Cd: "CD",
  Ck: "CK",
  Cr: "CR",
  Ci: "CI",
  Hr: "HR",
  Cu: "CU",
  Cw: "CW",
  Cy: "CY",
  Cz: "CZ",
  Dk: "DK",
  Dj: "DJ",
  Dm: "DM",
  Do: "DO",
  Ec: "EC",
  Eg: "EG",
  Sv: "SV",
  Gq: "GQ",
  Er: "ER",
  Ee: "EE",
  Et: "ET",
  Fk: "FK",
  Fo: "FO",
  Fj: "FJ",
  Fi: "FI",
  Fr: "FR",
  Gf: "GF",
  Pf: "PF",
  Tf: "TF",
  Ga: "GA",
  Gm: "GM",
  Ge: "GE",
  De: "DE",
  Gh: "GH",
  Gi: "GI",
  Gr: "GR",
  Gl: "GL",
  Gd: "GD",
  Gp: "GP",
  Gu: "GU",
  Gt: "GT",
  Gg: "GG",
  Gn: "GN",
  Gw: "GW",
  Gy: "GY",
  Ht: "HT",
  Hm: "HM",
  Va: "VA",
  Hn: "HN",
  Hk: "HK",
  Hu: "HU",
  Is: "IS",
  In: "IN",
  Id: "ID",
  Ir: "IR",
  Iq: "IQ",
  Ie: "IE",
  Im: "IM",
  Il: "IL",
  It: "IT",
  Jm: "JM",
  Jp: "JP",
  Je: "JE",
  Jo: "JO",
  Kz: "KZ",
  Ke: "KE",
  Ki: "KI",
  Kr: "KR",
  Kw: "KW",
  Kg: "KG",
  La: "LA",
  Lv: "LV",
  Lb: "LB",
  Ls: "LS",
  Lr: "LR",
  Ly: "LY",
  Li: "LI",
  Lt: "LT",
  Lu: "LU",
  Mo: "MO",
  Mk: "MK",
  Mg: "MG",
  Mw: "MW",
  My: "MY",
  Mv: "MV",
  Ml: "ML",
  Mt: "MT",
  Mh: "MH",
  Mq: "MQ",
  Mr: "MR",
  Mu: "MU",
  Yt: "YT",
  Mx: "MX",
  Fm: "FM",
  Md: "MD",
  Mc: "MC",
  Mn: "MN",
  Me: "ME",
  Ms: "MS",
  Ma: "MA",
  Mz: "MZ",
  Mm: "MM",
  Na: "NA",
  Nr: "NR",
  Np: "NP",
  Nl: "NL",
  An: "AN",
  Nc: "NC",
  Nz: "NZ",
  Ni: "NI",
  Ne: "NE",
  Ng: "NG",
  Nu: "NU",
  Nf: "NF",
  Mp: "MP",
  No: "NO",
  Om: "OM",
  Pk: "PK",
  Pw: "PW",
  Ps: "PS",
  Pa: "PA",
  Pg: "PG",
  Py: "PY",
  Pe: "PE",
  Ph: "PH",
  Pn: "PN",
  Pl: "PL",
  Pt: "PT",
  Pr: "PR",
  Qa: "QA",
  Re: "RE",
  Ro: "RO",
  Ru: "RU",
  Rw: "RW",
  Bl: "BL",
  Sh: "SH",
  Kn: "KN",
  Lc: "LC",
  Mf: "MF",
  Pm: "PM",
  Vc: "VC",
  Ws: "WS",
  Sm: "SM",
  St: "ST",
  Sa: "SA",
  Sn: "SN",
  Ss: "SS",
  Rs: "RS",
  Sc: "SC",
  Sl: "SL",
  Sg: "SG",
  Sk: "SK",
  Si: "SI",
  Sb: "SB",
  So: "SO",
  Za: "ZA",
  Gs: "GS",
  Es: "ES",
  Lk: "LK",
  Sd: "SD",
  Sr: "SR",
  Sj: "SJ",
  Sz: "SZ",
  Se: "SE",
  Ch: "CH",
  Sy: "SY",
  Tw: "TW",
  Tj: "TJ",
  Tz: "TZ",
  Th: "TH",
  Tl: "TL",
  Tg: "TG",
  Tk: "TK",
  To: "TO",
  Tt: "TT",
  Tn: "TN",
  Tr: "TR",
  Tm: "TM",
  Tc: "TC",
  Tv: "TV",
  Ug: "UG",
  Ua: "UA",
  Ae: "AE",
  Gb: "GB",
  Us: "US",
  Um: "UM",
  Uy: "UY",
  Uz: "UZ",
  Vu: "VU",
  Ve: "VE",
  Vn: "VN",
  Vg: "VG",
  Vi: "VI",
  Wf: "WF",
  Eh: "EH",
  Ye: "YE",
  Zm: "ZM",
  Zw: "ZW",
} as const;
/**
 * The ISO 3166-1 alpha-2 country code for the country this location is in.
 */
export type CountryCode = ClosedEnum<typeof CountryCode>;

/**
 * The attribute type of the value.
 */
export const OutputValue9AttributeType = {
  Location: "location",
} as const;
/**
 * The attribute type of the value.
 */
export type OutputValue9AttributeType = ClosedEnum<
  typeof OutputValue9AttributeType
>;

export type Nine = {
  /**
   * The first line of the address. Note that this value is not currently represented in the UI but will be persisted and readable through API calls.
   */
  line1: string | null;
  /**
   * The second line of the address. Note that this value is not currently represented in the UI but will be persisted and readable through API calls.
   */
  line2: string | null;
  /**
   * The third line of the address. Note that this value is not currently represented in the UI but will be persisted and readable through API calls.
   */
  line3: string | null;
  /**
   * The fourth line of the address. Note that this value is not currently represented in the UI but will be persisted and readable through API calls.
   */
  line4: string | null;
  /**
   * The town, neighborhood or area the location is in.
   */
  locality: string | null;
  /**
   * The state, county, province or region that the location is in.
   */
  region: string | null;
  /**
   * The postcode or zip code for the location. Note that this value is not currently represented in the UI but will be persisted and readable through API calls.}
   */
  postcode: string | null;
  /**
   * The ISO 3166-1 alpha-2 country code for the country this location is in.
   */
  countryCode: CountryCode | null;
  /**
   * The latitude of the location. Validated by the regular expression `/^[-+]?([1-8]?\d(\.\d+)?|90(\.0+)?)$/`. Note that this value is not currently represented in the UI but will be persisted and readable through API calls.}
   */
  latitude: string | null;
  /**
   * The longitude of the location. Validated by the regular expression `/^[-+]?(180(\.0+)?|((1[0-7]\d)|([1-9]?\d))(\.\d+)?)$/`
   */
  longitude: string | null;
  /**
   * The attribute type of the value.
   */
  attributeType: OutputValue9AttributeType;
};

/**
 * The type of interaction e.g. calendar or email.
 */
export const InteractionType = {
  CalendarEvent: "calendar-event",
  Call: "call",
  ChatThread: "chat-thread",
  Email: "email",
  InPersonMeeting: "in-person-meeting",
  Meeting: "meeting",
} as const;
/**
 * The type of interaction e.g. calendar or email.
 */
export type InteractionType = ClosedEnum<typeof InteractionType>;

/**
 * The type of actor. [Read more information on actor types here](/docs/actors).
 */
export const OutputValueType = {
  ApiToken: "api-token",
  WorkspaceMember: "workspace-member",
  System: "system",
  App: "app",
} as const;
/**
 * The type of actor. [Read more information on actor types here](/docs/actors).
 */
export type OutputValueType = ClosedEnum<typeof OutputValueType>;

/**
 * The actor that created this value.
 */
export type OwnerActor = {
  /**
   * An ID to identify the actor.
   */
  id?: string | null | undefined;
  /**
   * The type of actor. [Read more information on actor types here](/docs/actors).
   */
  type?: OutputValueType | null | undefined;
};

/**
 * The attribute type of the value.
 */
export const OutputValue8AttributeType = {
  Interaction: "interaction",
} as const;
/**
 * The attribute type of the value.
 */
export type OutputValue8AttributeType = ClosedEnum<
  typeof OutputValue8AttributeType
>;

export type Eight = {
  /**
   * The type of interaction e.g. calendar or email.
   */
  interactionType: InteractionType;
  /**
   * When the interaction occurred.
   */
  interactedAt: Date;
  /**
   * The actor that created this value.
   */
  ownerActor: OwnerActor;
  /**
   * The attribute type of the value.
   */
  attributeType: OutputValue8AttributeType;
};

/**
 * The attribute type of the value.
 */
export const OutputValue7AttributeType = {
  RecordReference: "record-reference",
} as const;
/**
 * The attribute type of the value.
 */
export type OutputValue7AttributeType = ClosedEnum<
  typeof OutputValue7AttributeType
>;

export type Seven = {
  /**
   * A slug identifying the object that the referenced record belongs to.
   */
  targetObject: string;
  /**
   * A UUID to identify the referenced record.
   */
  targetRecordId: string;
  /**
   * The attribute type of the value.
   */
  attributeType: OutputValue7AttributeType;
};

/**
 * The attribute type of the value.
 */
export const OutputValue6AttributeType = {
  EmailAddress: "email-address",
} as const;
/**
 * The attribute type of the value.
 */
export type OutputValue6AttributeType = ClosedEnum<
  typeof OutputValue6AttributeType
>;

export type Six = {
  originalEmailAddress: string;
  emailAddress: string;
  emailDomain: string;
  emailRootDomain: string;
  emailLocalSpecifier: string;
  /**
   * The attribute type of the value.
   */
  attributeType: OutputValue6AttributeType;
};

/**
 * The attribute type of the value.
 */
export const OutputValue5AttributeType = {
  Domain: "domain",
} as const;
/**
 * The attribute type of the value.
 */
export type OutputValue5AttributeType = ClosedEnum<
  typeof OutputValue5AttributeType
>;

export type Five = {
  domain: string;
  rootDomain: string;
  /**
   * The attribute type of the value.
   */
  attributeType: OutputValue5AttributeType;
};

/**
 * The attribute type of the value.
 */
export const OutputValue4AttributeType = {
  Date: "date",
} as const;
/**
 * The attribute type of the value.
 */
export type OutputValue4AttributeType = ClosedEnum<
  typeof OutputValue4AttributeType
>;

export type Four = {
  /**
   * The attribute type of the value.
   */
  attributeType: OutputValue4AttributeType;
  /**
   * A date represents a single calendar year, month and day, independent of timezone. If hours, months, seconds or timezones are provided, they will be trimmed. For example, "2023" and "2023-01" will be coerced into "2023-01-01", and "2023-01-02", "2023-01-02T13:00", "2023-01-02T14:00:00", "2023-01-02T15:00:00.000000000", and "2023-01-02T15:00:00.000000000+02:00" will all be coerced to "2023-01-02". If a timezone is provided that would result in a different calendar date in UTC, the date will be coerced to UTC and then the timezone component will be trimmed. For example, the value "2023-01-02T23:00:00-10:00" will be returned as "2023-01-03". The maximum date is "9999-12-31".
   */
  value: string;
};

/**
 * The ISO4217 currency code representing the currency that the value is stored in.
 */
export const CurrencyCode = {
  Aud: "AUD",
  Brl: "BRL",
  Bel: "BEL",
  Cad: "CAD",
  Cny: "CNY",
  Cop: "COP",
  Czk: "CZK",
  Dkk: "DKK",
  Eur: "EUR",
  Hkd: "HKD",
  Isk: "ISK",
  Inr: "INR",
  Ils: "ILS",
  Jpy: "JPY",
  Krw: "KRW",
  Myr: "MYR",
  Mxn: "MXN",
  Ntd: "NTD",
  Nzd: "NZD",
  Ngn: "NGN",
  Nok: "NOK",
  Xpf: "XPF",
  Pen: "PEN",
  Php: "PHP",
  Pln: "PLN",
  Gbp: "GBP",
  Sar: "SAR",
  Sgd: "SGD",
  Zar: "ZAR",
  Sek: "SEK",
  Chf: "CHF",
  Aed: "AED",
  Usd: "USD",
} as const;
/**
 * The ISO4217 currency code representing the currency that the value is stored in.
 */
export type CurrencyCode = ClosedEnum<typeof CurrencyCode>;

/**
 * The attribute type of the value.
 */
export const OutputValue3AttributeType = {
  Currency: "currency",
} as const;
/**
 * The attribute type of the value.
 */
export type OutputValue3AttributeType = ClosedEnum<
  typeof OutputValue3AttributeType
>;

export type Three = {
  /**
   * A numerical representation of the currency value. A decimal with a max of 4 decimal places.
   */
  currencyValue: number;
  /**
   * The ISO4217 currency code representing the currency that the value is stored in.
   */
  currencyCode?: CurrencyCode | null | undefined;
  /**
   * The attribute type of the value.
   */
  attributeType: OutputValue3AttributeType;
};

/**
 * The attribute type of the value.
 */
export const OutputValueAttributeType = {
  Checkbox: "checkbox",
} as const;
/**
 * The attribute type of the value.
 */
export type OutputValueAttributeType = ClosedEnum<
  typeof OutputValueAttributeType
>;

export type OutputValue2 = {
  /**
   * A boolean representing whether the checkbox is checked or not. The string values 'true' and 'false' are also accepted.
   */
  value: boolean;
  /**
   * The attribute type of the value.
   */
  attributeType: OutputValueAttributeType;
};

/**
 * The type of the referenced actor. [Read more information on actor types here](/docs/actors).
 */
export const OutputValueReferencedActorType = {
  ApiToken: "api-token",
  WorkspaceMember: "workspace-member",
  System: "system",
  App: "app",
} as const;
/**
 * The type of the referenced actor. [Read more information on actor types here](/docs/actors).
 */
export type OutputValueReferencedActorType = ClosedEnum<
  typeof OutputValueReferencedActorType
>;

/**
 * The attribute type of the value.
 */
export const AttributeType = {
  ActorReference: "actor-reference",
} as const;
/**
 * The attribute type of the value.
 */
export type AttributeType = ClosedEnum<typeof AttributeType>;

export type OutputValue1 = {
  /**
   * The type of the referenced actor. [Read more information on actor types here](/docs/actors).
   */
  referencedActorType: OutputValueReferencedActorType;
  /**
   * The ID of the referenced actor.
   */
  referencedActorId: string | null;
  /**
   * The attribute type of the value.
   */
  attributeType: AttributeType;
};

/**
 * A union of possible value types, as returned in response bodies.
 */
export type OutputValue =
  | OutputValue2
  | Four
  | Ten
  | Thirteen
  | Fourteen
  | Fifteen
  | Sixteen
  | Seventeen
  | Eighteen
  | Nineteen
  | OutputValue1
  | Three
  | Five
  | Seven
  | Eight
  | Eleven
  | Twelve
  | Six
  | Nine;

/** @internal */
export const OutputValue19AttributeType$inboundSchema: z.ZodNativeEnum<
  typeof OutputValue19AttributeType
> = z.nativeEnum(OutputValue19AttributeType);

/** @internal */
export const OutputValue19AttributeType$outboundSchema: z.ZodNativeEnum<
  typeof OutputValue19AttributeType
> = OutputValue19AttributeType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputValue19AttributeType$ {
  /** @deprecated use `OutputValue19AttributeType$inboundSchema` instead. */
  export const inboundSchema = OutputValue19AttributeType$inboundSchema;
  /** @deprecated use `OutputValue19AttributeType$outboundSchema` instead. */
  export const outboundSchema = OutputValue19AttributeType$outboundSchema;
}

/** @internal */
export const Nineteen$inboundSchema: z.ZodType<
  Nineteen,
  z.ZodTypeDef,
  unknown
> = z.object({
  attribute_type: OutputValue19AttributeType$inboundSchema,
  value: z.string().datetime({ offset: true }).transform(v => new Date(v)),
}).transform((v) => {
  return remap$(v, {
    "attribute_type": "attributeType",
  });
});

/** @internal */
export type Nineteen$Outbound = {
  attribute_type: string;
  value: string;
};

/** @internal */
export const Nineteen$outboundSchema: z.ZodType<
  Nineteen$Outbound,
  z.ZodTypeDef,
  Nineteen
> = z.object({
  attributeType: OutputValue19AttributeType$outboundSchema,
  value: z.date().transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    attributeType: "attribute_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Nineteen$ {
  /** @deprecated use `Nineteen$inboundSchema` instead. */
  export const inboundSchema = Nineteen$inboundSchema;
  /** @deprecated use `Nineteen$outboundSchema` instead. */
  export const outboundSchema = Nineteen$outboundSchema;
  /** @deprecated use `Nineteen$Outbound` instead. */
  export type Outbound = Nineteen$Outbound;
}

export function nineteenToJSON(nineteen: Nineteen): string {
  return JSON.stringify(Nineteen$outboundSchema.parse(nineteen));
}

export function nineteenFromJSON(
  jsonString: string,
): SafeParseResult<Nineteen, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Nineteen$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Nineteen' from JSON`,
  );
}

/** @internal */
export const OutputValue18AttributeType$inboundSchema: z.ZodNativeEnum<
  typeof OutputValue18AttributeType
> = z.nativeEnum(OutputValue18AttributeType);

/** @internal */
export const OutputValue18AttributeType$outboundSchema: z.ZodNativeEnum<
  typeof OutputValue18AttributeType
> = OutputValue18AttributeType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputValue18AttributeType$ {
  /** @deprecated use `OutputValue18AttributeType$inboundSchema` instead. */
  export const inboundSchema = OutputValue18AttributeType$inboundSchema;
  /** @deprecated use `OutputValue18AttributeType$outboundSchema` instead. */
  export const outboundSchema = OutputValue18AttributeType$outboundSchema;
}

/** @internal */
export const Eighteen$inboundSchema: z.ZodType<
  Eighteen,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string(),
  attribute_type: OutputValue18AttributeType$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "attribute_type": "attributeType",
  });
});

/** @internal */
export type Eighteen$Outbound = {
  value: string;
  attribute_type: string;
};

/** @internal */
export const Eighteen$outboundSchema: z.ZodType<
  Eighteen$Outbound,
  z.ZodTypeDef,
  Eighteen
> = z.object({
  value: z.string(),
  attributeType: OutputValue18AttributeType$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    attributeType: "attribute_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Eighteen$ {
  /** @deprecated use `Eighteen$inboundSchema` instead. */
  export const inboundSchema = Eighteen$inboundSchema;
  /** @deprecated use `Eighteen$outboundSchema` instead. */
  export const outboundSchema = Eighteen$outboundSchema;
  /** @deprecated use `Eighteen$Outbound` instead. */
  export type Outbound = Eighteen$Outbound;
}

export function eighteenToJSON(eighteen: Eighteen): string {
  return JSON.stringify(Eighteen$outboundSchema.parse(eighteen));
}

export function eighteenFromJSON(
  jsonString: string,
): SafeParseResult<Eighteen, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Eighteen$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Eighteen' from JSON`,
  );
}

/** @internal */
export const OutputValue17AttributeType$inboundSchema: z.ZodNativeEnum<
  typeof OutputValue17AttributeType
> = z.nativeEnum(OutputValue17AttributeType);

/** @internal */
export const OutputValue17AttributeType$outboundSchema: z.ZodNativeEnum<
  typeof OutputValue17AttributeType
> = OutputValue17AttributeType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputValue17AttributeType$ {
  /** @deprecated use `OutputValue17AttributeType$inboundSchema` instead. */
  export const inboundSchema = OutputValue17AttributeType$inboundSchema;
  /** @deprecated use `OutputValue17AttributeType$outboundSchema` instead. */
  export const outboundSchema = OutputValue17AttributeType$outboundSchema;
}

/** @internal */
export const Seventeen$inboundSchema: z.ZodType<
  Seventeen,
  z.ZodTypeDef,
  unknown
> = z.object({
  option: SelectOption$inboundSchema,
  attribute_type: OutputValue17AttributeType$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "attribute_type": "attributeType",
  });
});

/** @internal */
export type Seventeen$Outbound = {
  option: SelectOption$Outbound;
  attribute_type: string;
};

/** @internal */
export const Seventeen$outboundSchema: z.ZodType<
  Seventeen$Outbound,
  z.ZodTypeDef,
  Seventeen
> = z.object({
  option: SelectOption$outboundSchema,
  attributeType: OutputValue17AttributeType$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    attributeType: "attribute_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Seventeen$ {
  /** @deprecated use `Seventeen$inboundSchema` instead. */
  export const inboundSchema = Seventeen$inboundSchema;
  /** @deprecated use `Seventeen$outboundSchema` instead. */
  export const outboundSchema = Seventeen$outboundSchema;
  /** @deprecated use `Seventeen$Outbound` instead. */
  export type Outbound = Seventeen$Outbound;
}

export function seventeenToJSON(seventeen: Seventeen): string {
  return JSON.stringify(Seventeen$outboundSchema.parse(seventeen));
}

export function seventeenFromJSON(
  jsonString: string,
): SafeParseResult<Seventeen, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Seventeen$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Seventeen' from JSON`,
  );
}

/** @internal */
export const OutputValue16AttributeType$inboundSchema: z.ZodNativeEnum<
  typeof OutputValue16AttributeType
> = z.nativeEnum(OutputValue16AttributeType);

/** @internal */
export const OutputValue16AttributeType$outboundSchema: z.ZodNativeEnum<
  typeof OutputValue16AttributeType
> = OutputValue16AttributeType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputValue16AttributeType$ {
  /** @deprecated use `OutputValue16AttributeType$inboundSchema` instead. */
  export const inboundSchema = OutputValue16AttributeType$inboundSchema;
  /** @deprecated use `OutputValue16AttributeType$outboundSchema` instead. */
  export const outboundSchema = OutputValue16AttributeType$outboundSchema;
}

/** @internal */
export const Sixteen$inboundSchema: z.ZodType<Sixteen, z.ZodTypeDef, unknown> =
  z.object({
    option: z.string(),
    attribute_type: OutputValue16AttributeType$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "attribute_type": "attributeType",
    });
  });

/** @internal */
export type Sixteen$Outbound = {
  option: string;
  attribute_type: string;
};

/** @internal */
export const Sixteen$outboundSchema: z.ZodType<
  Sixteen$Outbound,
  z.ZodTypeDef,
  Sixteen
> = z.object({
  option: z.string(),
  attributeType: OutputValue16AttributeType$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    attributeType: "attribute_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Sixteen$ {
  /** @deprecated use `Sixteen$inboundSchema` instead. */
  export const inboundSchema = Sixteen$inboundSchema;
  /** @deprecated use `Sixteen$outboundSchema` instead. */
  export const outboundSchema = Sixteen$outboundSchema;
  /** @deprecated use `Sixteen$Outbound` instead. */
  export type Outbound = Sixteen$Outbound;
}

export function sixteenToJSON(sixteen: Sixteen): string {
  return JSON.stringify(Sixteen$outboundSchema.parse(sixteen));
}

export function sixteenFromJSON(
  jsonString: string,
): SafeParseResult<Sixteen, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Sixteen$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Sixteen' from JSON`,
  );
}

/** @internal */
export const OutputValue15AttributeType$inboundSchema: z.ZodNativeEnum<
  typeof OutputValue15AttributeType
> = z.nativeEnum(OutputValue15AttributeType);

/** @internal */
export const OutputValue15AttributeType$outboundSchema: z.ZodNativeEnum<
  typeof OutputValue15AttributeType
> = OutputValue15AttributeType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputValue15AttributeType$ {
  /** @deprecated use `OutputValue15AttributeType$inboundSchema` instead. */
  export const inboundSchema = OutputValue15AttributeType$inboundSchema;
  /** @deprecated use `OutputValue15AttributeType$outboundSchema` instead. */
  export const outboundSchema = OutputValue15AttributeType$outboundSchema;
}

/** @internal */
export const Fifteen$inboundSchema: z.ZodType<Fifteen, z.ZodTypeDef, unknown> =
  z.object({
    value: z.number(),
    attribute_type: OutputValue15AttributeType$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "attribute_type": "attributeType",
    });
  });

/** @internal */
export type Fifteen$Outbound = {
  value: number;
  attribute_type: string;
};

/** @internal */
export const Fifteen$outboundSchema: z.ZodType<
  Fifteen$Outbound,
  z.ZodTypeDef,
  Fifteen
> = z.object({
  value: z.number(),
  attributeType: OutputValue15AttributeType$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    attributeType: "attribute_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Fifteen$ {
  /** @deprecated use `Fifteen$inboundSchema` instead. */
  export const inboundSchema = Fifteen$inboundSchema;
  /** @deprecated use `Fifteen$outboundSchema` instead. */
  export const outboundSchema = Fifteen$outboundSchema;
  /** @deprecated use `Fifteen$Outbound` instead. */
  export type Outbound = Fifteen$Outbound;
}

export function fifteenToJSON(fifteen: Fifteen): string {
  return JSON.stringify(Fifteen$outboundSchema.parse(fifteen));
}

export function fifteenFromJSON(
  jsonString: string,
): SafeParseResult<Fifteen, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Fifteen$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Fifteen' from JSON`,
  );
}

/** @internal */
export const OutputValue14AttributeType$inboundSchema: z.ZodNativeEnum<
  typeof OutputValue14AttributeType
> = z.nativeEnum(OutputValue14AttributeType);

/** @internal */
export const OutputValue14AttributeType$outboundSchema: z.ZodNativeEnum<
  typeof OutputValue14AttributeType
> = OutputValue14AttributeType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputValue14AttributeType$ {
  /** @deprecated use `OutputValue14AttributeType$inboundSchema` instead. */
  export const inboundSchema = OutputValue14AttributeType$inboundSchema;
  /** @deprecated use `OutputValue14AttributeType$outboundSchema` instead. */
  export const outboundSchema = OutputValue14AttributeType$outboundSchema;
}

/** @internal */
export const Fourteen$inboundSchema: z.ZodType<
  Fourteen,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: Status$inboundSchema,
  attribute_type: OutputValue14AttributeType$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "attribute_type": "attributeType",
  });
});

/** @internal */
export type Fourteen$Outbound = {
  status: Status$Outbound;
  attribute_type: string;
};

/** @internal */
export const Fourteen$outboundSchema: z.ZodType<
  Fourteen$Outbound,
  z.ZodTypeDef,
  Fourteen
> = z.object({
  status: Status$outboundSchema,
  attributeType: OutputValue14AttributeType$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    attributeType: "attribute_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Fourteen$ {
  /** @deprecated use `Fourteen$inboundSchema` instead. */
  export const inboundSchema = Fourteen$inboundSchema;
  /** @deprecated use `Fourteen$outboundSchema` instead. */
  export const outboundSchema = Fourteen$outboundSchema;
  /** @deprecated use `Fourteen$Outbound` instead. */
  export type Outbound = Fourteen$Outbound;
}

export function fourteenToJSON(fourteen: Fourteen): string {
  return JSON.stringify(Fourteen$outboundSchema.parse(fourteen));
}

export function fourteenFromJSON(
  jsonString: string,
): SafeParseResult<Fourteen, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Fourteen$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Fourteen' from JSON`,
  );
}

/** @internal */
export const OutputValue13AttributeType$inboundSchema: z.ZodNativeEnum<
  typeof OutputValue13AttributeType
> = z.nativeEnum(OutputValue13AttributeType);

/** @internal */
export const OutputValue13AttributeType$outboundSchema: z.ZodNativeEnum<
  typeof OutputValue13AttributeType
> = OutputValue13AttributeType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputValue13AttributeType$ {
  /** @deprecated use `OutputValue13AttributeType$inboundSchema` instead. */
  export const inboundSchema = OutputValue13AttributeType$inboundSchema;
  /** @deprecated use `OutputValue13AttributeType$outboundSchema` instead. */
  export const outboundSchema = OutputValue13AttributeType$outboundSchema;
}

/** @internal */
export const Thirteen$inboundSchema: z.ZodType<
  Thirteen,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: z.string(),
  attribute_type: OutputValue13AttributeType$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "attribute_type": "attributeType",
  });
});

/** @internal */
export type Thirteen$Outbound = {
  status: string;
  attribute_type: string;
};

/** @internal */
export const Thirteen$outboundSchema: z.ZodType<
  Thirteen$Outbound,
  z.ZodTypeDef,
  Thirteen
> = z.object({
  status: z.string(),
  attributeType: OutputValue13AttributeType$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    attributeType: "attribute_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Thirteen$ {
  /** @deprecated use `Thirteen$inboundSchema` instead. */
  export const inboundSchema = Thirteen$inboundSchema;
  /** @deprecated use `Thirteen$outboundSchema` instead. */
  export const outboundSchema = Thirteen$outboundSchema;
  /** @deprecated use `Thirteen$Outbound` instead. */
  export type Outbound = Thirteen$Outbound;
}

export function thirteenToJSON(thirteen: Thirteen): string {
  return JSON.stringify(Thirteen$outboundSchema.parse(thirteen));
}

export function thirteenFromJSON(
  jsonString: string,
): SafeParseResult<Thirteen, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Thirteen$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Thirteen' from JSON`,
  );
}

/** @internal */
export const OutputValueCountryCode$inboundSchema: z.ZodNativeEnum<
  typeof OutputValueCountryCode
> = z.nativeEnum(OutputValueCountryCode);

/** @internal */
export const OutputValueCountryCode$outboundSchema: z.ZodNativeEnum<
  typeof OutputValueCountryCode
> = OutputValueCountryCode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputValueCountryCode$ {
  /** @deprecated use `OutputValueCountryCode$inboundSchema` instead. */
  export const inboundSchema = OutputValueCountryCode$inboundSchema;
  /** @deprecated use `OutputValueCountryCode$outboundSchema` instead. */
  export const outboundSchema = OutputValueCountryCode$outboundSchema;
}

/** @internal */
export const OutputValue12AttributeType$inboundSchema: z.ZodNativeEnum<
  typeof OutputValue12AttributeType
> = z.nativeEnum(OutputValue12AttributeType);

/** @internal */
export const OutputValue12AttributeType$outboundSchema: z.ZodNativeEnum<
  typeof OutputValue12AttributeType
> = OutputValue12AttributeType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputValue12AttributeType$ {
  /** @deprecated use `OutputValue12AttributeType$inboundSchema` instead. */
  export const inboundSchema = OutputValue12AttributeType$inboundSchema;
  /** @deprecated use `OutputValue12AttributeType$outboundSchema` instead. */
  export const outboundSchema = OutputValue12AttributeType$outboundSchema;
}

/** @internal */
export const Twelve$inboundSchema: z.ZodType<Twelve, z.ZodTypeDef, unknown> = z
  .object({
    original_phone_number: z.string(),
    country_code: OutputValueCountryCode$inboundSchema,
    phone_number: z.string(),
    attribute_type: OutputValue12AttributeType$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "original_phone_number": "originalPhoneNumber",
      "country_code": "countryCode",
      "phone_number": "phoneNumber",
      "attribute_type": "attributeType",
    });
  });

/** @internal */
export type Twelve$Outbound = {
  original_phone_number: string;
  country_code: string;
  phone_number: string;
  attribute_type: string;
};

/** @internal */
export const Twelve$outboundSchema: z.ZodType<
  Twelve$Outbound,
  z.ZodTypeDef,
  Twelve
> = z.object({
  originalPhoneNumber: z.string(),
  countryCode: OutputValueCountryCode$outboundSchema,
  phoneNumber: z.string(),
  attributeType: OutputValue12AttributeType$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    originalPhoneNumber: "original_phone_number",
    countryCode: "country_code",
    phoneNumber: "phone_number",
    attributeType: "attribute_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Twelve$ {
  /** @deprecated use `Twelve$inboundSchema` instead. */
  export const inboundSchema = Twelve$inboundSchema;
  /** @deprecated use `Twelve$outboundSchema` instead. */
  export const outboundSchema = Twelve$outboundSchema;
  /** @deprecated use `Twelve$Outbound` instead. */
  export type Outbound = Twelve$Outbound;
}

export function twelveToJSON(twelve: Twelve): string {
  return JSON.stringify(Twelve$outboundSchema.parse(twelve));
}

export function twelveFromJSON(
  jsonString: string,
): SafeParseResult<Twelve, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Twelve$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Twelve' from JSON`,
  );
}

/** @internal */
export const OutputValue11AttributeType$inboundSchema: z.ZodNativeEnum<
  typeof OutputValue11AttributeType
> = z.nativeEnum(OutputValue11AttributeType);

/** @internal */
export const OutputValue11AttributeType$outboundSchema: z.ZodNativeEnum<
  typeof OutputValue11AttributeType
> = OutputValue11AttributeType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputValue11AttributeType$ {
  /** @deprecated use `OutputValue11AttributeType$inboundSchema` instead. */
  export const inboundSchema = OutputValue11AttributeType$inboundSchema;
  /** @deprecated use `OutputValue11AttributeType$outboundSchema` instead. */
  export const outboundSchema = OutputValue11AttributeType$outboundSchema;
}

/** @internal */
export const Eleven$inboundSchema: z.ZodType<Eleven, z.ZodTypeDef, unknown> = z
  .object({
    first_name: z.string(),
    last_name: z.string(),
    full_name: z.string(),
    attribute_type: OutputValue11AttributeType$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "first_name": "firstName",
      "last_name": "lastName",
      "full_name": "fullName",
      "attribute_type": "attributeType",
    });
  });

/** @internal */
export type Eleven$Outbound = {
  first_name: string;
  last_name: string;
  full_name: string;
  attribute_type: string;
};

/** @internal */
export const Eleven$outboundSchema: z.ZodType<
  Eleven$Outbound,
  z.ZodTypeDef,
  Eleven
> = z.object({
  firstName: z.string(),
  lastName: z.string(),
  fullName: z.string(),
  attributeType: OutputValue11AttributeType$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    lastName: "last_name",
    fullName: "full_name",
    attributeType: "attribute_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Eleven$ {
  /** @deprecated use `Eleven$inboundSchema` instead. */
  export const inboundSchema = Eleven$inboundSchema;
  /** @deprecated use `Eleven$outboundSchema` instead. */
  export const outboundSchema = Eleven$outboundSchema;
  /** @deprecated use `Eleven$Outbound` instead. */
  export type Outbound = Eleven$Outbound;
}

export function elevenToJSON(eleven: Eleven): string {
  return JSON.stringify(Eleven$outboundSchema.parse(eleven));
}

export function elevenFromJSON(
  jsonString: string,
): SafeParseResult<Eleven, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Eleven$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Eleven' from JSON`,
  );
}

/** @internal */
export const OutputValue10AttributeType$inboundSchema: z.ZodNativeEnum<
  typeof OutputValue10AttributeType
> = z.nativeEnum(OutputValue10AttributeType);

/** @internal */
export const OutputValue10AttributeType$outboundSchema: z.ZodNativeEnum<
  typeof OutputValue10AttributeType
> = OutputValue10AttributeType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputValue10AttributeType$ {
  /** @deprecated use `OutputValue10AttributeType$inboundSchema` instead. */
  export const inboundSchema = OutputValue10AttributeType$inboundSchema;
  /** @deprecated use `OutputValue10AttributeType$outboundSchema` instead. */
  export const outboundSchema = OutputValue10AttributeType$outboundSchema;
}

/** @internal */
export const Ten$inboundSchema: z.ZodType<Ten, z.ZodTypeDef, unknown> = z
  .object({
    value: z.number(),
    attribute_type: OutputValue10AttributeType$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "attribute_type": "attributeType",
    });
  });

/** @internal */
export type Ten$Outbound = {
  value: number;
  attribute_type: string;
};

/** @internal */
export const Ten$outboundSchema: z.ZodType<Ten$Outbound, z.ZodTypeDef, Ten> = z
  .object({
    value: z.number(),
    attributeType: OutputValue10AttributeType$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      attributeType: "attribute_type",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Ten$ {
  /** @deprecated use `Ten$inboundSchema` instead. */
  export const inboundSchema = Ten$inboundSchema;
  /** @deprecated use `Ten$outboundSchema` instead. */
  export const outboundSchema = Ten$outboundSchema;
  /** @deprecated use `Ten$Outbound` instead. */
  export type Outbound = Ten$Outbound;
}

export function tenToJSON(ten: Ten): string {
  return JSON.stringify(Ten$outboundSchema.parse(ten));
}

export function tenFromJSON(
  jsonString: string,
): SafeParseResult<Ten, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Ten$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Ten' from JSON`,
  );
}

/** @internal */
export const CountryCode$inboundSchema: z.ZodNativeEnum<typeof CountryCode> = z
  .nativeEnum(CountryCode);

/** @internal */
export const CountryCode$outboundSchema: z.ZodNativeEnum<typeof CountryCode> =
  CountryCode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CountryCode$ {
  /** @deprecated use `CountryCode$inboundSchema` instead. */
  export const inboundSchema = CountryCode$inboundSchema;
  /** @deprecated use `CountryCode$outboundSchema` instead. */
  export const outboundSchema = CountryCode$outboundSchema;
}

/** @internal */
export const OutputValue9AttributeType$inboundSchema: z.ZodNativeEnum<
  typeof OutputValue9AttributeType
> = z.nativeEnum(OutputValue9AttributeType);

/** @internal */
export const OutputValue9AttributeType$outboundSchema: z.ZodNativeEnum<
  typeof OutputValue9AttributeType
> = OutputValue9AttributeType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputValue9AttributeType$ {
  /** @deprecated use `OutputValue9AttributeType$inboundSchema` instead. */
  export const inboundSchema = OutputValue9AttributeType$inboundSchema;
  /** @deprecated use `OutputValue9AttributeType$outboundSchema` instead. */
  export const outboundSchema = OutputValue9AttributeType$outboundSchema;
}

/** @internal */
export const Nine$inboundSchema: z.ZodType<Nine, z.ZodTypeDef, unknown> = z
  .object({
    line_1: z.nullable(z.string()),
    line_2: z.nullable(z.string()),
    line_3: z.nullable(z.string()),
    line_4: z.nullable(z.string()),
    locality: z.nullable(z.string()),
    region: z.nullable(z.string()),
    postcode: z.nullable(z.string()),
    country_code: z.nullable(CountryCode$inboundSchema),
    latitude: z.nullable(z.string()),
    longitude: z.nullable(z.string()),
    attribute_type: OutputValue9AttributeType$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "line_1": "line1",
      "line_2": "line2",
      "line_3": "line3",
      "line_4": "line4",
      "country_code": "countryCode",
      "attribute_type": "attributeType",
    });
  });

/** @internal */
export type Nine$Outbound = {
  line_1: string | null;
  line_2: string | null;
  line_3: string | null;
  line_4: string | null;
  locality: string | null;
  region: string | null;
  postcode: string | null;
  country_code: string | null;
  latitude: string | null;
  longitude: string | null;
  attribute_type: string;
};

/** @internal */
export const Nine$outboundSchema: z.ZodType<Nine$Outbound, z.ZodTypeDef, Nine> =
  z.object({
    line1: z.nullable(z.string()),
    line2: z.nullable(z.string()),
    line3: z.nullable(z.string()),
    line4: z.nullable(z.string()),
    locality: z.nullable(z.string()),
    region: z.nullable(z.string()),
    postcode: z.nullable(z.string()),
    countryCode: z.nullable(CountryCode$outboundSchema),
    latitude: z.nullable(z.string()),
    longitude: z.nullable(z.string()),
    attributeType: OutputValue9AttributeType$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      line1: "line_1",
      line2: "line_2",
      line3: "line_3",
      line4: "line_4",
      countryCode: "country_code",
      attributeType: "attribute_type",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Nine$ {
  /** @deprecated use `Nine$inboundSchema` instead. */
  export const inboundSchema = Nine$inboundSchema;
  /** @deprecated use `Nine$outboundSchema` instead. */
  export const outboundSchema = Nine$outboundSchema;
  /** @deprecated use `Nine$Outbound` instead. */
  export type Outbound = Nine$Outbound;
}

export function nineToJSON(nine: Nine): string {
  return JSON.stringify(Nine$outboundSchema.parse(nine));
}

export function nineFromJSON(
  jsonString: string,
): SafeParseResult<Nine, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Nine$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Nine' from JSON`,
  );
}

/** @internal */
export const InteractionType$inboundSchema: z.ZodNativeEnum<
  typeof InteractionType
> = z.nativeEnum(InteractionType);

/** @internal */
export const InteractionType$outboundSchema: z.ZodNativeEnum<
  typeof InteractionType
> = InteractionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InteractionType$ {
  /** @deprecated use `InteractionType$inboundSchema` instead. */
  export const inboundSchema = InteractionType$inboundSchema;
  /** @deprecated use `InteractionType$outboundSchema` instead. */
  export const outboundSchema = InteractionType$outboundSchema;
}

/** @internal */
export const OutputValueType$inboundSchema: z.ZodNativeEnum<
  typeof OutputValueType
> = z.nativeEnum(OutputValueType);

/** @internal */
export const OutputValueType$outboundSchema: z.ZodNativeEnum<
  typeof OutputValueType
> = OutputValueType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputValueType$ {
  /** @deprecated use `OutputValueType$inboundSchema` instead. */
  export const inboundSchema = OutputValueType$inboundSchema;
  /** @deprecated use `OutputValueType$outboundSchema` instead. */
  export const outboundSchema = OutputValueType$outboundSchema;
}

/** @internal */
export const OwnerActor$inboundSchema: z.ZodType<
  OwnerActor,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(OutputValueType$inboundSchema).optional(),
});

/** @internal */
export type OwnerActor$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const OwnerActor$outboundSchema: z.ZodType<
  OwnerActor$Outbound,
  z.ZodTypeDef,
  OwnerActor
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(OutputValueType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OwnerActor$ {
  /** @deprecated use `OwnerActor$inboundSchema` instead. */
  export const inboundSchema = OwnerActor$inboundSchema;
  /** @deprecated use `OwnerActor$outboundSchema` instead. */
  export const outboundSchema = OwnerActor$outboundSchema;
  /** @deprecated use `OwnerActor$Outbound` instead. */
  export type Outbound = OwnerActor$Outbound;
}

export function ownerActorToJSON(ownerActor: OwnerActor): string {
  return JSON.stringify(OwnerActor$outboundSchema.parse(ownerActor));
}

export function ownerActorFromJSON(
  jsonString: string,
): SafeParseResult<OwnerActor, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OwnerActor$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OwnerActor' from JSON`,
  );
}

/** @internal */
export const OutputValue8AttributeType$inboundSchema: z.ZodNativeEnum<
  typeof OutputValue8AttributeType
> = z.nativeEnum(OutputValue8AttributeType);

/** @internal */
export const OutputValue8AttributeType$outboundSchema: z.ZodNativeEnum<
  typeof OutputValue8AttributeType
> = OutputValue8AttributeType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputValue8AttributeType$ {
  /** @deprecated use `OutputValue8AttributeType$inboundSchema` instead. */
  export const inboundSchema = OutputValue8AttributeType$inboundSchema;
  /** @deprecated use `OutputValue8AttributeType$outboundSchema` instead. */
  export const outboundSchema = OutputValue8AttributeType$outboundSchema;
}

/** @internal */
export const Eight$inboundSchema: z.ZodType<Eight, z.ZodTypeDef, unknown> = z
  .object({
    interaction_type: InteractionType$inboundSchema,
    interacted_at: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    owner_actor: z.lazy(() => OwnerActor$inboundSchema),
    attribute_type: OutputValue8AttributeType$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "interaction_type": "interactionType",
      "interacted_at": "interactedAt",
      "owner_actor": "ownerActor",
      "attribute_type": "attributeType",
    });
  });

/** @internal */
export type Eight$Outbound = {
  interaction_type: string;
  interacted_at: string;
  owner_actor: OwnerActor$Outbound;
  attribute_type: string;
};

/** @internal */
export const Eight$outboundSchema: z.ZodType<
  Eight$Outbound,
  z.ZodTypeDef,
  Eight
> = z.object({
  interactionType: InteractionType$outboundSchema,
  interactedAt: z.date().transform(v => v.toISOString()),
  ownerActor: z.lazy(() => OwnerActor$outboundSchema),
  attributeType: OutputValue8AttributeType$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    interactionType: "interaction_type",
    interactedAt: "interacted_at",
    ownerActor: "owner_actor",
    attributeType: "attribute_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Eight$ {
  /** @deprecated use `Eight$inboundSchema` instead. */
  export const inboundSchema = Eight$inboundSchema;
  /** @deprecated use `Eight$outboundSchema` instead. */
  export const outboundSchema = Eight$outboundSchema;
  /** @deprecated use `Eight$Outbound` instead. */
  export type Outbound = Eight$Outbound;
}

export function eightToJSON(eight: Eight): string {
  return JSON.stringify(Eight$outboundSchema.parse(eight));
}

export function eightFromJSON(
  jsonString: string,
): SafeParseResult<Eight, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Eight$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Eight' from JSON`,
  );
}

/** @internal */
export const OutputValue7AttributeType$inboundSchema: z.ZodNativeEnum<
  typeof OutputValue7AttributeType
> = z.nativeEnum(OutputValue7AttributeType);

/** @internal */
export const OutputValue7AttributeType$outboundSchema: z.ZodNativeEnum<
  typeof OutputValue7AttributeType
> = OutputValue7AttributeType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputValue7AttributeType$ {
  /** @deprecated use `OutputValue7AttributeType$inboundSchema` instead. */
  export const inboundSchema = OutputValue7AttributeType$inboundSchema;
  /** @deprecated use `OutputValue7AttributeType$outboundSchema` instead. */
  export const outboundSchema = OutputValue7AttributeType$outboundSchema;
}

/** @internal */
export const Seven$inboundSchema: z.ZodType<Seven, z.ZodTypeDef, unknown> = z
  .object({
    target_object: z.string(),
    target_record_id: z.string(),
    attribute_type: OutputValue7AttributeType$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "target_object": "targetObject",
      "target_record_id": "targetRecordId",
      "attribute_type": "attributeType",
    });
  });

/** @internal */
export type Seven$Outbound = {
  target_object: string;
  target_record_id: string;
  attribute_type: string;
};

/** @internal */
export const Seven$outboundSchema: z.ZodType<
  Seven$Outbound,
  z.ZodTypeDef,
  Seven
> = z.object({
  targetObject: z.string(),
  targetRecordId: z.string(),
  attributeType: OutputValue7AttributeType$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    targetObject: "target_object",
    targetRecordId: "target_record_id",
    attributeType: "attribute_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Seven$ {
  /** @deprecated use `Seven$inboundSchema` instead. */
  export const inboundSchema = Seven$inboundSchema;
  /** @deprecated use `Seven$outboundSchema` instead. */
  export const outboundSchema = Seven$outboundSchema;
  /** @deprecated use `Seven$Outbound` instead. */
  export type Outbound = Seven$Outbound;
}

export function sevenToJSON(seven: Seven): string {
  return JSON.stringify(Seven$outboundSchema.parse(seven));
}

export function sevenFromJSON(
  jsonString: string,
): SafeParseResult<Seven, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Seven$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Seven' from JSON`,
  );
}

/** @internal */
export const OutputValue6AttributeType$inboundSchema: z.ZodNativeEnum<
  typeof OutputValue6AttributeType
> = z.nativeEnum(OutputValue6AttributeType);

/** @internal */
export const OutputValue6AttributeType$outboundSchema: z.ZodNativeEnum<
  typeof OutputValue6AttributeType
> = OutputValue6AttributeType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputValue6AttributeType$ {
  /** @deprecated use `OutputValue6AttributeType$inboundSchema` instead. */
  export const inboundSchema = OutputValue6AttributeType$inboundSchema;
  /** @deprecated use `OutputValue6AttributeType$outboundSchema` instead. */
  export const outboundSchema = OutputValue6AttributeType$outboundSchema;
}

/** @internal */
export const Six$inboundSchema: z.ZodType<Six, z.ZodTypeDef, unknown> = z
  .object({
    original_email_address: z.string(),
    email_address: z.string(),
    email_domain: z.string(),
    email_root_domain: z.string(),
    email_local_specifier: z.string(),
    attribute_type: OutputValue6AttributeType$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "original_email_address": "originalEmailAddress",
      "email_address": "emailAddress",
      "email_domain": "emailDomain",
      "email_root_domain": "emailRootDomain",
      "email_local_specifier": "emailLocalSpecifier",
      "attribute_type": "attributeType",
    });
  });

/** @internal */
export type Six$Outbound = {
  original_email_address: string;
  email_address: string;
  email_domain: string;
  email_root_domain: string;
  email_local_specifier: string;
  attribute_type: string;
};

/** @internal */
export const Six$outboundSchema: z.ZodType<Six$Outbound, z.ZodTypeDef, Six> = z
  .object({
    originalEmailAddress: z.string(),
    emailAddress: z.string(),
    emailDomain: z.string(),
    emailRootDomain: z.string(),
    emailLocalSpecifier: z.string(),
    attributeType: OutputValue6AttributeType$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      originalEmailAddress: "original_email_address",
      emailAddress: "email_address",
      emailDomain: "email_domain",
      emailRootDomain: "email_root_domain",
      emailLocalSpecifier: "email_local_specifier",
      attributeType: "attribute_type",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Six$ {
  /** @deprecated use `Six$inboundSchema` instead. */
  export const inboundSchema = Six$inboundSchema;
  /** @deprecated use `Six$outboundSchema` instead. */
  export const outboundSchema = Six$outboundSchema;
  /** @deprecated use `Six$Outbound` instead. */
  export type Outbound = Six$Outbound;
}

export function sixToJSON(six: Six): string {
  return JSON.stringify(Six$outboundSchema.parse(six));
}

export function sixFromJSON(
  jsonString: string,
): SafeParseResult<Six, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Six$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Six' from JSON`,
  );
}

/** @internal */
export const OutputValue5AttributeType$inboundSchema: z.ZodNativeEnum<
  typeof OutputValue5AttributeType
> = z.nativeEnum(OutputValue5AttributeType);

/** @internal */
export const OutputValue5AttributeType$outboundSchema: z.ZodNativeEnum<
  typeof OutputValue5AttributeType
> = OutputValue5AttributeType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputValue5AttributeType$ {
  /** @deprecated use `OutputValue5AttributeType$inboundSchema` instead. */
  export const inboundSchema = OutputValue5AttributeType$inboundSchema;
  /** @deprecated use `OutputValue5AttributeType$outboundSchema` instead. */
  export const outboundSchema = OutputValue5AttributeType$outboundSchema;
}

/** @internal */
export const Five$inboundSchema: z.ZodType<Five, z.ZodTypeDef, unknown> = z
  .object({
    domain: z.string(),
    root_domain: z.string(),
    attribute_type: OutputValue5AttributeType$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "root_domain": "rootDomain",
      "attribute_type": "attributeType",
    });
  });

/** @internal */
export type Five$Outbound = {
  domain: string;
  root_domain: string;
  attribute_type: string;
};

/** @internal */
export const Five$outboundSchema: z.ZodType<Five$Outbound, z.ZodTypeDef, Five> =
  z.object({
    domain: z.string(),
    rootDomain: z.string(),
    attributeType: OutputValue5AttributeType$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      rootDomain: "root_domain",
      attributeType: "attribute_type",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Five$ {
  /** @deprecated use `Five$inboundSchema` instead. */
  export const inboundSchema = Five$inboundSchema;
  /** @deprecated use `Five$outboundSchema` instead. */
  export const outboundSchema = Five$outboundSchema;
  /** @deprecated use `Five$Outbound` instead. */
  export type Outbound = Five$Outbound;
}

export function fiveToJSON(five: Five): string {
  return JSON.stringify(Five$outboundSchema.parse(five));
}

export function fiveFromJSON(
  jsonString: string,
): SafeParseResult<Five, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Five$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Five' from JSON`,
  );
}

/** @internal */
export const OutputValue4AttributeType$inboundSchema: z.ZodNativeEnum<
  typeof OutputValue4AttributeType
> = z.nativeEnum(OutputValue4AttributeType);

/** @internal */
export const OutputValue4AttributeType$outboundSchema: z.ZodNativeEnum<
  typeof OutputValue4AttributeType
> = OutputValue4AttributeType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputValue4AttributeType$ {
  /** @deprecated use `OutputValue4AttributeType$inboundSchema` instead. */
  export const inboundSchema = OutputValue4AttributeType$inboundSchema;
  /** @deprecated use `OutputValue4AttributeType$outboundSchema` instead. */
  export const outboundSchema = OutputValue4AttributeType$outboundSchema;
}

/** @internal */
export const Four$inboundSchema: z.ZodType<Four, z.ZodTypeDef, unknown> = z
  .object({
    attribute_type: OutputValue4AttributeType$inboundSchema,
    value: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "attribute_type": "attributeType",
    });
  });

/** @internal */
export type Four$Outbound = {
  attribute_type: string;
  value: string;
};

/** @internal */
export const Four$outboundSchema: z.ZodType<Four$Outbound, z.ZodTypeDef, Four> =
  z.object({
    attributeType: OutputValue4AttributeType$outboundSchema,
    value: z.string(),
  }).transform((v) => {
    return remap$(v, {
      attributeType: "attribute_type",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Four$ {
  /** @deprecated use `Four$inboundSchema` instead. */
  export const inboundSchema = Four$inboundSchema;
  /** @deprecated use `Four$outboundSchema` instead. */
  export const outboundSchema = Four$outboundSchema;
  /** @deprecated use `Four$Outbound` instead. */
  export type Outbound = Four$Outbound;
}

export function fourToJSON(four: Four): string {
  return JSON.stringify(Four$outboundSchema.parse(four));
}

export function fourFromJSON(
  jsonString: string,
): SafeParseResult<Four, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Four$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Four' from JSON`,
  );
}

/** @internal */
export const CurrencyCode$inboundSchema: z.ZodNativeEnum<typeof CurrencyCode> =
  z.nativeEnum(CurrencyCode);

/** @internal */
export const CurrencyCode$outboundSchema: z.ZodNativeEnum<typeof CurrencyCode> =
  CurrencyCode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CurrencyCode$ {
  /** @deprecated use `CurrencyCode$inboundSchema` instead. */
  export const inboundSchema = CurrencyCode$inboundSchema;
  /** @deprecated use `CurrencyCode$outboundSchema` instead. */
  export const outboundSchema = CurrencyCode$outboundSchema;
}

/** @internal */
export const OutputValue3AttributeType$inboundSchema: z.ZodNativeEnum<
  typeof OutputValue3AttributeType
> = z.nativeEnum(OutputValue3AttributeType);

/** @internal */
export const OutputValue3AttributeType$outboundSchema: z.ZodNativeEnum<
  typeof OutputValue3AttributeType
> = OutputValue3AttributeType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputValue3AttributeType$ {
  /** @deprecated use `OutputValue3AttributeType$inboundSchema` instead. */
  export const inboundSchema = OutputValue3AttributeType$inboundSchema;
  /** @deprecated use `OutputValue3AttributeType$outboundSchema` instead. */
  export const outboundSchema = OutputValue3AttributeType$outboundSchema;
}

/** @internal */
export const Three$inboundSchema: z.ZodType<Three, z.ZodTypeDef, unknown> = z
  .object({
    currency_value: z.number(),
    currency_code: z.nullable(CurrencyCode$inboundSchema).optional(),
    attribute_type: OutputValue3AttributeType$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "currency_value": "currencyValue",
      "currency_code": "currencyCode",
      "attribute_type": "attributeType",
    });
  });

/** @internal */
export type Three$Outbound = {
  currency_value: number;
  currency_code?: string | null | undefined;
  attribute_type: string;
};

/** @internal */
export const Three$outboundSchema: z.ZodType<
  Three$Outbound,
  z.ZodTypeDef,
  Three
> = z.object({
  currencyValue: z.number(),
  currencyCode: z.nullable(CurrencyCode$outboundSchema).optional(),
  attributeType: OutputValue3AttributeType$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    currencyValue: "currency_value",
    currencyCode: "currency_code",
    attributeType: "attribute_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Three$ {
  /** @deprecated use `Three$inboundSchema` instead. */
  export const inboundSchema = Three$inboundSchema;
  /** @deprecated use `Three$outboundSchema` instead. */
  export const outboundSchema = Three$outboundSchema;
  /** @deprecated use `Three$Outbound` instead. */
  export type Outbound = Three$Outbound;
}

export function threeToJSON(three: Three): string {
  return JSON.stringify(Three$outboundSchema.parse(three));
}

export function threeFromJSON(
  jsonString: string,
): SafeParseResult<Three, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Three$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Three' from JSON`,
  );
}

/** @internal */
export const OutputValueAttributeType$inboundSchema: z.ZodNativeEnum<
  typeof OutputValueAttributeType
> = z.nativeEnum(OutputValueAttributeType);

/** @internal */
export const OutputValueAttributeType$outboundSchema: z.ZodNativeEnum<
  typeof OutputValueAttributeType
> = OutputValueAttributeType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputValueAttributeType$ {
  /** @deprecated use `OutputValueAttributeType$inboundSchema` instead. */
  export const inboundSchema = OutputValueAttributeType$inboundSchema;
  /** @deprecated use `OutputValueAttributeType$outboundSchema` instead. */
  export const outboundSchema = OutputValueAttributeType$outboundSchema;
}

/** @internal */
export const OutputValue2$inboundSchema: z.ZodType<
  OutputValue2,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.boolean(),
  attribute_type: OutputValueAttributeType$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "attribute_type": "attributeType",
  });
});

/** @internal */
export type OutputValue2$Outbound = {
  value: boolean;
  attribute_type: string;
};

/** @internal */
export const OutputValue2$outboundSchema: z.ZodType<
  OutputValue2$Outbound,
  z.ZodTypeDef,
  OutputValue2
> = z.object({
  value: z.boolean(),
  attributeType: OutputValueAttributeType$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    attributeType: "attribute_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputValue2$ {
  /** @deprecated use `OutputValue2$inboundSchema` instead. */
  export const inboundSchema = OutputValue2$inboundSchema;
  /** @deprecated use `OutputValue2$outboundSchema` instead. */
  export const outboundSchema = OutputValue2$outboundSchema;
  /** @deprecated use `OutputValue2$Outbound` instead. */
  export type Outbound = OutputValue2$Outbound;
}

export function outputValue2ToJSON(outputValue2: OutputValue2): string {
  return JSON.stringify(OutputValue2$outboundSchema.parse(outputValue2));
}

export function outputValue2FromJSON(
  jsonString: string,
): SafeParseResult<OutputValue2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputValue2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputValue2' from JSON`,
  );
}

/** @internal */
export const OutputValueReferencedActorType$inboundSchema: z.ZodNativeEnum<
  typeof OutputValueReferencedActorType
> = z.nativeEnum(OutputValueReferencedActorType);

/** @internal */
export const OutputValueReferencedActorType$outboundSchema: z.ZodNativeEnum<
  typeof OutputValueReferencedActorType
> = OutputValueReferencedActorType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputValueReferencedActorType$ {
  /** @deprecated use `OutputValueReferencedActorType$inboundSchema` instead. */
  export const inboundSchema = OutputValueReferencedActorType$inboundSchema;
  /** @deprecated use `OutputValueReferencedActorType$outboundSchema` instead. */
  export const outboundSchema = OutputValueReferencedActorType$outboundSchema;
}

/** @internal */
export const AttributeType$inboundSchema: z.ZodNativeEnum<
  typeof AttributeType
> = z.nativeEnum(AttributeType);

/** @internal */
export const AttributeType$outboundSchema: z.ZodNativeEnum<
  typeof AttributeType
> = AttributeType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AttributeType$ {
  /** @deprecated use `AttributeType$inboundSchema` instead. */
  export const inboundSchema = AttributeType$inboundSchema;
  /** @deprecated use `AttributeType$outboundSchema` instead. */
  export const outboundSchema = AttributeType$outboundSchema;
}

/** @internal */
export const OutputValue1$inboundSchema: z.ZodType<
  OutputValue1,
  z.ZodTypeDef,
  unknown
> = z.object({
  referenced_actor_type: OutputValueReferencedActorType$inboundSchema,
  referenced_actor_id: z.nullable(z.string()),
  attribute_type: AttributeType$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "referenced_actor_type": "referencedActorType",
    "referenced_actor_id": "referencedActorId",
    "attribute_type": "attributeType",
  });
});

/** @internal */
export type OutputValue1$Outbound = {
  referenced_actor_type: string;
  referenced_actor_id: string | null;
  attribute_type: string;
};

/** @internal */
export const OutputValue1$outboundSchema: z.ZodType<
  OutputValue1$Outbound,
  z.ZodTypeDef,
  OutputValue1
> = z.object({
  referencedActorType: OutputValueReferencedActorType$outboundSchema,
  referencedActorId: z.nullable(z.string()),
  attributeType: AttributeType$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    referencedActorType: "referenced_actor_type",
    referencedActorId: "referenced_actor_id",
    attributeType: "attribute_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputValue1$ {
  /** @deprecated use `OutputValue1$inboundSchema` instead. */
  export const inboundSchema = OutputValue1$inboundSchema;
  /** @deprecated use `OutputValue1$outboundSchema` instead. */
  export const outboundSchema = OutputValue1$outboundSchema;
  /** @deprecated use `OutputValue1$Outbound` instead. */
  export type Outbound = OutputValue1$Outbound;
}

export function outputValue1ToJSON(outputValue1: OutputValue1): string {
  return JSON.stringify(OutputValue1$outboundSchema.parse(outputValue1));
}

export function outputValue1FromJSON(
  jsonString: string,
): SafeParseResult<OutputValue1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputValue1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputValue1' from JSON`,
  );
}

/** @internal */
export const OutputValue$inboundSchema: z.ZodType<
  OutputValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => OutputValue2$inboundSchema),
  z.lazy(() => Four$inboundSchema),
  z.lazy(() => Ten$inboundSchema),
  z.lazy(() => Thirteen$inboundSchema),
  z.lazy(() => Fourteen$inboundSchema),
  z.lazy(() => Fifteen$inboundSchema),
  z.lazy(() => Sixteen$inboundSchema),
  z.lazy(() => Seventeen$inboundSchema),
  z.lazy(() => Eighteen$inboundSchema),
  z.lazy(() => Nineteen$inboundSchema),
  z.lazy(() => OutputValue1$inboundSchema),
  z.lazy(() => Three$inboundSchema),
  z.lazy(() => Five$inboundSchema),
  z.lazy(() => Seven$inboundSchema),
  z.lazy(() => Eight$inboundSchema),
  z.lazy(() => Eleven$inboundSchema),
  z.lazy(() => Twelve$inboundSchema),
  z.lazy(() => Six$inboundSchema),
  z.lazy(() => Nine$inboundSchema),
]);

/** @internal */
export type OutputValue$Outbound =
  | OutputValue2$Outbound
  | Four$Outbound
  | Ten$Outbound
  | Thirteen$Outbound
  | Fourteen$Outbound
  | Fifteen$Outbound
  | Sixteen$Outbound
  | Seventeen$Outbound
  | Eighteen$Outbound
  | Nineteen$Outbound
  | OutputValue1$Outbound
  | Three$Outbound
  | Five$Outbound
  | Seven$Outbound
  | Eight$Outbound
  | Eleven$Outbound
  | Twelve$Outbound
  | Six$Outbound
  | Nine$Outbound;

/** @internal */
export const OutputValue$outboundSchema: z.ZodType<
  OutputValue$Outbound,
  z.ZodTypeDef,
  OutputValue
> = z.union([
  z.lazy(() => OutputValue2$outboundSchema),
  z.lazy(() => Four$outboundSchema),
  z.lazy(() => Ten$outboundSchema),
  z.lazy(() => Thirteen$outboundSchema),
  z.lazy(() => Fourteen$outboundSchema),
  z.lazy(() => Fifteen$outboundSchema),
  z.lazy(() => Sixteen$outboundSchema),
  z.lazy(() => Seventeen$outboundSchema),
  z.lazy(() => Eighteen$outboundSchema),
  z.lazy(() => Nineteen$outboundSchema),
  z.lazy(() => OutputValue1$outboundSchema),
  z.lazy(() => Three$outboundSchema),
  z.lazy(() => Five$outboundSchema),
  z.lazy(() => Seven$outboundSchema),
  z.lazy(() => Eight$outboundSchema),
  z.lazy(() => Eleven$outboundSchema),
  z.lazy(() => Twelve$outboundSchema),
  z.lazy(() => Six$outboundSchema),
  z.lazy(() => Nine$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputValue$ {
  /** @deprecated use `OutputValue$inboundSchema` instead. */
  export const inboundSchema = OutputValue$inboundSchema;
  /** @deprecated use `OutputValue$outboundSchema` instead. */
  export const outboundSchema = OutputValue$outboundSchema;
  /** @deprecated use `OutputValue$Outbound` instead. */
  export type Outbound = OutputValue$Outbound;
}

export function outputValueToJSON(outputValue: OutputValue): string {
  return JSON.stringify(OutputValue$outboundSchema.parse(outputValue));
}

export function outputValueFromJSON(
  jsonString: string,
): SafeParseResult<OutputValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputValue' from JSON`,
  );
}
