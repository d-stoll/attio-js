/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * An object with an attribute `api_slug` or `attribute_id` as the key, and a single value (for single-select attributes), or an array of values (for single or multi-select attributes) as the values. For complete documentation on values for all attribute types, please see our [attribute type docs](/docs/attribute-types).
 */
export type PatchV2ObjectsObjectRecordsRecordIdValues = {};

export type PatchV2ObjectsObjectRecordsRecordIdData = {
  /**
   * An object with an attribute `api_slug` or `attribute_id` as the key, and a single value (for single-select attributes), or an array of values (for single or multi-select attributes) as the values. For complete documentation on values for all attribute types, please see our [attribute type docs](/docs/attribute-types).
   */
  values: PatchV2ObjectsObjectRecordsRecordIdValues;
};

export type PatchV2ObjectsObjectRecordsRecordIdRequestBody = {
  data: PatchV2ObjectsObjectRecordsRecordIdData;
};

export type PatchV2ObjectsObjectRecordsRecordIdRequest = {
  object: string;
  recordId: string;
  requestBody: PatchV2ObjectsObjectRecordsRecordIdRequestBody;
};

export type PatchV2ObjectsObjectRecordsRecordIdId = {
  /**
   * A UUID identifying the workspace this record belongs to.
   */
  workspaceId: string;
  /**
   * A UUID identifying the object this record belongs to.
   */
  objectId: string;
  /**
   * A UUID identifying this record.
   */
  recordId: string;
};

/**
 * A record type with an attribute `api_slug` as the key, and an array of value objects as the values.
 */
export type PatchV2ObjectsObjectRecordsRecordIdRecordsValues = {};

export type PatchV2ObjectsObjectRecordsRecordIdRecordsData = {
  id: PatchV2ObjectsObjectRecordsRecordIdId;
  /**
   * When this record was created.
   */
  createdAt: string;
  /**
   * A record type with an attribute `api_slug` as the key, and an array of value objects as the values.
   */
  values: PatchV2ObjectsObjectRecordsRecordIdRecordsValues;
};

/**
 * Success
 */
export type PatchV2ObjectsObjectRecordsRecordIdResponseBody = {
  data: PatchV2ObjectsObjectRecordsRecordIdRecordsData;
};

/** @internal */
export const PatchV2ObjectsObjectRecordsRecordIdValues$inboundSchema: z.ZodType<
  PatchV2ObjectsObjectRecordsRecordIdValues,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type PatchV2ObjectsObjectRecordsRecordIdValues$Outbound = {};

/** @internal */
export const PatchV2ObjectsObjectRecordsRecordIdValues$outboundSchema:
  z.ZodType<
    PatchV2ObjectsObjectRecordsRecordIdValues$Outbound,
    z.ZodTypeDef,
    PatchV2ObjectsObjectRecordsRecordIdValues
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2ObjectsObjectRecordsRecordIdValues$ {
  /** @deprecated use `PatchV2ObjectsObjectRecordsRecordIdValues$inboundSchema` instead. */
  export const inboundSchema =
    PatchV2ObjectsObjectRecordsRecordIdValues$inboundSchema;
  /** @deprecated use `PatchV2ObjectsObjectRecordsRecordIdValues$outboundSchema` instead. */
  export const outboundSchema =
    PatchV2ObjectsObjectRecordsRecordIdValues$outboundSchema;
  /** @deprecated use `PatchV2ObjectsObjectRecordsRecordIdValues$Outbound` instead. */
  export type Outbound = PatchV2ObjectsObjectRecordsRecordIdValues$Outbound;
}

export function patchV2ObjectsObjectRecordsRecordIdValuesToJSON(
  patchV2ObjectsObjectRecordsRecordIdValues:
    PatchV2ObjectsObjectRecordsRecordIdValues,
): string {
  return JSON.stringify(
    PatchV2ObjectsObjectRecordsRecordIdValues$outboundSchema.parse(
      patchV2ObjectsObjectRecordsRecordIdValues,
    ),
  );
}

export function patchV2ObjectsObjectRecordsRecordIdValuesFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchV2ObjectsObjectRecordsRecordIdValues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchV2ObjectsObjectRecordsRecordIdValues$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchV2ObjectsObjectRecordsRecordIdValues' from JSON`,
  );
}

/** @internal */
export const PatchV2ObjectsObjectRecordsRecordIdData$inboundSchema: z.ZodType<
  PatchV2ObjectsObjectRecordsRecordIdData,
  z.ZodTypeDef,
  unknown
> = z.object({
  values: z.lazy(() => PatchV2ObjectsObjectRecordsRecordIdValues$inboundSchema),
});

/** @internal */
export type PatchV2ObjectsObjectRecordsRecordIdData$Outbound = {
  values: PatchV2ObjectsObjectRecordsRecordIdValues$Outbound;
};

/** @internal */
export const PatchV2ObjectsObjectRecordsRecordIdData$outboundSchema: z.ZodType<
  PatchV2ObjectsObjectRecordsRecordIdData$Outbound,
  z.ZodTypeDef,
  PatchV2ObjectsObjectRecordsRecordIdData
> = z.object({
  values: z.lazy(() =>
    PatchV2ObjectsObjectRecordsRecordIdValues$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2ObjectsObjectRecordsRecordIdData$ {
  /** @deprecated use `PatchV2ObjectsObjectRecordsRecordIdData$inboundSchema` instead. */
  export const inboundSchema =
    PatchV2ObjectsObjectRecordsRecordIdData$inboundSchema;
  /** @deprecated use `PatchV2ObjectsObjectRecordsRecordIdData$outboundSchema` instead. */
  export const outboundSchema =
    PatchV2ObjectsObjectRecordsRecordIdData$outboundSchema;
  /** @deprecated use `PatchV2ObjectsObjectRecordsRecordIdData$Outbound` instead. */
  export type Outbound = PatchV2ObjectsObjectRecordsRecordIdData$Outbound;
}

export function patchV2ObjectsObjectRecordsRecordIdDataToJSON(
  patchV2ObjectsObjectRecordsRecordIdData:
    PatchV2ObjectsObjectRecordsRecordIdData,
): string {
  return JSON.stringify(
    PatchV2ObjectsObjectRecordsRecordIdData$outboundSchema.parse(
      patchV2ObjectsObjectRecordsRecordIdData,
    ),
  );
}

export function patchV2ObjectsObjectRecordsRecordIdDataFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchV2ObjectsObjectRecordsRecordIdData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchV2ObjectsObjectRecordsRecordIdData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchV2ObjectsObjectRecordsRecordIdData' from JSON`,
  );
}

/** @internal */
export const PatchV2ObjectsObjectRecordsRecordIdRequestBody$inboundSchema:
  z.ZodType<
    PatchV2ObjectsObjectRecordsRecordIdRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    data: z.lazy(() => PatchV2ObjectsObjectRecordsRecordIdData$inboundSchema),
  });

/** @internal */
export type PatchV2ObjectsObjectRecordsRecordIdRequestBody$Outbound = {
  data: PatchV2ObjectsObjectRecordsRecordIdData$Outbound;
};

/** @internal */
export const PatchV2ObjectsObjectRecordsRecordIdRequestBody$outboundSchema:
  z.ZodType<
    PatchV2ObjectsObjectRecordsRecordIdRequestBody$Outbound,
    z.ZodTypeDef,
    PatchV2ObjectsObjectRecordsRecordIdRequestBody
  > = z.object({
    data: z.lazy(() => PatchV2ObjectsObjectRecordsRecordIdData$outboundSchema),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2ObjectsObjectRecordsRecordIdRequestBody$ {
  /** @deprecated use `PatchV2ObjectsObjectRecordsRecordIdRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PatchV2ObjectsObjectRecordsRecordIdRequestBody$inboundSchema;
  /** @deprecated use `PatchV2ObjectsObjectRecordsRecordIdRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PatchV2ObjectsObjectRecordsRecordIdRequestBody$outboundSchema;
  /** @deprecated use `PatchV2ObjectsObjectRecordsRecordIdRequestBody$Outbound` instead. */
  export type Outbound =
    PatchV2ObjectsObjectRecordsRecordIdRequestBody$Outbound;
}

export function patchV2ObjectsObjectRecordsRecordIdRequestBodyToJSON(
  patchV2ObjectsObjectRecordsRecordIdRequestBody:
    PatchV2ObjectsObjectRecordsRecordIdRequestBody,
): string {
  return JSON.stringify(
    PatchV2ObjectsObjectRecordsRecordIdRequestBody$outboundSchema.parse(
      patchV2ObjectsObjectRecordsRecordIdRequestBody,
    ),
  );
}

export function patchV2ObjectsObjectRecordsRecordIdRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchV2ObjectsObjectRecordsRecordIdRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchV2ObjectsObjectRecordsRecordIdRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchV2ObjectsObjectRecordsRecordIdRequestBody' from JSON`,
  );
}

/** @internal */
export const PatchV2ObjectsObjectRecordsRecordIdRequest$inboundSchema:
  z.ZodType<PatchV2ObjectsObjectRecordsRecordIdRequest, z.ZodTypeDef, unknown> =
    z.object({
      object: z.string(),
      record_id: z.string(),
      RequestBody: z.lazy(() =>
        PatchV2ObjectsObjectRecordsRecordIdRequestBody$inboundSchema
      ),
    }).transform((v) => {
      return remap$(v, {
        "record_id": "recordId",
        "RequestBody": "requestBody",
      });
    });

/** @internal */
export type PatchV2ObjectsObjectRecordsRecordIdRequest$Outbound = {
  object: string;
  record_id: string;
  RequestBody: PatchV2ObjectsObjectRecordsRecordIdRequestBody$Outbound;
};

/** @internal */
export const PatchV2ObjectsObjectRecordsRecordIdRequest$outboundSchema:
  z.ZodType<
    PatchV2ObjectsObjectRecordsRecordIdRequest$Outbound,
    z.ZodTypeDef,
    PatchV2ObjectsObjectRecordsRecordIdRequest
  > = z.object({
    object: z.string(),
    recordId: z.string(),
    requestBody: z.lazy(() =>
      PatchV2ObjectsObjectRecordsRecordIdRequestBody$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      recordId: "record_id",
      requestBody: "RequestBody",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2ObjectsObjectRecordsRecordIdRequest$ {
  /** @deprecated use `PatchV2ObjectsObjectRecordsRecordIdRequest$inboundSchema` instead. */
  export const inboundSchema =
    PatchV2ObjectsObjectRecordsRecordIdRequest$inboundSchema;
  /** @deprecated use `PatchV2ObjectsObjectRecordsRecordIdRequest$outboundSchema` instead. */
  export const outboundSchema =
    PatchV2ObjectsObjectRecordsRecordIdRequest$outboundSchema;
  /** @deprecated use `PatchV2ObjectsObjectRecordsRecordIdRequest$Outbound` instead. */
  export type Outbound = PatchV2ObjectsObjectRecordsRecordIdRequest$Outbound;
}

export function patchV2ObjectsObjectRecordsRecordIdRequestToJSON(
  patchV2ObjectsObjectRecordsRecordIdRequest:
    PatchV2ObjectsObjectRecordsRecordIdRequest,
): string {
  return JSON.stringify(
    PatchV2ObjectsObjectRecordsRecordIdRequest$outboundSchema.parse(
      patchV2ObjectsObjectRecordsRecordIdRequest,
    ),
  );
}

export function patchV2ObjectsObjectRecordsRecordIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchV2ObjectsObjectRecordsRecordIdRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchV2ObjectsObjectRecordsRecordIdRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchV2ObjectsObjectRecordsRecordIdRequest' from JSON`,
  );
}

/** @internal */
export const PatchV2ObjectsObjectRecordsRecordIdId$inboundSchema: z.ZodType<
  PatchV2ObjectsObjectRecordsRecordIdId,
  z.ZodTypeDef,
  unknown
> = z.object({
  workspace_id: z.string(),
  object_id: z.string(),
  record_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "workspace_id": "workspaceId",
    "object_id": "objectId",
    "record_id": "recordId",
  });
});

/** @internal */
export type PatchV2ObjectsObjectRecordsRecordIdId$Outbound = {
  workspace_id: string;
  object_id: string;
  record_id: string;
};

/** @internal */
export const PatchV2ObjectsObjectRecordsRecordIdId$outboundSchema: z.ZodType<
  PatchV2ObjectsObjectRecordsRecordIdId$Outbound,
  z.ZodTypeDef,
  PatchV2ObjectsObjectRecordsRecordIdId
> = z.object({
  workspaceId: z.string(),
  objectId: z.string(),
  recordId: z.string(),
}).transform((v) => {
  return remap$(v, {
    workspaceId: "workspace_id",
    objectId: "object_id",
    recordId: "record_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2ObjectsObjectRecordsRecordIdId$ {
  /** @deprecated use `PatchV2ObjectsObjectRecordsRecordIdId$inboundSchema` instead. */
  export const inboundSchema =
    PatchV2ObjectsObjectRecordsRecordIdId$inboundSchema;
  /** @deprecated use `PatchV2ObjectsObjectRecordsRecordIdId$outboundSchema` instead. */
  export const outboundSchema =
    PatchV2ObjectsObjectRecordsRecordIdId$outboundSchema;
  /** @deprecated use `PatchV2ObjectsObjectRecordsRecordIdId$Outbound` instead. */
  export type Outbound = PatchV2ObjectsObjectRecordsRecordIdId$Outbound;
}

export function patchV2ObjectsObjectRecordsRecordIdIdToJSON(
  patchV2ObjectsObjectRecordsRecordIdId: PatchV2ObjectsObjectRecordsRecordIdId,
): string {
  return JSON.stringify(
    PatchV2ObjectsObjectRecordsRecordIdId$outboundSchema.parse(
      patchV2ObjectsObjectRecordsRecordIdId,
    ),
  );
}

export function patchV2ObjectsObjectRecordsRecordIdIdFromJSON(
  jsonString: string,
): SafeParseResult<PatchV2ObjectsObjectRecordsRecordIdId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PatchV2ObjectsObjectRecordsRecordIdId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV2ObjectsObjectRecordsRecordIdId' from JSON`,
  );
}

/** @internal */
export const PatchV2ObjectsObjectRecordsRecordIdRecordsValues$inboundSchema:
  z.ZodType<
    PatchV2ObjectsObjectRecordsRecordIdRecordsValues,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type PatchV2ObjectsObjectRecordsRecordIdRecordsValues$Outbound = {};

/** @internal */
export const PatchV2ObjectsObjectRecordsRecordIdRecordsValues$outboundSchema:
  z.ZodType<
    PatchV2ObjectsObjectRecordsRecordIdRecordsValues$Outbound,
    z.ZodTypeDef,
    PatchV2ObjectsObjectRecordsRecordIdRecordsValues
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2ObjectsObjectRecordsRecordIdRecordsValues$ {
  /** @deprecated use `PatchV2ObjectsObjectRecordsRecordIdRecordsValues$inboundSchema` instead. */
  export const inboundSchema =
    PatchV2ObjectsObjectRecordsRecordIdRecordsValues$inboundSchema;
  /** @deprecated use `PatchV2ObjectsObjectRecordsRecordIdRecordsValues$outboundSchema` instead. */
  export const outboundSchema =
    PatchV2ObjectsObjectRecordsRecordIdRecordsValues$outboundSchema;
  /** @deprecated use `PatchV2ObjectsObjectRecordsRecordIdRecordsValues$Outbound` instead. */
  export type Outbound =
    PatchV2ObjectsObjectRecordsRecordIdRecordsValues$Outbound;
}

export function patchV2ObjectsObjectRecordsRecordIdRecordsValuesToJSON(
  patchV2ObjectsObjectRecordsRecordIdRecordsValues:
    PatchV2ObjectsObjectRecordsRecordIdRecordsValues,
): string {
  return JSON.stringify(
    PatchV2ObjectsObjectRecordsRecordIdRecordsValues$outboundSchema.parse(
      patchV2ObjectsObjectRecordsRecordIdRecordsValues,
    ),
  );
}

export function patchV2ObjectsObjectRecordsRecordIdRecordsValuesFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchV2ObjectsObjectRecordsRecordIdRecordsValues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchV2ObjectsObjectRecordsRecordIdRecordsValues$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchV2ObjectsObjectRecordsRecordIdRecordsValues' from JSON`,
  );
}

/** @internal */
export const PatchV2ObjectsObjectRecordsRecordIdRecordsData$inboundSchema:
  z.ZodType<
    PatchV2ObjectsObjectRecordsRecordIdRecordsData,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.lazy(() => PatchV2ObjectsObjectRecordsRecordIdId$inboundSchema),
    created_at: z.string(),
    values: z.lazy(() =>
      PatchV2ObjectsObjectRecordsRecordIdRecordsValues$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "created_at": "createdAt",
    });
  });

/** @internal */
export type PatchV2ObjectsObjectRecordsRecordIdRecordsData$Outbound = {
  id: PatchV2ObjectsObjectRecordsRecordIdId$Outbound;
  created_at: string;
  values: PatchV2ObjectsObjectRecordsRecordIdRecordsValues$Outbound;
};

/** @internal */
export const PatchV2ObjectsObjectRecordsRecordIdRecordsData$outboundSchema:
  z.ZodType<
    PatchV2ObjectsObjectRecordsRecordIdRecordsData$Outbound,
    z.ZodTypeDef,
    PatchV2ObjectsObjectRecordsRecordIdRecordsData
  > = z.object({
    id: z.lazy(() => PatchV2ObjectsObjectRecordsRecordIdId$outboundSchema),
    createdAt: z.string(),
    values: z.lazy(() =>
      PatchV2ObjectsObjectRecordsRecordIdRecordsValues$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      createdAt: "created_at",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2ObjectsObjectRecordsRecordIdRecordsData$ {
  /** @deprecated use `PatchV2ObjectsObjectRecordsRecordIdRecordsData$inboundSchema` instead. */
  export const inboundSchema =
    PatchV2ObjectsObjectRecordsRecordIdRecordsData$inboundSchema;
  /** @deprecated use `PatchV2ObjectsObjectRecordsRecordIdRecordsData$outboundSchema` instead. */
  export const outboundSchema =
    PatchV2ObjectsObjectRecordsRecordIdRecordsData$outboundSchema;
  /** @deprecated use `PatchV2ObjectsObjectRecordsRecordIdRecordsData$Outbound` instead. */
  export type Outbound =
    PatchV2ObjectsObjectRecordsRecordIdRecordsData$Outbound;
}

export function patchV2ObjectsObjectRecordsRecordIdRecordsDataToJSON(
  patchV2ObjectsObjectRecordsRecordIdRecordsData:
    PatchV2ObjectsObjectRecordsRecordIdRecordsData,
): string {
  return JSON.stringify(
    PatchV2ObjectsObjectRecordsRecordIdRecordsData$outboundSchema.parse(
      patchV2ObjectsObjectRecordsRecordIdRecordsData,
    ),
  );
}

export function patchV2ObjectsObjectRecordsRecordIdRecordsDataFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchV2ObjectsObjectRecordsRecordIdRecordsData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchV2ObjectsObjectRecordsRecordIdRecordsData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchV2ObjectsObjectRecordsRecordIdRecordsData' from JSON`,
  );
}

/** @internal */
export const PatchV2ObjectsObjectRecordsRecordIdResponseBody$inboundSchema:
  z.ZodType<
    PatchV2ObjectsObjectRecordsRecordIdResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    data: z.lazy(() =>
      PatchV2ObjectsObjectRecordsRecordIdRecordsData$inboundSchema
    ),
  });

/** @internal */
export type PatchV2ObjectsObjectRecordsRecordIdResponseBody$Outbound = {
  data: PatchV2ObjectsObjectRecordsRecordIdRecordsData$Outbound;
};

/** @internal */
export const PatchV2ObjectsObjectRecordsRecordIdResponseBody$outboundSchema:
  z.ZodType<
    PatchV2ObjectsObjectRecordsRecordIdResponseBody$Outbound,
    z.ZodTypeDef,
    PatchV2ObjectsObjectRecordsRecordIdResponseBody
  > = z.object({
    data: z.lazy(() =>
      PatchV2ObjectsObjectRecordsRecordIdRecordsData$outboundSchema
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2ObjectsObjectRecordsRecordIdResponseBody$ {
  /** @deprecated use `PatchV2ObjectsObjectRecordsRecordIdResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PatchV2ObjectsObjectRecordsRecordIdResponseBody$inboundSchema;
  /** @deprecated use `PatchV2ObjectsObjectRecordsRecordIdResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PatchV2ObjectsObjectRecordsRecordIdResponseBody$outboundSchema;
  /** @deprecated use `PatchV2ObjectsObjectRecordsRecordIdResponseBody$Outbound` instead. */
  export type Outbound =
    PatchV2ObjectsObjectRecordsRecordIdResponseBody$Outbound;
}

export function patchV2ObjectsObjectRecordsRecordIdResponseBodyToJSON(
  patchV2ObjectsObjectRecordsRecordIdResponseBody:
    PatchV2ObjectsObjectRecordsRecordIdResponseBody,
): string {
  return JSON.stringify(
    PatchV2ObjectsObjectRecordsRecordIdResponseBody$outboundSchema.parse(
      patchV2ObjectsObjectRecordsRecordIdResponseBody,
    ),
  );
}

export function patchV2ObjectsObjectRecordsRecordIdResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchV2ObjectsObjectRecordsRecordIdResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchV2ObjectsObjectRecordsRecordIdResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchV2ObjectsObjectRecordsRecordIdResponseBody' from JSON`,
  );
}
