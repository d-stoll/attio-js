/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PostV2ObjectsObjectRecordsData = {
  /**
   * An object with an attribute `api_slug` or `attribute_id` as the key, and a single value (for single-select attributes), or an array of values (for single or multi-select attributes) as the values. For complete documentation on values for all attribute types, please see our [attribute type docs](/docs/attribute-types).
   */
  values: { [k: string]: any };
};

export type PostV2ObjectsObjectRecordsRequestBody = {
  data: PostV2ObjectsObjectRecordsData;
};

export type PostV2ObjectsObjectRecordsRequest = {
  object: string;
  requestBody: PostV2ObjectsObjectRecordsRequestBody;
};

export type PostV2ObjectsObjectRecordsId = {
  /**
   * A UUID identifying the workspace this record belongs to.
   */
  workspaceId: string;
  /**
   * A UUID identifying the object this record belongs to.
   */
  objectId: string;
  /**
   * A UUID identifying this record.
   */
  recordId: string;
};

export type PostV2ObjectsObjectRecordsRecordsData = {
  id: PostV2ObjectsObjectRecordsId;
  /**
   * When this record was created.
   */
  createdAt: string;
  /**
   * A record type with an attribute `api_slug` as the key, and an array of value objects as the values.
   */
  values: { [k: string]: any };
};

/**
 * Success
 */
export type PostV2ObjectsObjectRecordsResponseBody = {
  data: PostV2ObjectsObjectRecordsRecordsData;
};

/** @internal */
export const PostV2ObjectsObjectRecordsData$inboundSchema: z.ZodType<
  PostV2ObjectsObjectRecordsData,
  z.ZodTypeDef,
  unknown
> = z.object({
  values: z.record(z.any()),
});

/** @internal */
export type PostV2ObjectsObjectRecordsData$Outbound = {
  values: { [k: string]: any };
};

/** @internal */
export const PostV2ObjectsObjectRecordsData$outboundSchema: z.ZodType<
  PostV2ObjectsObjectRecordsData$Outbound,
  z.ZodTypeDef,
  PostV2ObjectsObjectRecordsData
> = z.object({
  values: z.record(z.any()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ObjectsObjectRecordsData$ {
  /** @deprecated use `PostV2ObjectsObjectRecordsData$inboundSchema` instead. */
  export const inboundSchema = PostV2ObjectsObjectRecordsData$inboundSchema;
  /** @deprecated use `PostV2ObjectsObjectRecordsData$outboundSchema` instead. */
  export const outboundSchema = PostV2ObjectsObjectRecordsData$outboundSchema;
  /** @deprecated use `PostV2ObjectsObjectRecordsData$Outbound` instead. */
  export type Outbound = PostV2ObjectsObjectRecordsData$Outbound;
}

export function postV2ObjectsObjectRecordsDataToJSON(
  postV2ObjectsObjectRecordsData: PostV2ObjectsObjectRecordsData,
): string {
  return JSON.stringify(
    PostV2ObjectsObjectRecordsData$outboundSchema.parse(
      postV2ObjectsObjectRecordsData,
    ),
  );
}

export function postV2ObjectsObjectRecordsDataFromJSON(
  jsonString: string,
): SafeParseResult<PostV2ObjectsObjectRecordsData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV2ObjectsObjectRecordsData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV2ObjectsObjectRecordsData' from JSON`,
  );
}

/** @internal */
export const PostV2ObjectsObjectRecordsRequestBody$inboundSchema: z.ZodType<
  PostV2ObjectsObjectRecordsRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => PostV2ObjectsObjectRecordsData$inboundSchema),
});

/** @internal */
export type PostV2ObjectsObjectRecordsRequestBody$Outbound = {
  data: PostV2ObjectsObjectRecordsData$Outbound;
};

/** @internal */
export const PostV2ObjectsObjectRecordsRequestBody$outboundSchema: z.ZodType<
  PostV2ObjectsObjectRecordsRequestBody$Outbound,
  z.ZodTypeDef,
  PostV2ObjectsObjectRecordsRequestBody
> = z.object({
  data: z.lazy(() => PostV2ObjectsObjectRecordsData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ObjectsObjectRecordsRequestBody$ {
  /** @deprecated use `PostV2ObjectsObjectRecordsRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PostV2ObjectsObjectRecordsRequestBody$inboundSchema;
  /** @deprecated use `PostV2ObjectsObjectRecordsRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PostV2ObjectsObjectRecordsRequestBody$outboundSchema;
  /** @deprecated use `PostV2ObjectsObjectRecordsRequestBody$Outbound` instead. */
  export type Outbound = PostV2ObjectsObjectRecordsRequestBody$Outbound;
}

export function postV2ObjectsObjectRecordsRequestBodyToJSON(
  postV2ObjectsObjectRecordsRequestBody: PostV2ObjectsObjectRecordsRequestBody,
): string {
  return JSON.stringify(
    PostV2ObjectsObjectRecordsRequestBody$outboundSchema.parse(
      postV2ObjectsObjectRecordsRequestBody,
    ),
  );
}

export function postV2ObjectsObjectRecordsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PostV2ObjectsObjectRecordsRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PostV2ObjectsObjectRecordsRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV2ObjectsObjectRecordsRequestBody' from JSON`,
  );
}

/** @internal */
export const PostV2ObjectsObjectRecordsRequest$inboundSchema: z.ZodType<
  PostV2ObjectsObjectRecordsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: z.string(),
  RequestBody: z.lazy(() =>
    PostV2ObjectsObjectRecordsRequestBody$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PostV2ObjectsObjectRecordsRequest$Outbound = {
  object: string;
  RequestBody: PostV2ObjectsObjectRecordsRequestBody$Outbound;
};

/** @internal */
export const PostV2ObjectsObjectRecordsRequest$outboundSchema: z.ZodType<
  PostV2ObjectsObjectRecordsRequest$Outbound,
  z.ZodTypeDef,
  PostV2ObjectsObjectRecordsRequest
> = z.object({
  object: z.string(),
  requestBody: z.lazy(() =>
    PostV2ObjectsObjectRecordsRequestBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ObjectsObjectRecordsRequest$ {
  /** @deprecated use `PostV2ObjectsObjectRecordsRequest$inboundSchema` instead. */
  export const inboundSchema = PostV2ObjectsObjectRecordsRequest$inboundSchema;
  /** @deprecated use `PostV2ObjectsObjectRecordsRequest$outboundSchema` instead. */
  export const outboundSchema =
    PostV2ObjectsObjectRecordsRequest$outboundSchema;
  /** @deprecated use `PostV2ObjectsObjectRecordsRequest$Outbound` instead. */
  export type Outbound = PostV2ObjectsObjectRecordsRequest$Outbound;
}

export function postV2ObjectsObjectRecordsRequestToJSON(
  postV2ObjectsObjectRecordsRequest: PostV2ObjectsObjectRecordsRequest,
): string {
  return JSON.stringify(
    PostV2ObjectsObjectRecordsRequest$outboundSchema.parse(
      postV2ObjectsObjectRecordsRequest,
    ),
  );
}

export function postV2ObjectsObjectRecordsRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostV2ObjectsObjectRecordsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV2ObjectsObjectRecordsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV2ObjectsObjectRecordsRequest' from JSON`,
  );
}

/** @internal */
export const PostV2ObjectsObjectRecordsId$inboundSchema: z.ZodType<
  PostV2ObjectsObjectRecordsId,
  z.ZodTypeDef,
  unknown
> = z.object({
  workspace_id: z.string(),
  object_id: z.string(),
  record_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "workspace_id": "workspaceId",
    "object_id": "objectId",
    "record_id": "recordId",
  });
});

/** @internal */
export type PostV2ObjectsObjectRecordsId$Outbound = {
  workspace_id: string;
  object_id: string;
  record_id: string;
};

/** @internal */
export const PostV2ObjectsObjectRecordsId$outboundSchema: z.ZodType<
  PostV2ObjectsObjectRecordsId$Outbound,
  z.ZodTypeDef,
  PostV2ObjectsObjectRecordsId
> = z.object({
  workspaceId: z.string(),
  objectId: z.string(),
  recordId: z.string(),
}).transform((v) => {
  return remap$(v, {
    workspaceId: "workspace_id",
    objectId: "object_id",
    recordId: "record_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ObjectsObjectRecordsId$ {
  /** @deprecated use `PostV2ObjectsObjectRecordsId$inboundSchema` instead. */
  export const inboundSchema = PostV2ObjectsObjectRecordsId$inboundSchema;
  /** @deprecated use `PostV2ObjectsObjectRecordsId$outboundSchema` instead. */
  export const outboundSchema = PostV2ObjectsObjectRecordsId$outboundSchema;
  /** @deprecated use `PostV2ObjectsObjectRecordsId$Outbound` instead. */
  export type Outbound = PostV2ObjectsObjectRecordsId$Outbound;
}

export function postV2ObjectsObjectRecordsIdToJSON(
  postV2ObjectsObjectRecordsId: PostV2ObjectsObjectRecordsId,
): string {
  return JSON.stringify(
    PostV2ObjectsObjectRecordsId$outboundSchema.parse(
      postV2ObjectsObjectRecordsId,
    ),
  );
}

export function postV2ObjectsObjectRecordsIdFromJSON(
  jsonString: string,
): SafeParseResult<PostV2ObjectsObjectRecordsId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV2ObjectsObjectRecordsId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV2ObjectsObjectRecordsId' from JSON`,
  );
}

/** @internal */
export const PostV2ObjectsObjectRecordsRecordsData$inboundSchema: z.ZodType<
  PostV2ObjectsObjectRecordsRecordsData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.lazy(() => PostV2ObjectsObjectRecordsId$inboundSchema),
  created_at: z.string(),
  values: z.record(z.any()),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
  });
});

/** @internal */
export type PostV2ObjectsObjectRecordsRecordsData$Outbound = {
  id: PostV2ObjectsObjectRecordsId$Outbound;
  created_at: string;
  values: { [k: string]: any };
};

/** @internal */
export const PostV2ObjectsObjectRecordsRecordsData$outboundSchema: z.ZodType<
  PostV2ObjectsObjectRecordsRecordsData$Outbound,
  z.ZodTypeDef,
  PostV2ObjectsObjectRecordsRecordsData
> = z.object({
  id: z.lazy(() => PostV2ObjectsObjectRecordsId$outboundSchema),
  createdAt: z.string(),
  values: z.record(z.any()),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ObjectsObjectRecordsRecordsData$ {
  /** @deprecated use `PostV2ObjectsObjectRecordsRecordsData$inboundSchema` instead. */
  export const inboundSchema =
    PostV2ObjectsObjectRecordsRecordsData$inboundSchema;
  /** @deprecated use `PostV2ObjectsObjectRecordsRecordsData$outboundSchema` instead. */
  export const outboundSchema =
    PostV2ObjectsObjectRecordsRecordsData$outboundSchema;
  /** @deprecated use `PostV2ObjectsObjectRecordsRecordsData$Outbound` instead. */
  export type Outbound = PostV2ObjectsObjectRecordsRecordsData$Outbound;
}

export function postV2ObjectsObjectRecordsRecordsDataToJSON(
  postV2ObjectsObjectRecordsRecordsData: PostV2ObjectsObjectRecordsRecordsData,
): string {
  return JSON.stringify(
    PostV2ObjectsObjectRecordsRecordsData$outboundSchema.parse(
      postV2ObjectsObjectRecordsRecordsData,
    ),
  );
}

export function postV2ObjectsObjectRecordsRecordsDataFromJSON(
  jsonString: string,
): SafeParseResult<PostV2ObjectsObjectRecordsRecordsData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PostV2ObjectsObjectRecordsRecordsData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV2ObjectsObjectRecordsRecordsData' from JSON`,
  );
}

/** @internal */
export const PostV2ObjectsObjectRecordsResponseBody$inboundSchema: z.ZodType<
  PostV2ObjectsObjectRecordsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => PostV2ObjectsObjectRecordsRecordsData$inboundSchema),
});

/** @internal */
export type PostV2ObjectsObjectRecordsResponseBody$Outbound = {
  data: PostV2ObjectsObjectRecordsRecordsData$Outbound;
};

/** @internal */
export const PostV2ObjectsObjectRecordsResponseBody$outboundSchema: z.ZodType<
  PostV2ObjectsObjectRecordsResponseBody$Outbound,
  z.ZodTypeDef,
  PostV2ObjectsObjectRecordsResponseBody
> = z.object({
  data: z.lazy(() => PostV2ObjectsObjectRecordsRecordsData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ObjectsObjectRecordsResponseBody$ {
  /** @deprecated use `PostV2ObjectsObjectRecordsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PostV2ObjectsObjectRecordsResponseBody$inboundSchema;
  /** @deprecated use `PostV2ObjectsObjectRecordsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PostV2ObjectsObjectRecordsResponseBody$outboundSchema;
  /** @deprecated use `PostV2ObjectsObjectRecordsResponseBody$Outbound` instead. */
  export type Outbound = PostV2ObjectsObjectRecordsResponseBody$Outbound;
}

export function postV2ObjectsObjectRecordsResponseBodyToJSON(
  postV2ObjectsObjectRecordsResponseBody:
    PostV2ObjectsObjectRecordsResponseBody,
): string {
  return JSON.stringify(
    PostV2ObjectsObjectRecordsResponseBody$outboundSchema.parse(
      postV2ObjectsObjectRecordsResponseBody,
    ),
  );
}

export function postV2ObjectsObjectRecordsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<PostV2ObjectsObjectRecordsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PostV2ObjectsObjectRecordsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV2ObjectsObjectRecordsResponseBody' from JSON`,
  );
}
