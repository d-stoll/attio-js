/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { webhooksCreate } from "../funcs/webhooksCreate.js";
import { webhooksDelete } from "../funcs/webhooksDelete.js";
import { webhooksGet } from "../funcs/webhooksGet.js";
import { webhooksList } from "../funcs/webhooksList.js";
import { webhooksPartialUpdate } from "../funcs/webhooksPartialUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Webhooks extends ClientSDK {
  /**
   * List webhooks
   *
   * @remarks
   * Get all of the webhooks in your workspace.
   *
   * Required scopes: `webhook:read`.
   */
  async list(
    request: operations.GetV2WebhooksRequest,
    options?: RequestOptions,
  ): Promise<operations.GetV2WebhooksResponseBody> {
    return unwrapAsync(webhooksList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a webhook
   *
   * @remarks
   * Create a webhook and associated subscriptions.
   *
   * Required scopes: `webhook:read-write`.
   */
  async create(
    request: operations.PostV2WebhooksRequestBody,
    options?: RequestOptions,
  ): Promise<operations.PostV2WebhooksResponseBody> {
    return unwrapAsync(webhooksCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a webhook
   *
   * @remarks
   * Get a single webhook.
   *
   * Required scopes: `webhook:read`.
   */
  async get(
    request: operations.GetV2WebhooksWebhookIdRequest,
    options?: RequestOptions,
  ): Promise<operations.GetV2WebhooksWebhookIdResponseBody> {
    return unwrapAsync(webhooksGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a webhook
   *
   * @remarks
   * Update a webhook and associated subscriptions.
   *
   * Required scopes: `webhook:read-write`.
   */
  async partialUpdate(
    request: operations.PatchV2WebhooksWebhookIdRequest,
    options?: RequestOptions,
  ): Promise<operations.PatchV2WebhooksWebhookIdResponseBody> {
    return unwrapAsync(webhooksPartialUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a webhook
   *
   * @remarks
   * Delete a webhook by ID.
   *
   * Required scopes: `webhook:read-write`.
   */
  async delete(
    request: operations.DeleteV2WebhooksWebhookIdRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteV2WebhooksWebhookIdResponseBody> {
    return unwrapAsync(webhooksDelete(
      this,
      request,
      options,
    ));
  }
}
