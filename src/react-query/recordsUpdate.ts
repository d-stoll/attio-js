/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { AttioCore } from "../core.js";
import { recordsUpdate } from "../funcs/recordsUpdate.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useAttioContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type RecordsUpdateMutationVariables = {
  request: operations.PutV2ObjectsObjectRecordsRecordIdRequest;
  options?: RequestOptions;
};

export type RecordsUpdateMutationData =
  operations.PutV2ObjectsObjectRecordsRecordIdResponseBody;

/**
 * Update a record (overwrite multiselect values)
 *
 * @remarks
 * Use this endpoint to update people, companies, and other records by `record_id`. If the update payload includes multiselect attributes, the values supplied will overwrite/remove the list of values that already exist (if any). Use the `PATCH` endpoint to append multiselect values without removing those that already exist.
 *
 * Required scopes: `record_permission:read-write`, `object_configuration:read`.
 */
export function useRecordsUpdateMutation(
  options?: MutationHookOptions<
    RecordsUpdateMutationData,
    Error,
    RecordsUpdateMutationVariables
  >,
): UseMutationResult<
  RecordsUpdateMutationData,
  Error,
  RecordsUpdateMutationVariables
> {
  const client = useAttioContext();
  return useMutation({
    ...buildRecordsUpdateMutation(client, options),
    ...options,
  });
}

export function mutationKeyRecordsUpdate(): MutationKey {
  return ["attio-js", "Records", "update"];
}

export function buildRecordsUpdateMutation(
  client$: AttioCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: RecordsUpdateMutationVariables,
  ) => Promise<RecordsUpdateMutationData>;
} {
  return {
    mutationKey: mutationKeyRecordsUpdate(),
    mutationFn: function recordsUpdateMutationFn({
      request,
      options,
    }): Promise<RecordsUpdateMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(recordsUpdate(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
