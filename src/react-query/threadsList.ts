/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { AttioCore } from "../core.js";
import { threadsList } from "../funcs/threadsList.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useAttioContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type ThreadsListQueryData = operations.GetV2ThreadsResponseBody;

/**
 * List threads
 *
 * @remarks
 * List threads of comments on a record or list entry.
 *
 * To view threads on records, you will need the `object_configuration:read` and `record_permission:read` scopes.
 *
 * To view threads on list entries, you will need the `list_configuration:read` and `list_entry:read` scopes.
 *
 * Required scopes: `comment:read`.
 */
export function useThreadsList(
  request: operations.GetV2ThreadsRequest,
  options?: QueryHookOptions<ThreadsListQueryData>,
): UseQueryResult<ThreadsListQueryData, Error> {
  const client = useAttioContext();
  return useQuery({
    ...buildThreadsListQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * List threads
 *
 * @remarks
 * List threads of comments on a record or list entry.
 *
 * To view threads on records, you will need the `object_configuration:read` and `record_permission:read` scopes.
 *
 * To view threads on list entries, you will need the `list_configuration:read` and `list_entry:read` scopes.
 *
 * Required scopes: `comment:read`.
 */
export function useThreadsListSuspense(
  request: operations.GetV2ThreadsRequest,
  options?: SuspenseQueryHookOptions<ThreadsListQueryData>,
): UseSuspenseQueryResult<ThreadsListQueryData, Error> {
  const client = useAttioContext();
  return useSuspenseQuery({
    ...buildThreadsListQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchThreadsList(
  queryClient: QueryClient,
  client$: AttioCore,
  request: operations.GetV2ThreadsRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildThreadsListQuery(
      client$,
      request,
    ),
  });
}

export function setThreadsListData(
  client: QueryClient,
  queryKeyBase: [
    parameters: {
      recordId?: string | undefined;
      object?: string | undefined;
      entryId?: string | undefined;
      list?: string | undefined;
      limit?: number | undefined;
      offset?: number | undefined;
    },
  ],
  data: ThreadsListQueryData,
): ThreadsListQueryData | undefined {
  const key = queryKeyThreadsList(...queryKeyBase);

  return client.setQueryData<ThreadsListQueryData>(key, data);
}

export function invalidateThreadsList(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: {
      recordId?: string | undefined;
      object?: string | undefined;
      entryId?: string | undefined;
      list?: string | undefined;
      limit?: number | undefined;
      offset?: number | undefined;
    }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["attio-js", "Threads", "list", ...queryKeyBase],
  });
}

export function invalidateAllThreadsList(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["attio-js", "Threads", "list"],
  });
}

export function buildThreadsListQuery(
  client$: AttioCore,
  request: operations.GetV2ThreadsRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<ThreadsListQueryData>;
} {
  return {
    queryKey: queryKeyThreadsList({
      recordId: request.recordId,
      object: request.object,
      entryId: request.entryId,
      list: request.list,
      limit: request.limit,
      offset: request.offset,
    }),
    queryFn: async function threadsListQueryFn(
      ctx,
    ): Promise<ThreadsListQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(threadsList(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyThreadsList(
  parameters: {
    recordId?: string | undefined;
    object?: string | undefined;
    entryId?: string | undefined;
    list?: string | undefined;
    limit?: number | undefined;
    offset?: number | undefined;
  },
): QueryKey {
  return ["attio-js", "Threads", "list", parameters];
}
