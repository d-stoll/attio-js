/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { tasksDeleteV2TasksTaskId } from "../funcs/tasksDeleteV2TasksTaskId.js";
import { tasksGetV2Tasks } from "../funcs/tasksGetV2Tasks.js";
import { tasksGetV2TasksTaskId } from "../funcs/tasksGetV2TasksTaskId.js";
import { tasksPatchV2TasksTaskId } from "../funcs/tasksPatchV2TasksTaskId.js";
import { tasksPostV2Tasks } from "../funcs/tasksPostV2Tasks.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Tasks extends ClientSDK {
  /**
   * List tasks
   *
   * @remarks
   * List all tasks. Results are sorted by creation date, from oldest to newest.
   *
   * Required scopes: `task:read`, `object_configuration:read`, `record_permission:read`, `user_management:read`.
   */
  async getV2Tasks(
    request: operations.GetV2TasksRequest,
    options?: RequestOptions,
  ): Promise<operations.GetV2TasksResponseBody> {
    return unwrapAsync(tasksGetV2Tasks(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a task
   *
   * @remarks
   * Creates a new task.
   *
   * At present, tasks can only be created from plaintext without record reference formatting.
   *
   * Required scopes: `task:read-write`, `object_configuration:read`, `record_permission:read`, `user_management:read`.
   */
  async postV2Tasks(
    request: operations.PostV2TasksRequestBody,
    options?: RequestOptions,
  ): Promise<operations.PostV2TasksResponseBody> {
    return unwrapAsync(tasksPostV2Tasks(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a task
   *
   * @remarks
   * Get a single task by ID.
   *
   * Required scopes: `task:read`, `object_configuration:read`, `record_permission:read`, `user_management:read`.
   */
  async getV2TasksTaskId(
    request: operations.GetV2TasksTaskIdRequest,
    options?: RequestOptions,
  ): Promise<operations.GetV2TasksTaskIdResponseBody> {
    return unwrapAsync(tasksGetV2TasksTaskId(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a task
   *
   * @remarks
   * Updates an existing task by `task_id`. At present, only the `deadline_at`, `is_completed`, `linked_records`, and `assignees` fields can be updated.
   *
   * Required scopes: `task:read-write`, `object_configuration:read`, `record_permission:read`, `user_management:read`.
   */
  async patchV2TasksTaskId(
    request: operations.PatchV2TasksTaskIdRequest,
    options?: RequestOptions,
  ): Promise<operations.PatchV2TasksTaskIdResponseBody> {
    return unwrapAsync(tasksPatchV2TasksTaskId(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a task
   *
   * @remarks
   * Delete a task by ID.
   *
   * Required scopes: `task:read-write`.
   */
  async deleteV2TasksTaskId(
    request: operations.DeleteV2TasksTaskIdRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteV2TasksTaskIdResponseBody> {
    return unwrapAsync(tasksDeleteV2TasksTaskId(
      this,
      request,
      options,
    ));
  }
}
