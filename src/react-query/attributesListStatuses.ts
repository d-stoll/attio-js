/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { AttioCore } from "../core.js";
import { attributesListStatuses } from "../funcs/attributesListStatuses.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useAttioContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type AttributesListStatusesQueryData =
  operations.GetV2TargetIdentifierAttributesAttributeStatusesResponseBody;

/**
 * List statuses
 *
 * @remarks
 * Lists all statuses for a particular status attribute on either an object or a list.
 *
 * Required scopes: `object_configuration:read`.
 */
export function useAttributesListStatuses(
  request: operations.GetV2TargetIdentifierAttributesAttributeStatusesRequest,
  options?: QueryHookOptions<AttributesListStatusesQueryData>,
): UseQueryResult<AttributesListStatusesQueryData, Error> {
  const client = useAttioContext();
  return useQuery({
    ...buildAttributesListStatusesQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * List statuses
 *
 * @remarks
 * Lists all statuses for a particular status attribute on either an object or a list.
 *
 * Required scopes: `object_configuration:read`.
 */
export function useAttributesListStatusesSuspense(
  request: operations.GetV2TargetIdentifierAttributesAttributeStatusesRequest,
  options?: SuspenseQueryHookOptions<AttributesListStatusesQueryData>,
): UseSuspenseQueryResult<AttributesListStatusesQueryData, Error> {
  const client = useAttioContext();
  return useSuspenseQuery({
    ...buildAttributesListStatusesQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchAttributesListStatuses(
  queryClient: QueryClient,
  client$: AttioCore,
  request: operations.GetV2TargetIdentifierAttributesAttributeStatusesRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildAttributesListStatusesQuery(
      client$,
      request,
    ),
  });
}

export function setAttributesListStatusesData(
  client: QueryClient,
  queryKeyBase: [
    target:
      operations.GetV2TargetIdentifierAttributesAttributeStatusesPathParamTarget,
    identifier: string,
    attribute: string,
    parameters: { showArchived?: boolean | undefined },
  ],
  data: AttributesListStatusesQueryData,
): AttributesListStatusesQueryData | undefined {
  const key = queryKeyAttributesListStatuses(...queryKeyBase);

  return client.setQueryData<AttributesListStatusesQueryData>(key, data);
}

export function invalidateAttributesListStatuses(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [
      target:
        operations.GetV2TargetIdentifierAttributesAttributeStatusesPathParamTarget,
      identifier: string,
      attribute: string,
      parameters: { showArchived?: boolean | undefined },
    ]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["attio-js", "Attributes", "listStatuses", ...queryKeyBase],
  });
}

export function invalidateAllAttributesListStatuses(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["attio-js", "Attributes", "listStatuses"],
  });
}

export function buildAttributesListStatusesQuery(
  client$: AttioCore,
  request: operations.GetV2TargetIdentifierAttributesAttributeStatusesRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<AttributesListStatusesQueryData>;
} {
  return {
    queryKey: queryKeyAttributesListStatuses(
      request.target,
      request.identifier,
      request.attribute,
      { showArchived: request.showArchived },
    ),
    queryFn: async function attributesListStatusesQueryFn(
      ctx,
    ): Promise<AttributesListStatusesQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(attributesListStatuses(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyAttributesListStatuses(
  target:
    operations.GetV2TargetIdentifierAttributesAttributeStatusesPathParamTarget,
  identifier: string,
  attribute: string,
  parameters: { showArchived?: boolean | undefined },
): QueryKey {
  return [
    "attio-js",
    "Attributes",
    "listStatuses",
    target,
    identifier,
    attribute,
    parameters,
  ];
}
