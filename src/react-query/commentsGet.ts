/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { AttioCore } from "../core.js";
import { commentsGet } from "../funcs/commentsGet.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useAttioContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type CommentsGetQueryData =
  operations.GetV2CommentsCommentIdResponseBody;

/**
 * Get a comment
 *
 * @remarks
 * Get a single comment by ID.
 *
 * To view comments on records, you will need the `object_configuration:read` and `record_permission:read` scopes.
 *
 * To view comments on list entries, you will need the `list_configuration:read` and `list_entry:read` scopes.
 *
 * Required scopes: `comment:read`.
 */
export function useCommentsGet(
  request: operations.GetV2CommentsCommentIdRequest,
  options?: QueryHookOptions<CommentsGetQueryData>,
): UseQueryResult<CommentsGetQueryData, Error> {
  const client = useAttioContext();
  return useQuery({
    ...buildCommentsGetQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get a comment
 *
 * @remarks
 * Get a single comment by ID.
 *
 * To view comments on records, you will need the `object_configuration:read` and `record_permission:read` scopes.
 *
 * To view comments on list entries, you will need the `list_configuration:read` and `list_entry:read` scopes.
 *
 * Required scopes: `comment:read`.
 */
export function useCommentsGetSuspense(
  request: operations.GetV2CommentsCommentIdRequest,
  options?: SuspenseQueryHookOptions<CommentsGetQueryData>,
): UseSuspenseQueryResult<CommentsGetQueryData, Error> {
  const client = useAttioContext();
  return useSuspenseQuery({
    ...buildCommentsGetQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchCommentsGet(
  queryClient: QueryClient,
  client$: AttioCore,
  request: operations.GetV2CommentsCommentIdRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildCommentsGetQuery(
      client$,
      request,
    ),
  });
}

export function setCommentsGetData(
  client: QueryClient,
  queryKeyBase: [commentId: string],
  data: CommentsGetQueryData,
): CommentsGetQueryData | undefined {
  const key = queryKeyCommentsGet(...queryKeyBase);

  return client.setQueryData<CommentsGetQueryData>(key, data);
}

export function invalidateCommentsGet(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<[commentId: string]>,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["attio-js", "Comments", "get", ...queryKeyBase],
  });
}

export function invalidateAllCommentsGet(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["attio-js", "Comments", "get"],
  });
}

export function buildCommentsGetQuery(
  client$: AttioCore,
  request: operations.GetV2CommentsCommentIdRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<CommentsGetQueryData>;
} {
  return {
    queryKey: queryKeyCommentsGet(request.commentId),
    queryFn: async function commentsGetQueryFn(
      ctx,
    ): Promise<CommentsGetQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(commentsGet(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyCommentsGet(commentId: string): QueryKey {
  return ["attio-js", "Comments", "get", commentId];
}
