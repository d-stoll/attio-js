/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The direction to sort the results by.
 */
export const SortsDirection = {
  Asc: "asc",
  Desc: "desc",
} as const;
/**
 * The direction to sort the results by.
 */
export type SortsDirection = ClosedEnum<typeof SortsDirection>;

/**
 * Sort by path
 */
export type Sorts2 = {
  /**
   * The direction to sort the results by.
   */
  direction: SortsDirection;
  /**
   * You may use the `path` property to traverse record reference attributes and parent records on list entries. `path` accepts an array of tuples where the first element of each tuple is the slug or ID of a list/object, and the second element is the slug or ID of an attribute on that list/object. The first element of the first tuple must correspond to the list or object that you are querying. For example, if you wanted to sort by the name of the parent record (a company) on a list with the slug "sales", you would pass the value `[['sales', 'parent_record'], ['companies', 'name']]`.
   */
  path: Array<Array<string>>;
  /**
   * Which field on the value to sort by e.g. "last_name" on a name value.
   */
  field?: string | undefined;
};

/**
 * The direction to sort the results by.
 */
export const Direction = {
  Asc: "asc",
  Desc: "desc",
} as const;
/**
 * The direction to sort the results by.
 */
export type Direction = ClosedEnum<typeof Direction>;

/**
 * Sort by attribute
 */
export type Sorts1 = {
  /**
   * The direction to sort the results by.
   */
  direction: Direction;
  /**
   * A slug or ID to identify the attribute to sort by.
   */
  attribute: string;
  /**
   * Which field on the value to sort by e.g. "last_name" on a name value.
   */
  field?: string | undefined;
};

export type Sorts = Sorts1 | Sorts2;

export type PostV2ObjectsObjectRecordsQueryRequestBody = {
  /**
   * An object used to filter results to a subset of results. See the [full guide to filtering and sorting here](/docs/filtering-and-sorting).
   */
  filter?: { [k: string]: any } | undefined;
  /**
   * An object used to sort results. See the [full guide to filtering and sorting here](/docs/filtering-and-sorting).
   */
  sorts?: Array<Sorts1 | Sorts2> | undefined;
  /**
   * The maximum number of results to return. Defaults to 500. See the [full guide to pagination here](/docs/pagination).
   */
  limit?: number | undefined;
  /**
   * The number of results to skip over before returning. Defaults to 0. See the [full guide to pagination here](/docs/pagination).
   */
  offset?: number | undefined;
};

export type PostV2ObjectsObjectRecordsQueryRequest = {
  object: string;
  requestBody: PostV2ObjectsObjectRecordsQueryRequestBody;
};

export type Id = {
  /**
   * A UUID identifying the workspace this record belongs to.
   */
  workspaceId: string;
  /**
   * A UUID identifying the object this record belongs to.
   */
  objectId: string;
  /**
   * A UUID identifying this record.
   */
  recordId: string;
};

/**
 * A record type with an attribute `api_slug` as the key, and an array of value objects as the values.
 */
export type PostV2ObjectsObjectRecordsQueryValues = {};

export type PostV2ObjectsObjectRecordsQueryData = {
  id: Id;
  /**
   * When this record was created.
   */
  createdAt: string;
  /**
   * A record type with an attribute `api_slug` as the key, and an array of value objects as the values.
   */
  values: PostV2ObjectsObjectRecordsQueryValues;
};

/**
 * Success
 */
export type PostV2ObjectsObjectRecordsQueryResponseBody = {
  data: Array<PostV2ObjectsObjectRecordsQueryData>;
};

/** @internal */
export const SortsDirection$inboundSchema: z.ZodNativeEnum<
  typeof SortsDirection
> = z.nativeEnum(SortsDirection);

/** @internal */
export const SortsDirection$outboundSchema: z.ZodNativeEnum<
  typeof SortsDirection
> = SortsDirection$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SortsDirection$ {
  /** @deprecated use `SortsDirection$inboundSchema` instead. */
  export const inboundSchema = SortsDirection$inboundSchema;
  /** @deprecated use `SortsDirection$outboundSchema` instead. */
  export const outboundSchema = SortsDirection$outboundSchema;
}

/** @internal */
export const Sorts2$inboundSchema: z.ZodType<Sorts2, z.ZodTypeDef, unknown> = z
  .object({
    direction: SortsDirection$inboundSchema,
    path: z.array(z.array(z.string())),
    field: z.string().optional(),
  });

/** @internal */
export type Sorts2$Outbound = {
  direction: string;
  path: Array<Array<string>>;
  field?: string | undefined;
};

/** @internal */
export const Sorts2$outboundSchema: z.ZodType<
  Sorts2$Outbound,
  z.ZodTypeDef,
  Sorts2
> = z.object({
  direction: SortsDirection$outboundSchema,
  path: z.array(z.array(z.string())),
  field: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Sorts2$ {
  /** @deprecated use `Sorts2$inboundSchema` instead. */
  export const inboundSchema = Sorts2$inboundSchema;
  /** @deprecated use `Sorts2$outboundSchema` instead. */
  export const outboundSchema = Sorts2$outboundSchema;
  /** @deprecated use `Sorts2$Outbound` instead. */
  export type Outbound = Sorts2$Outbound;
}

export function sorts2ToJSON(sorts2: Sorts2): string {
  return JSON.stringify(Sorts2$outboundSchema.parse(sorts2));
}

export function sorts2FromJSON(
  jsonString: string,
): SafeParseResult<Sorts2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Sorts2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Sorts2' from JSON`,
  );
}

/** @internal */
export const Direction$inboundSchema: z.ZodNativeEnum<typeof Direction> = z
  .nativeEnum(Direction);

/** @internal */
export const Direction$outboundSchema: z.ZodNativeEnum<typeof Direction> =
  Direction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Direction$ {
  /** @deprecated use `Direction$inboundSchema` instead. */
  export const inboundSchema = Direction$inboundSchema;
  /** @deprecated use `Direction$outboundSchema` instead. */
  export const outboundSchema = Direction$outboundSchema;
}

/** @internal */
export const Sorts1$inboundSchema: z.ZodType<Sorts1, z.ZodTypeDef, unknown> = z
  .object({
    direction: Direction$inboundSchema,
    attribute: z.string(),
    field: z.string().optional(),
  });

/** @internal */
export type Sorts1$Outbound = {
  direction: string;
  attribute: string;
  field?: string | undefined;
};

/** @internal */
export const Sorts1$outboundSchema: z.ZodType<
  Sorts1$Outbound,
  z.ZodTypeDef,
  Sorts1
> = z.object({
  direction: Direction$outboundSchema,
  attribute: z.string(),
  field: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Sorts1$ {
  /** @deprecated use `Sorts1$inboundSchema` instead. */
  export const inboundSchema = Sorts1$inboundSchema;
  /** @deprecated use `Sorts1$outboundSchema` instead. */
  export const outboundSchema = Sorts1$outboundSchema;
  /** @deprecated use `Sorts1$Outbound` instead. */
  export type Outbound = Sorts1$Outbound;
}

export function sorts1ToJSON(sorts1: Sorts1): string {
  return JSON.stringify(Sorts1$outboundSchema.parse(sorts1));
}

export function sorts1FromJSON(
  jsonString: string,
): SafeParseResult<Sorts1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Sorts1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Sorts1' from JSON`,
  );
}

/** @internal */
export const Sorts$inboundSchema: z.ZodType<Sorts, z.ZodTypeDef, unknown> = z
  .union([
    z.lazy(() => Sorts1$inboundSchema),
    z.lazy(() => Sorts2$inboundSchema),
  ]);

/** @internal */
export type Sorts$Outbound = Sorts1$Outbound | Sorts2$Outbound;

/** @internal */
export const Sorts$outboundSchema: z.ZodType<
  Sorts$Outbound,
  z.ZodTypeDef,
  Sorts
> = z.union([
  z.lazy(() => Sorts1$outboundSchema),
  z.lazy(() => Sorts2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Sorts$ {
  /** @deprecated use `Sorts$inboundSchema` instead. */
  export const inboundSchema = Sorts$inboundSchema;
  /** @deprecated use `Sorts$outboundSchema` instead. */
  export const outboundSchema = Sorts$outboundSchema;
  /** @deprecated use `Sorts$Outbound` instead. */
  export type Outbound = Sorts$Outbound;
}

export function sortsToJSON(sorts: Sorts): string {
  return JSON.stringify(Sorts$outboundSchema.parse(sorts));
}

export function sortsFromJSON(
  jsonString: string,
): SafeParseResult<Sorts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Sorts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Sorts' from JSON`,
  );
}

/** @internal */
export const PostV2ObjectsObjectRecordsQueryRequestBody$inboundSchema:
  z.ZodType<PostV2ObjectsObjectRecordsQueryRequestBody, z.ZodTypeDef, unknown> =
    z.object({
      filter: z.record(z.any()).optional(),
      sorts: z.array(
        z.union([
          z.lazy(() => Sorts1$inboundSchema),
          z.lazy(() => Sorts2$inboundSchema),
        ]),
      ).optional(),
      limit: z.number().optional(),
      offset: z.number().optional(),
    });

/** @internal */
export type PostV2ObjectsObjectRecordsQueryRequestBody$Outbound = {
  filter?: { [k: string]: any } | undefined;
  sorts?: Array<Sorts1$Outbound | Sorts2$Outbound> | undefined;
  limit?: number | undefined;
  offset?: number | undefined;
};

/** @internal */
export const PostV2ObjectsObjectRecordsQueryRequestBody$outboundSchema:
  z.ZodType<
    PostV2ObjectsObjectRecordsQueryRequestBody$Outbound,
    z.ZodTypeDef,
    PostV2ObjectsObjectRecordsQueryRequestBody
  > = z.object({
    filter: z.record(z.any()).optional(),
    sorts: z.array(
      z.union([
        z.lazy(() => Sorts1$outboundSchema),
        z.lazy(() => Sorts2$outboundSchema),
      ]),
    ).optional(),
    limit: z.number().optional(),
    offset: z.number().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ObjectsObjectRecordsQueryRequestBody$ {
  /** @deprecated use `PostV2ObjectsObjectRecordsQueryRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PostV2ObjectsObjectRecordsQueryRequestBody$inboundSchema;
  /** @deprecated use `PostV2ObjectsObjectRecordsQueryRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PostV2ObjectsObjectRecordsQueryRequestBody$outboundSchema;
  /** @deprecated use `PostV2ObjectsObjectRecordsQueryRequestBody$Outbound` instead. */
  export type Outbound = PostV2ObjectsObjectRecordsQueryRequestBody$Outbound;
}

export function postV2ObjectsObjectRecordsQueryRequestBodyToJSON(
  postV2ObjectsObjectRecordsQueryRequestBody:
    PostV2ObjectsObjectRecordsQueryRequestBody,
): string {
  return JSON.stringify(
    PostV2ObjectsObjectRecordsQueryRequestBody$outboundSchema.parse(
      postV2ObjectsObjectRecordsQueryRequestBody,
    ),
  );
}

export function postV2ObjectsObjectRecordsQueryRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PostV2ObjectsObjectRecordsQueryRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostV2ObjectsObjectRecordsQueryRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostV2ObjectsObjectRecordsQueryRequestBody' from JSON`,
  );
}

/** @internal */
export const PostV2ObjectsObjectRecordsQueryRequest$inboundSchema: z.ZodType<
  PostV2ObjectsObjectRecordsQueryRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: z.string(),
  RequestBody: z.lazy(() =>
    PostV2ObjectsObjectRecordsQueryRequestBody$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PostV2ObjectsObjectRecordsQueryRequest$Outbound = {
  object: string;
  RequestBody: PostV2ObjectsObjectRecordsQueryRequestBody$Outbound;
};

/** @internal */
export const PostV2ObjectsObjectRecordsQueryRequest$outboundSchema: z.ZodType<
  PostV2ObjectsObjectRecordsQueryRequest$Outbound,
  z.ZodTypeDef,
  PostV2ObjectsObjectRecordsQueryRequest
> = z.object({
  object: z.string(),
  requestBody: z.lazy(() =>
    PostV2ObjectsObjectRecordsQueryRequestBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ObjectsObjectRecordsQueryRequest$ {
  /** @deprecated use `PostV2ObjectsObjectRecordsQueryRequest$inboundSchema` instead. */
  export const inboundSchema =
    PostV2ObjectsObjectRecordsQueryRequest$inboundSchema;
  /** @deprecated use `PostV2ObjectsObjectRecordsQueryRequest$outboundSchema` instead. */
  export const outboundSchema =
    PostV2ObjectsObjectRecordsQueryRequest$outboundSchema;
  /** @deprecated use `PostV2ObjectsObjectRecordsQueryRequest$Outbound` instead. */
  export type Outbound = PostV2ObjectsObjectRecordsQueryRequest$Outbound;
}

export function postV2ObjectsObjectRecordsQueryRequestToJSON(
  postV2ObjectsObjectRecordsQueryRequest:
    PostV2ObjectsObjectRecordsQueryRequest,
): string {
  return JSON.stringify(
    PostV2ObjectsObjectRecordsQueryRequest$outboundSchema.parse(
      postV2ObjectsObjectRecordsQueryRequest,
    ),
  );
}

export function postV2ObjectsObjectRecordsQueryRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostV2ObjectsObjectRecordsQueryRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PostV2ObjectsObjectRecordsQueryRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV2ObjectsObjectRecordsQueryRequest' from JSON`,
  );
}

/** @internal */
export const Id$inboundSchema: z.ZodType<Id, z.ZodTypeDef, unknown> = z.object({
  workspace_id: z.string(),
  object_id: z.string(),
  record_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "workspace_id": "workspaceId",
    "object_id": "objectId",
    "record_id": "recordId",
  });
});

/** @internal */
export type Id$Outbound = {
  workspace_id: string;
  object_id: string;
  record_id: string;
};

/** @internal */
export const Id$outboundSchema: z.ZodType<Id$Outbound, z.ZodTypeDef, Id> = z
  .object({
    workspaceId: z.string(),
    objectId: z.string(),
    recordId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      workspaceId: "workspace_id",
      objectId: "object_id",
      recordId: "record_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Id$ {
  /** @deprecated use `Id$inboundSchema` instead. */
  export const inboundSchema = Id$inboundSchema;
  /** @deprecated use `Id$outboundSchema` instead. */
  export const outboundSchema = Id$outboundSchema;
  /** @deprecated use `Id$Outbound` instead. */
  export type Outbound = Id$Outbound;
}

export function idToJSON(id: Id): string {
  return JSON.stringify(Id$outboundSchema.parse(id));
}

export function idFromJSON(
  jsonString: string,
): SafeParseResult<Id, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Id$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Id' from JSON`,
  );
}

/** @internal */
export const PostV2ObjectsObjectRecordsQueryValues$inboundSchema: z.ZodType<
  PostV2ObjectsObjectRecordsQueryValues,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type PostV2ObjectsObjectRecordsQueryValues$Outbound = {};

/** @internal */
export const PostV2ObjectsObjectRecordsQueryValues$outboundSchema: z.ZodType<
  PostV2ObjectsObjectRecordsQueryValues$Outbound,
  z.ZodTypeDef,
  PostV2ObjectsObjectRecordsQueryValues
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ObjectsObjectRecordsQueryValues$ {
  /** @deprecated use `PostV2ObjectsObjectRecordsQueryValues$inboundSchema` instead. */
  export const inboundSchema =
    PostV2ObjectsObjectRecordsQueryValues$inboundSchema;
  /** @deprecated use `PostV2ObjectsObjectRecordsQueryValues$outboundSchema` instead. */
  export const outboundSchema =
    PostV2ObjectsObjectRecordsQueryValues$outboundSchema;
  /** @deprecated use `PostV2ObjectsObjectRecordsQueryValues$Outbound` instead. */
  export type Outbound = PostV2ObjectsObjectRecordsQueryValues$Outbound;
}

export function postV2ObjectsObjectRecordsQueryValuesToJSON(
  postV2ObjectsObjectRecordsQueryValues: PostV2ObjectsObjectRecordsQueryValues,
): string {
  return JSON.stringify(
    PostV2ObjectsObjectRecordsQueryValues$outboundSchema.parse(
      postV2ObjectsObjectRecordsQueryValues,
    ),
  );
}

export function postV2ObjectsObjectRecordsQueryValuesFromJSON(
  jsonString: string,
): SafeParseResult<PostV2ObjectsObjectRecordsQueryValues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PostV2ObjectsObjectRecordsQueryValues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV2ObjectsObjectRecordsQueryValues' from JSON`,
  );
}

/** @internal */
export const PostV2ObjectsObjectRecordsQueryData$inboundSchema: z.ZodType<
  PostV2ObjectsObjectRecordsQueryData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.lazy(() => Id$inboundSchema),
  created_at: z.string(),
  values: z.lazy(() => PostV2ObjectsObjectRecordsQueryValues$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
  });
});

/** @internal */
export type PostV2ObjectsObjectRecordsQueryData$Outbound = {
  id: Id$Outbound;
  created_at: string;
  values: PostV2ObjectsObjectRecordsQueryValues$Outbound;
};

/** @internal */
export const PostV2ObjectsObjectRecordsQueryData$outboundSchema: z.ZodType<
  PostV2ObjectsObjectRecordsQueryData$Outbound,
  z.ZodTypeDef,
  PostV2ObjectsObjectRecordsQueryData
> = z.object({
  id: z.lazy(() => Id$outboundSchema),
  createdAt: z.string(),
  values: z.lazy(() => PostV2ObjectsObjectRecordsQueryValues$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ObjectsObjectRecordsQueryData$ {
  /** @deprecated use `PostV2ObjectsObjectRecordsQueryData$inboundSchema` instead. */
  export const inboundSchema =
    PostV2ObjectsObjectRecordsQueryData$inboundSchema;
  /** @deprecated use `PostV2ObjectsObjectRecordsQueryData$outboundSchema` instead. */
  export const outboundSchema =
    PostV2ObjectsObjectRecordsQueryData$outboundSchema;
  /** @deprecated use `PostV2ObjectsObjectRecordsQueryData$Outbound` instead. */
  export type Outbound = PostV2ObjectsObjectRecordsQueryData$Outbound;
}

export function postV2ObjectsObjectRecordsQueryDataToJSON(
  postV2ObjectsObjectRecordsQueryData: PostV2ObjectsObjectRecordsQueryData,
): string {
  return JSON.stringify(
    PostV2ObjectsObjectRecordsQueryData$outboundSchema.parse(
      postV2ObjectsObjectRecordsQueryData,
    ),
  );
}

export function postV2ObjectsObjectRecordsQueryDataFromJSON(
  jsonString: string,
): SafeParseResult<PostV2ObjectsObjectRecordsQueryData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PostV2ObjectsObjectRecordsQueryData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV2ObjectsObjectRecordsQueryData' from JSON`,
  );
}

/** @internal */
export const PostV2ObjectsObjectRecordsQueryResponseBody$inboundSchema:
  z.ZodType<
    PostV2ObjectsObjectRecordsQueryResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    data: z.array(
      z.lazy(() => PostV2ObjectsObjectRecordsQueryData$inboundSchema),
    ),
  });

/** @internal */
export type PostV2ObjectsObjectRecordsQueryResponseBody$Outbound = {
  data: Array<PostV2ObjectsObjectRecordsQueryData$Outbound>;
};

/** @internal */
export const PostV2ObjectsObjectRecordsQueryResponseBody$outboundSchema:
  z.ZodType<
    PostV2ObjectsObjectRecordsQueryResponseBody$Outbound,
    z.ZodTypeDef,
    PostV2ObjectsObjectRecordsQueryResponseBody
  > = z.object({
    data: z.array(
      z.lazy(() => PostV2ObjectsObjectRecordsQueryData$outboundSchema),
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ObjectsObjectRecordsQueryResponseBody$ {
  /** @deprecated use `PostV2ObjectsObjectRecordsQueryResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PostV2ObjectsObjectRecordsQueryResponseBody$inboundSchema;
  /** @deprecated use `PostV2ObjectsObjectRecordsQueryResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PostV2ObjectsObjectRecordsQueryResponseBody$outboundSchema;
  /** @deprecated use `PostV2ObjectsObjectRecordsQueryResponseBody$Outbound` instead. */
  export type Outbound = PostV2ObjectsObjectRecordsQueryResponseBody$Outbound;
}

export function postV2ObjectsObjectRecordsQueryResponseBodyToJSON(
  postV2ObjectsObjectRecordsQueryResponseBody:
    PostV2ObjectsObjectRecordsQueryResponseBody,
): string {
  return JSON.stringify(
    PostV2ObjectsObjectRecordsQueryResponseBody$outboundSchema.parse(
      postV2ObjectsObjectRecordsQueryResponseBody,
    ),
  );
}

export function postV2ObjectsObjectRecordsQueryResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PostV2ObjectsObjectRecordsQueryResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostV2ObjectsObjectRecordsQueryResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostV2ObjectsObjectRecordsQueryResponseBody' from JSON`,
  );
}
