/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { AttioCore } from "../core.js";
import { recordsListEntries } from "../funcs/recordsListEntries.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useAttioContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type RecordsListEntriesQueryData =
  operations.GetV2ObjectsObjectRecordsRecordIdEntriesResponseBody;

/**
 * List record entries
 *
 * @remarks
 * List all entries, across all lists, for which this record is the parent.
 *
 * Required scopes: `record_permission:read`, `object_configuration:read`, `list_entry:read`.
 */
export function useRecordsListEntries(
  request: operations.GetV2ObjectsObjectRecordsRecordIdEntriesRequest,
  options?: QueryHookOptions<RecordsListEntriesQueryData>,
): UseQueryResult<RecordsListEntriesQueryData, Error> {
  const client = useAttioContext();
  return useQuery({
    ...buildRecordsListEntriesQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * List record entries
 *
 * @remarks
 * List all entries, across all lists, for which this record is the parent.
 *
 * Required scopes: `record_permission:read`, `object_configuration:read`, `list_entry:read`.
 */
export function useRecordsListEntriesSuspense(
  request: operations.GetV2ObjectsObjectRecordsRecordIdEntriesRequest,
  options?: SuspenseQueryHookOptions<RecordsListEntriesQueryData>,
): UseSuspenseQueryResult<RecordsListEntriesQueryData, Error> {
  const client = useAttioContext();
  return useSuspenseQuery({
    ...buildRecordsListEntriesQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchRecordsListEntries(
  queryClient: QueryClient,
  client$: AttioCore,
  request: operations.GetV2ObjectsObjectRecordsRecordIdEntriesRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildRecordsListEntriesQuery(
      client$,
      request,
    ),
  });
}

export function setRecordsListEntriesData(
  client: QueryClient,
  queryKeyBase: [
    object: string,
    recordId: string,
    parameters: { limit?: number | undefined; offset?: number | undefined },
  ],
  data: RecordsListEntriesQueryData,
): RecordsListEntriesQueryData | undefined {
  const key = queryKeyRecordsListEntries(...queryKeyBase);

  return client.setQueryData<RecordsListEntriesQueryData>(key, data);
}

export function invalidateRecordsListEntries(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [
      object: string,
      recordId: string,
      parameters: { limit?: number | undefined; offset?: number | undefined },
    ]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["attio-js", "Records", "listEntries", ...queryKeyBase],
  });
}

export function invalidateAllRecordsListEntries(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["attio-js", "Records", "listEntries"],
  });
}

export function buildRecordsListEntriesQuery(
  client$: AttioCore,
  request: operations.GetV2ObjectsObjectRecordsRecordIdEntriesRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<RecordsListEntriesQueryData>;
} {
  return {
    queryKey: queryKeyRecordsListEntries(request.object, request.recordId, {
      limit: request.limit,
      offset: request.offset,
    }),
    queryFn: async function recordsListEntriesQueryFn(
      ctx,
    ): Promise<RecordsListEntriesQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(recordsListEntries(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyRecordsListEntries(
  object: string,
  recordId: string,
  parameters: { limit?: number | undefined; offset?: number | undefined },
): QueryKey {
  return ["attio-js", "Records", "listEntries", object, recordId, parameters];
}
