/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";

export const PatchV2WebhooksWebhookIdType = {
  InvalidRequestError: "invalid_request_error",
} as const;
export type PatchV2WebhooksWebhookIdType = ClosedEnum<
  typeof PatchV2WebhooksWebhookIdType
>;

export const PatchV2WebhooksWebhookIdCode = {
  NotFound: "not_found",
} as const;
export type PatchV2WebhooksWebhookIdCode = ClosedEnum<
  typeof PatchV2WebhooksWebhookIdCode
>;

/**
 * Not Found
 */
export type PatchV2WebhooksWebhookIdResponseBodyData = {
  statusCode: number;
  type: PatchV2WebhooksWebhookIdType;
  code: PatchV2WebhooksWebhookIdCode;
  message: string;
};

/**
 * Not Found
 */
export class PatchV2WebhooksWebhookIdResponseBody extends Error {
  statusCode: number;
  type: PatchV2WebhooksWebhookIdType;
  code: PatchV2WebhooksWebhookIdCode;

  /** The original data that was passed to this error instance. */
  data$: PatchV2WebhooksWebhookIdResponseBodyData;

  constructor(err: PatchV2WebhooksWebhookIdResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.statusCode = err.statusCode;
    this.type = err.type;
    this.code = err.code;

    this.name = "PatchV2WebhooksWebhookIdResponseBody";
  }
}

/** @internal */
export const PatchV2WebhooksWebhookIdType$inboundSchema: z.ZodNativeEnum<
  typeof PatchV2WebhooksWebhookIdType
> = z.nativeEnum(PatchV2WebhooksWebhookIdType);

/** @internal */
export const PatchV2WebhooksWebhookIdType$outboundSchema: z.ZodNativeEnum<
  typeof PatchV2WebhooksWebhookIdType
> = PatchV2WebhooksWebhookIdType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2WebhooksWebhookIdType$ {
  /** @deprecated use `PatchV2WebhooksWebhookIdType$inboundSchema` instead. */
  export const inboundSchema = PatchV2WebhooksWebhookIdType$inboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdType$outboundSchema` instead. */
  export const outboundSchema = PatchV2WebhooksWebhookIdType$outboundSchema;
}

/** @internal */
export const PatchV2WebhooksWebhookIdCode$inboundSchema: z.ZodNativeEnum<
  typeof PatchV2WebhooksWebhookIdCode
> = z.nativeEnum(PatchV2WebhooksWebhookIdCode);

/** @internal */
export const PatchV2WebhooksWebhookIdCode$outboundSchema: z.ZodNativeEnum<
  typeof PatchV2WebhooksWebhookIdCode
> = PatchV2WebhooksWebhookIdCode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2WebhooksWebhookIdCode$ {
  /** @deprecated use `PatchV2WebhooksWebhookIdCode$inboundSchema` instead. */
  export const inboundSchema = PatchV2WebhooksWebhookIdCode$inboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdCode$outboundSchema` instead. */
  export const outboundSchema = PatchV2WebhooksWebhookIdCode$outboundSchema;
}

/** @internal */
export const PatchV2WebhooksWebhookIdResponseBody$inboundSchema: z.ZodType<
  PatchV2WebhooksWebhookIdResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number(),
  type: PatchV2WebhooksWebhookIdType$inboundSchema,
  code: PatchV2WebhooksWebhookIdCode$inboundSchema,
  message: z.string(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
    });

    return new PatchV2WebhooksWebhookIdResponseBody(remapped);
  });

/** @internal */
export type PatchV2WebhooksWebhookIdResponseBody$Outbound = {
  status_code: number;
  type: string;
  code: string;
  message: string;
};

/** @internal */
export const PatchV2WebhooksWebhookIdResponseBody$outboundSchema: z.ZodType<
  PatchV2WebhooksWebhookIdResponseBody$Outbound,
  z.ZodTypeDef,
  PatchV2WebhooksWebhookIdResponseBody
> = z.instanceof(PatchV2WebhooksWebhookIdResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number(),
      type: PatchV2WebhooksWebhookIdType$outboundSchema,
      code: PatchV2WebhooksWebhookIdCode$outboundSchema,
      message: z.string(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2WebhooksWebhookIdResponseBody$ {
  /** @deprecated use `PatchV2WebhooksWebhookIdResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PatchV2WebhooksWebhookIdResponseBody$inboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PatchV2WebhooksWebhookIdResponseBody$outboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdResponseBody$Outbound` instead. */
  export type Outbound = PatchV2WebhooksWebhookIdResponseBody$Outbound;
}
