/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { AttioCore } from "../core.js";
import { listsCreate } from "../funcs/listsCreate.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useAttioContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type ListsCreateMutationVariables = {
  request: operations.PostV2ListsRequestBody;
  options?: RequestOptions;
};

export type ListsCreateMutationData = operations.PostV2ListsResponseBody;

/**
 * Create a list
 *
 * @remarks
 * Creates a new list.
 *
 * Once you have your list, add attributes to it using the [Create attribute](/reference/post_v2-target-identifier-attributes) API, and add records to it using the [Add records to list](/reference/post_v2-lists-list-entries) API.
 *
 * New lists must specify which records can be added with the `parent_object` parameter which accepts either an object slug or an object ID. Permissions for the list are controlled with the `workspace_access` and `workspace_member_access` parameters.
 *
 * Please note that new lists must have either `workspace_access` set to `"full-access"` or one or more element of `workspace_member_access` with a `"full-access"` level. It is also possible to receive a `403` billing error if your workspace is not on a plan that supports either advanced workspace or workspace member-level access for lists.
 *
 * Required scopes: `list_configuration:read-write`.
 */
export function useListsCreateMutation(
  options?: MutationHookOptions<
    ListsCreateMutationData,
    Error,
    ListsCreateMutationVariables
  >,
): UseMutationResult<
  ListsCreateMutationData,
  Error,
  ListsCreateMutationVariables
> {
  const client = useAttioContext();
  return useMutation({
    ...buildListsCreateMutation(client, options),
    ...options,
  });
}

export function mutationKeyListsCreate(): MutationKey {
  return ["attio-js", "Lists", "create"];
}

export function buildListsCreateMutation(
  client$: AttioCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: ListsCreateMutationVariables,
  ) => Promise<ListsCreateMutationData>;
} {
  return {
    mutationKey: mutationKeyListsCreate(),
    mutationFn: function listsCreateMutationFn({
      request,
      options,
    }): Promise<ListsCreateMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(listsCreate(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
