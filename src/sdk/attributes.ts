/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { attributesGetV2TargetIdentifierAttributes } from "../funcs/attributesGetV2TargetIdentifierAttributes.js";
import { attributesGetV2TargetIdentifierAttributesAttribute } from "../funcs/attributesGetV2TargetIdentifierAttributesAttribute.js";
import { attributesGetV2TargetIdentifierAttributesAttributeOptions } from "../funcs/attributesGetV2TargetIdentifierAttributesAttributeOptions.js";
import { attributesGetV2TargetIdentifierAttributesAttributeStatuses } from "../funcs/attributesGetV2TargetIdentifierAttributesAttributeStatuses.js";
import { attributesPatchV2TargetIdentifierAttributesAttribute } from "../funcs/attributesPatchV2TargetIdentifierAttributesAttribute.js";
import { attributesPatchV2TargetIdentifierAttributesAttributeOptionsOption } from "../funcs/attributesPatchV2TargetIdentifierAttributesAttributeOptionsOption.js";
import { attributesPatchV2TargetIdentifierAttributesAttributeStatusesStatus } from "../funcs/attributesPatchV2TargetIdentifierAttributesAttributeStatusesStatus.js";
import { attributesPostV2TargetIdentifierAttributes } from "../funcs/attributesPostV2TargetIdentifierAttributes.js";
import { attributesPostV2TargetIdentifierAttributesAttributeOptions } from "../funcs/attributesPostV2TargetIdentifierAttributesAttributeOptions.js";
import { attributesPostV2TargetIdentifierAttributesAttributeStatuses } from "../funcs/attributesPostV2TargetIdentifierAttributesAttributeStatuses.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Attributes extends ClientSDK {
  /**
   * List attributes
   *
   * @remarks
   * Lists all attributes defined on a specific object or list. Attributes are returned in the order that they are sorted by in the UI.
   *
   * Required scopes: `object_configuration:read`.
   */
  async getV2TargetIdentifierAttributes(
    request: operations.GetV2TargetIdentifierAttributesRequest,
    options?: RequestOptions,
  ): Promise<operations.GetV2TargetIdentifierAttributesResponseBody> {
    return unwrapAsync(attributesGetV2TargetIdentifierAttributes(
      this,
      request,
      options,
    ));
  }

  /**
   * Create an attribute
   *
   * @remarks
   * Creates a new attribute on either an object or a list.
   *
   * To create an attribute on an object, you must also have the `object_configuration:read-write` scope.
   *
   * To create an attribute on a list, you must also have the `list_configuration:read-write` scope.
   */
  async postV2TargetIdentifierAttributes(
    request: operations.PostV2TargetIdentifierAttributesRequest,
    options?: RequestOptions,
  ): Promise<operations.PostV2TargetIdentifierAttributesResponseBody> {
    return unwrapAsync(attributesPostV2TargetIdentifierAttributes(
      this,
      request,
      options,
    ));
  }

  /**
   * Get an attribute
   *
   * @remarks
   * Gets information about a single attribute on either an object or a list.
   *
   * Required scopes: `object_configuration:read`.
   */
  async getV2TargetIdentifierAttributesAttribute(
    request: operations.GetV2TargetIdentifierAttributesAttributeRequest,
    options?: RequestOptions,
  ): Promise<operations.GetV2TargetIdentifierAttributesAttributeResponseBody> {
    return unwrapAsync(attributesGetV2TargetIdentifierAttributesAttribute(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an attribute
   *
   * @remarks
   * Updates a single attribute on a given object or list.
   *
   * Required scopes: `object_configuration:read-write`.
   */
  async patchV2TargetIdentifierAttributesAttribute(
    request: operations.PatchV2TargetIdentifierAttributesAttributeRequest,
    options?: RequestOptions,
  ): Promise<
    operations.PatchV2TargetIdentifierAttributesAttributeResponseBody
  > {
    return unwrapAsync(attributesPatchV2TargetIdentifierAttributesAttribute(
      this,
      request,
      options,
    ));
  }

  /**
   * List select options
   *
   * @remarks
   * Lists all select options for a particular attribute on either an object or a list.
   *
   * Required scopes: `object_configuration:read`.
   */
  async getV2TargetIdentifierAttributesAttributeOptions(
    request: operations.GetV2TargetIdentifierAttributesAttributeOptionsRequest,
    options?: RequestOptions,
  ): Promise<
    operations.GetV2TargetIdentifierAttributesAttributeOptionsResponseBody
  > {
    return unwrapAsync(
      attributesGetV2TargetIdentifierAttributesAttributeOptions(
        this,
        request,
        options,
      ),
    );
  }

  /**
   * Create a select option
   *
   * @remarks
   * Adds a select option to a select attribute on an object or a list.
   *
   * Required scopes: `object_configuration:read-write`.
   */
  async postV2TargetIdentifierAttributesAttributeOptions(
    request: operations.PostV2TargetIdentifierAttributesAttributeOptionsRequest,
    options?: RequestOptions,
  ): Promise<
    operations.PostV2TargetIdentifierAttributesAttributeOptionsResponseBody
  > {
    return unwrapAsync(
      attributesPostV2TargetIdentifierAttributesAttributeOptions(
        this,
        request,
        options,
      ),
    );
  }

  /**
   * Update a select option
   *
   * @remarks
   * Updates a select option on an attribute on either an object or a list.
   *
   * Required scopes: `object_configuration:read-write`.
   */
  async patchV2TargetIdentifierAttributesAttributeOptionsOption(
    request:
      operations.PatchV2TargetIdentifierAttributesAttributeOptionsOptionRequest,
    options?: RequestOptions,
  ): Promise<
    operations.PatchV2TargetIdentifierAttributesAttributeOptionsOptionResponseBody
  > {
    return unwrapAsync(
      attributesPatchV2TargetIdentifierAttributesAttributeOptionsOption(
        this,
        request,
        options,
      ),
    );
  }

  /**
   * List statuses
   *
   * @remarks
   * Lists all statuses for a particular status attribute on either an object or a list.
   *
   * Required scopes: `object_configuration:read`.
   */
  async getV2TargetIdentifierAttributesAttributeStatuses(
    request: operations.GetV2TargetIdentifierAttributesAttributeStatusesRequest,
    options?: RequestOptions,
  ): Promise<
    operations.GetV2TargetIdentifierAttributesAttributeStatusesResponseBody
  > {
    return unwrapAsync(
      attributesGetV2TargetIdentifierAttributesAttributeStatuses(
        this,
        request,
        options,
      ),
    );
  }

  /**
   * Create a status
   *
   * @remarks
   * Add a new status to a status attribute on either an object or a list.
   *
   * Required scopes: `object_configuration:read-write`.
   */
  async postV2TargetIdentifierAttributesAttributeStatuses(
    request:
      operations.PostV2TargetIdentifierAttributesAttributeStatusesRequest,
    options?: RequestOptions,
  ): Promise<
    operations.PostV2TargetIdentifierAttributesAttributeStatusesResponseBody
  > {
    return unwrapAsync(
      attributesPostV2TargetIdentifierAttributesAttributeStatuses(
        this,
        request,
        options,
      ),
    );
  }

  /**
   * Update a status
   *
   * @remarks
   * Update a status on an status attribute on either an object or a list.
   *
   * Required scopes: `object_configuration:read-write`.
   */
  async patchV2TargetIdentifierAttributesAttributeStatusesStatus(
    request:
      operations.PatchV2TargetIdentifierAttributesAttributeStatusesStatusRequest,
    options?: RequestOptions,
  ): Promise<
    operations.PatchV2TargetIdentifierAttributesAttributeStatusesStatusResponseBody
  > {
    return unwrapAsync(
      attributesPatchV2TargetIdentifierAttributesAttributeStatusesStatus(
        this,
        request,
        options,
      ),
    );
  }
}
