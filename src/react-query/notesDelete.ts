/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { AttioCore } from "../core.js";
import { notesDelete } from "../funcs/notesDelete.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useAttioContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type NotesDeleteMutationVariables = {
  request: operations.DeleteV2NotesNoteIdRequest;
  options?: RequestOptions;
};

export type NotesDeleteMutationData =
  operations.DeleteV2NotesNoteIdResponseBody;

/**
 * Delete a note
 *
 * @remarks
 * Delete a single note by ID.
 *
 * Required scopes: `note:read-write`.
 */
export function useNotesDeleteMutation(
  options?: MutationHookOptions<
    NotesDeleteMutationData,
    Error,
    NotesDeleteMutationVariables
  >,
): UseMutationResult<
  NotesDeleteMutationData,
  Error,
  NotesDeleteMutationVariables
> {
  const client = useAttioContext();
  return useMutation({
    ...buildNotesDeleteMutation(client, options),
    ...options,
  });
}

export function mutationKeyNotesDelete(): MutationKey {
  return ["attio-js", "Notes", "delete"];
}

export function buildNotesDeleteMutation(
  client$: AttioCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: NotesDeleteMutationVariables,
  ) => Promise<NotesDeleteMutationData>;
} {
  return {
    mutationKey: mutationKeyNotesDelete(),
    mutationFn: function notesDeleteMutationFn({
      request,
      options,
    }): Promise<NotesDeleteMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(notesDelete(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
