/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";

export const GetV2ObjectsObjectRecordsRecordIdType = {
  InvalidRequestError: "invalid_request_error",
} as const;
export type GetV2ObjectsObjectRecordsRecordIdType = ClosedEnum<
  typeof GetV2ObjectsObjectRecordsRecordIdType
>;

export const GetV2ObjectsObjectRecordsRecordIdCode = {
  NotFound: "not_found",
} as const;
export type GetV2ObjectsObjectRecordsRecordIdCode = ClosedEnum<
  typeof GetV2ObjectsObjectRecordsRecordIdCode
>;

/**
 * Not Found
 */
export type GetV2ObjectsObjectRecordsRecordIdResponseBodyData = {
  statusCode: number;
  type: GetV2ObjectsObjectRecordsRecordIdType;
  code: GetV2ObjectsObjectRecordsRecordIdCode;
  message: string;
};

/**
 * Not Found
 */
export class GetV2ObjectsObjectRecordsRecordIdResponseBody extends Error {
  statusCode: number;
  type: GetV2ObjectsObjectRecordsRecordIdType;
  code: GetV2ObjectsObjectRecordsRecordIdCode;

  /** The original data that was passed to this error instance. */
  data$: GetV2ObjectsObjectRecordsRecordIdResponseBodyData;

  constructor(err: GetV2ObjectsObjectRecordsRecordIdResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.statusCode = err.statusCode;
    this.type = err.type;
    this.code = err.code;

    this.name = "GetV2ObjectsObjectRecordsRecordIdResponseBody";
  }
}

/** @internal */
export const GetV2ObjectsObjectRecordsRecordIdType$inboundSchema:
  z.ZodNativeEnum<typeof GetV2ObjectsObjectRecordsRecordIdType> = z.nativeEnum(
    GetV2ObjectsObjectRecordsRecordIdType,
  );

/** @internal */
export const GetV2ObjectsObjectRecordsRecordIdType$outboundSchema:
  z.ZodNativeEnum<typeof GetV2ObjectsObjectRecordsRecordIdType> =
    GetV2ObjectsObjectRecordsRecordIdType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2ObjectsObjectRecordsRecordIdType$ {
  /** @deprecated use `GetV2ObjectsObjectRecordsRecordIdType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2ObjectsObjectRecordsRecordIdType$inboundSchema;
  /** @deprecated use `GetV2ObjectsObjectRecordsRecordIdType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2ObjectsObjectRecordsRecordIdType$outboundSchema;
}

/** @internal */
export const GetV2ObjectsObjectRecordsRecordIdCode$inboundSchema:
  z.ZodNativeEnum<typeof GetV2ObjectsObjectRecordsRecordIdCode> = z.nativeEnum(
    GetV2ObjectsObjectRecordsRecordIdCode,
  );

/** @internal */
export const GetV2ObjectsObjectRecordsRecordIdCode$outboundSchema:
  z.ZodNativeEnum<typeof GetV2ObjectsObjectRecordsRecordIdCode> =
    GetV2ObjectsObjectRecordsRecordIdCode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2ObjectsObjectRecordsRecordIdCode$ {
  /** @deprecated use `GetV2ObjectsObjectRecordsRecordIdCode$inboundSchema` instead. */
  export const inboundSchema =
    GetV2ObjectsObjectRecordsRecordIdCode$inboundSchema;
  /** @deprecated use `GetV2ObjectsObjectRecordsRecordIdCode$outboundSchema` instead. */
  export const outboundSchema =
    GetV2ObjectsObjectRecordsRecordIdCode$outboundSchema;
}

/** @internal */
export const GetV2ObjectsObjectRecordsRecordIdResponseBody$inboundSchema:
  z.ZodType<
    GetV2ObjectsObjectRecordsRecordIdResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number(),
    type: GetV2ObjectsObjectRecordsRecordIdType$inboundSchema,
    code: GetV2ObjectsObjectRecordsRecordIdCode$inboundSchema,
    message: z.string(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
      });

      return new GetV2ObjectsObjectRecordsRecordIdResponseBody(remapped);
    });

/** @internal */
export type GetV2ObjectsObjectRecordsRecordIdResponseBody$Outbound = {
  status_code: number;
  type: string;
  code: string;
  message: string;
};

/** @internal */
export const GetV2ObjectsObjectRecordsRecordIdResponseBody$outboundSchema:
  z.ZodType<
    GetV2ObjectsObjectRecordsRecordIdResponseBody$Outbound,
    z.ZodTypeDef,
    GetV2ObjectsObjectRecordsRecordIdResponseBody
  > = z.instanceof(GetV2ObjectsObjectRecordsRecordIdResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number(),
        type: GetV2ObjectsObjectRecordsRecordIdType$outboundSchema,
        code: GetV2ObjectsObjectRecordsRecordIdCode$outboundSchema,
        message: z.string(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2ObjectsObjectRecordsRecordIdResponseBody$ {
  /** @deprecated use `GetV2ObjectsObjectRecordsRecordIdResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    GetV2ObjectsObjectRecordsRecordIdResponseBody$inboundSchema;
  /** @deprecated use `GetV2ObjectsObjectRecordsRecordIdResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetV2ObjectsObjectRecordsRecordIdResponseBody$outboundSchema;
  /** @deprecated use `GetV2ObjectsObjectRecordsRecordIdResponseBody$Outbound` instead. */
  export type Outbound = GetV2ObjectsObjectRecordsRecordIdResponseBody$Outbound;
}
