/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The type of token, always Bearer for tokens acquired via the OAuth 2.0 flow.
 */
export const TokenType = {
  Bearer: "Bearer",
} as const;
/**
 * The type of token, always Bearer for tokens acquired via the OAuth 2.0 flow.
 */
export type TokenType = ClosedEnum<typeof TokenType>;

/**
 * The issuer of the token. Always attio.com
 */
export const Iss = {
  AttioCom: "attio.com",
} as const;
/**
 * The issuer of the token. Always attio.com
 */
export type Iss = ClosedEnum<typeof Iss>;

export type ResponseBody2 = {
  /**
   * Whether the token is currently active and usable.
   */
  active: boolean;
  /**
   * A space-separated list of scopes associated with this token
   */
  scope: string;
  /**
   * The app ID of the OAuth application that requested this token
   */
  clientId: string;
  /**
   * The type of token, always Bearer for tokens acquired via the OAuth 2.0 flow.
   */
  tokenType: TokenType;
  /**
   * The time at which this token will expire, if set, as a number of seconds since January 1 1970 UTC.
   */
  exp: number | null;
  /**
   * The time at which this token was issued, as a number of seconds since January 1 1970 UTC.
   */
  iat: number;
  /**
   * Since Bearer tokens grant Workspace-level permissions, this property contains the workspace_id.
   */
  sub: string;
  /**
   * The intended audience for this token, for Bearer tokens this is the same as the client_id.
   */
  aud: string;
  /**
   * The issuer of the token. Always attio.com
   */
  iss: Iss;
  /**
   * The ID of the workspace member who authorised this token initially, if known
   */
  authorizedByWorkspaceMemberId: string | null;
  /**
   * The ID of the workspace the token is scoped to.
   */
  workspaceId: string;
  /**
   * The name of the workspace the token is scoped to.
   */
  workspaceName: string;
  /**
   * The slug of the workspace the token is scoped to.
   */
  workspaceSlug: string;
  /**
   * The logo URL of the workspace the token is scoped to.
   */
  workspaceLogoUrl: string | null;
};

export type ResponseBody1 = {
  active: boolean;
};

/**
 * Success
 */
export type GetV2SelfResponseBody = ResponseBody1 | ResponseBody2;

/** @internal */
export const TokenType$inboundSchema: z.ZodNativeEnum<typeof TokenType> = z
  .nativeEnum(TokenType);

/** @internal */
export const TokenType$outboundSchema: z.ZodNativeEnum<typeof TokenType> =
  TokenType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TokenType$ {
  /** @deprecated use `TokenType$inboundSchema` instead. */
  export const inboundSchema = TokenType$inboundSchema;
  /** @deprecated use `TokenType$outboundSchema` instead. */
  export const outboundSchema = TokenType$outboundSchema;
}

/** @internal */
export const Iss$inboundSchema: z.ZodNativeEnum<typeof Iss> = z.nativeEnum(Iss);

/** @internal */
export const Iss$outboundSchema: z.ZodNativeEnum<typeof Iss> =
  Iss$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Iss$ {
  /** @deprecated use `Iss$inboundSchema` instead. */
  export const inboundSchema = Iss$inboundSchema;
  /** @deprecated use `Iss$outboundSchema` instead. */
  export const outboundSchema = Iss$outboundSchema;
}

/** @internal */
export const ResponseBody2$inboundSchema: z.ZodType<
  ResponseBody2,
  z.ZodTypeDef,
  unknown
> = z.object({
  active: z.boolean(),
  scope: z.string(),
  client_id: z.string(),
  token_type: TokenType$inboundSchema,
  exp: z.nullable(z.number()),
  iat: z.number(),
  sub: z.string(),
  aud: z.string(),
  iss: Iss$inboundSchema,
  authorized_by_workspace_member_id: z.nullable(z.string()),
  workspace_id: z.string(),
  workspace_name: z.string(),
  workspace_slug: z.string(),
  workspace_logo_url: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    "client_id": "clientId",
    "token_type": "tokenType",
    "authorized_by_workspace_member_id": "authorizedByWorkspaceMemberId",
    "workspace_id": "workspaceId",
    "workspace_name": "workspaceName",
    "workspace_slug": "workspaceSlug",
    "workspace_logo_url": "workspaceLogoUrl",
  });
});

/** @internal */
export type ResponseBody2$Outbound = {
  active: boolean;
  scope: string;
  client_id: string;
  token_type: string;
  exp: number | null;
  iat: number;
  sub: string;
  aud: string;
  iss: string;
  authorized_by_workspace_member_id: string | null;
  workspace_id: string;
  workspace_name: string;
  workspace_slug: string;
  workspace_logo_url: string | null;
};

/** @internal */
export const ResponseBody2$outboundSchema: z.ZodType<
  ResponseBody2$Outbound,
  z.ZodTypeDef,
  ResponseBody2
> = z.object({
  active: z.boolean(),
  scope: z.string(),
  clientId: z.string(),
  tokenType: TokenType$outboundSchema,
  exp: z.nullable(z.number()),
  iat: z.number(),
  sub: z.string(),
  aud: z.string(),
  iss: Iss$outboundSchema,
  authorizedByWorkspaceMemberId: z.nullable(z.string()),
  workspaceId: z.string(),
  workspaceName: z.string(),
  workspaceSlug: z.string(),
  workspaceLogoUrl: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    clientId: "client_id",
    tokenType: "token_type",
    authorizedByWorkspaceMemberId: "authorized_by_workspace_member_id",
    workspaceId: "workspace_id",
    workspaceName: "workspace_name",
    workspaceSlug: "workspace_slug",
    workspaceLogoUrl: "workspace_logo_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBody2$ {
  /** @deprecated use `ResponseBody2$inboundSchema` instead. */
  export const inboundSchema = ResponseBody2$inboundSchema;
  /** @deprecated use `ResponseBody2$outboundSchema` instead. */
  export const outboundSchema = ResponseBody2$outboundSchema;
  /** @deprecated use `ResponseBody2$Outbound` instead. */
  export type Outbound = ResponseBody2$Outbound;
}

export function responseBody2ToJSON(responseBody2: ResponseBody2): string {
  return JSON.stringify(ResponseBody2$outboundSchema.parse(responseBody2));
}

export function responseBody2FromJSON(
  jsonString: string,
): SafeParseResult<ResponseBody2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBody2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBody2' from JSON`,
  );
}

/** @internal */
export const ResponseBody1$inboundSchema: z.ZodType<
  ResponseBody1,
  z.ZodTypeDef,
  unknown
> = z.object({
  active: z.boolean(),
});

/** @internal */
export type ResponseBody1$Outbound = {
  active: boolean;
};

/** @internal */
export const ResponseBody1$outboundSchema: z.ZodType<
  ResponseBody1$Outbound,
  z.ZodTypeDef,
  ResponseBody1
> = z.object({
  active: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBody1$ {
  /** @deprecated use `ResponseBody1$inboundSchema` instead. */
  export const inboundSchema = ResponseBody1$inboundSchema;
  /** @deprecated use `ResponseBody1$outboundSchema` instead. */
  export const outboundSchema = ResponseBody1$outboundSchema;
  /** @deprecated use `ResponseBody1$Outbound` instead. */
  export type Outbound = ResponseBody1$Outbound;
}

export function responseBody1ToJSON(responseBody1: ResponseBody1): string {
  return JSON.stringify(ResponseBody1$outboundSchema.parse(responseBody1));
}

export function responseBody1FromJSON(
  jsonString: string,
): SafeParseResult<ResponseBody1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBody1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBody1' from JSON`,
  );
}

/** @internal */
export const GetV2SelfResponseBody$inboundSchema: z.ZodType<
  GetV2SelfResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ResponseBody1$inboundSchema),
  z.lazy(() => ResponseBody2$inboundSchema),
]);

/** @internal */
export type GetV2SelfResponseBody$Outbound =
  | ResponseBody1$Outbound
  | ResponseBody2$Outbound;

/** @internal */
export const GetV2SelfResponseBody$outboundSchema: z.ZodType<
  GetV2SelfResponseBody$Outbound,
  z.ZodTypeDef,
  GetV2SelfResponseBody
> = z.union([
  z.lazy(() => ResponseBody1$outboundSchema),
  z.lazy(() => ResponseBody2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2SelfResponseBody$ {
  /** @deprecated use `GetV2SelfResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetV2SelfResponseBody$inboundSchema;
  /** @deprecated use `GetV2SelfResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetV2SelfResponseBody$outboundSchema;
  /** @deprecated use `GetV2SelfResponseBody$Outbound` instead. */
  export type Outbound = GetV2SelfResponseBody$Outbound;
}

export function getV2SelfResponseBodyToJSON(
  getV2SelfResponseBody: GetV2SelfResponseBody,
): string {
  return JSON.stringify(
    GetV2SelfResponseBody$outboundSchema.parse(getV2SelfResponseBody),
  );
}

export function getV2SelfResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetV2SelfResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2SelfResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2SelfResponseBody' from JSON`,
  );
}
