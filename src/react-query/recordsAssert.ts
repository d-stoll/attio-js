/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { AttioCore } from "../core.js";
import { recordsAssert } from "../funcs/recordsAssert.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useAttioContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type RecordsAssertMutationVariables = {
  request: operations.PutV2ObjectsObjectRecordsRequest;
  options?: RequestOptions;
};

export type RecordsAssertMutationData =
  operations.PutV2ObjectsObjectRecordsResponseBody;

/**
 * Assert a record
 *
 * @remarks
 * Use this endpoint to create or update people, companies and other records. A matching attribute is used to search for existing records. If a record is found with the same value for the matching attribute, that record will be updated. If no record with the same value for the matching attribute is found, a new record will be created instead. If you would like to avoid matching, please use the [Create record endpoint](/reference/post_v2-objects-object-records).
 *
 * If the matching attribute is a multiselect attribute, new values will be added and existing values will not be deleted. For any other multiselect attribute, all values will be either created or deleted as necessary to match the list of supplied values.
 *
 * Required scopes: `record_permission:read-write`, `object_configuration:read`.
 */
export function useRecordsAssertMutation(
  options?: MutationHookOptions<
    RecordsAssertMutationData,
    Error,
    RecordsAssertMutationVariables
  >,
): UseMutationResult<
  RecordsAssertMutationData,
  Error,
  RecordsAssertMutationVariables
> {
  const client = useAttioContext();
  return useMutation({
    ...buildRecordsAssertMutation(client, options),
    ...options,
  });
}

export function mutationKeyRecordsAssert(): MutationKey {
  return ["attio-js", "Records", "assert"];
}

export function buildRecordsAssertMutation(
  client$: AttioCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: RecordsAssertMutationVariables,
  ) => Promise<RecordsAssertMutationData>;
} {
  return {
    mutationKey: mutationKeyRecordsAssert(),
    mutationFn: function recordsAssertMutationFn({
      request,
      options,
    }): Promise<RecordsAssertMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(recordsAssert(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
