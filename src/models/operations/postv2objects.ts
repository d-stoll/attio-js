/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Data = {
  /**
   * A unique, human-readable slug to access the object through URLs and API calls. Should be formatted in snake case.
   */
  apiSlug: string;
  /**
   * The singular form of the object's name.
   */
  singularNoun: string;
  /**
   * The plural form of the object's name.
   */
  pluralNoun: string;
};

export type PostV2ObjectsRequestBody = {
  data: Data;
};

/**
 * Success
 */
export type PostV2ObjectsResponseBody = {
  data: components.ObjectT;
};

/** @internal */
export const Data$inboundSchema: z.ZodType<Data, z.ZodTypeDef, unknown> = z
  .object({
    api_slug: z.string(),
    singular_noun: z.string(),
    plural_noun: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "api_slug": "apiSlug",
      "singular_noun": "singularNoun",
      "plural_noun": "pluralNoun",
    });
  });

/** @internal */
export type Data$Outbound = {
  api_slug: string;
  singular_noun: string;
  plural_noun: string;
};

/** @internal */
export const Data$outboundSchema: z.ZodType<Data$Outbound, z.ZodTypeDef, Data> =
  z.object({
    apiSlug: z.string(),
    singularNoun: z.string(),
    pluralNoun: z.string(),
  }).transform((v) => {
    return remap$(v, {
      apiSlug: "api_slug",
      singularNoun: "singular_noun",
      pluralNoun: "plural_noun",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Data$ {
  /** @deprecated use `Data$inboundSchema` instead. */
  export const inboundSchema = Data$inboundSchema;
  /** @deprecated use `Data$outboundSchema` instead. */
  export const outboundSchema = Data$outboundSchema;
  /** @deprecated use `Data$Outbound` instead. */
  export type Outbound = Data$Outbound;
}

export function dataToJSON(data: Data): string {
  return JSON.stringify(Data$outboundSchema.parse(data));
}

export function dataFromJSON(
  jsonString: string,
): SafeParseResult<Data, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Data$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Data' from JSON`,
  );
}

/** @internal */
export const PostV2ObjectsRequestBody$inboundSchema: z.ZodType<
  PostV2ObjectsRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => Data$inboundSchema),
});

/** @internal */
export type PostV2ObjectsRequestBody$Outbound = {
  data: Data$Outbound;
};

/** @internal */
export const PostV2ObjectsRequestBody$outboundSchema: z.ZodType<
  PostV2ObjectsRequestBody$Outbound,
  z.ZodTypeDef,
  PostV2ObjectsRequestBody
> = z.object({
  data: z.lazy(() => Data$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ObjectsRequestBody$ {
  /** @deprecated use `PostV2ObjectsRequestBody$inboundSchema` instead. */
  export const inboundSchema = PostV2ObjectsRequestBody$inboundSchema;
  /** @deprecated use `PostV2ObjectsRequestBody$outboundSchema` instead. */
  export const outboundSchema = PostV2ObjectsRequestBody$outboundSchema;
  /** @deprecated use `PostV2ObjectsRequestBody$Outbound` instead. */
  export type Outbound = PostV2ObjectsRequestBody$Outbound;
}

export function postV2ObjectsRequestBodyToJSON(
  postV2ObjectsRequestBody: PostV2ObjectsRequestBody,
): string {
  return JSON.stringify(
    PostV2ObjectsRequestBody$outboundSchema.parse(postV2ObjectsRequestBody),
  );
}

export function postV2ObjectsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PostV2ObjectsRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV2ObjectsRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV2ObjectsRequestBody' from JSON`,
  );
}

/** @internal */
export const PostV2ObjectsResponseBody$inboundSchema: z.ZodType<
  PostV2ObjectsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: components.ObjectT$inboundSchema,
});

/** @internal */
export type PostV2ObjectsResponseBody$Outbound = {
  data: components.ObjectT$Outbound;
};

/** @internal */
export const PostV2ObjectsResponseBody$outboundSchema: z.ZodType<
  PostV2ObjectsResponseBody$Outbound,
  z.ZodTypeDef,
  PostV2ObjectsResponseBody
> = z.object({
  data: components.ObjectT$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ObjectsResponseBody$ {
  /** @deprecated use `PostV2ObjectsResponseBody$inboundSchema` instead. */
  export const inboundSchema = PostV2ObjectsResponseBody$inboundSchema;
  /** @deprecated use `PostV2ObjectsResponseBody$outboundSchema` instead. */
  export const outboundSchema = PostV2ObjectsResponseBody$outboundSchema;
  /** @deprecated use `PostV2ObjectsResponseBody$Outbound` instead. */
  export type Outbound = PostV2ObjectsResponseBody$Outbound;
}

export function postV2ObjectsResponseBodyToJSON(
  postV2ObjectsResponseBody: PostV2ObjectsResponseBody,
): string {
  return JSON.stringify(
    PostV2ObjectsResponseBody$outboundSchema.parse(postV2ObjectsResponseBody),
  );
}

export function postV2ObjectsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<PostV2ObjectsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV2ObjectsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV2ObjectsResponseBody' from JSON`,
  );
}
