/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { AttioCore } from "../core.js";
import { listsGet } from "../funcs/listsGet.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useAttioContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type ListsGetQueryData = operations.GetV2ListsListResponseBody;

/**
 * Get a list
 *
 * @remarks
 * Gets a single list in your workspace that your access token has access to.
 *
 * Required scopes: `list_configuration:read`.
 */
export function useListsGet(
  request: operations.GetV2ListsListRequest,
  options?: QueryHookOptions<ListsGetQueryData>,
): UseQueryResult<ListsGetQueryData, Error> {
  const client = useAttioContext();
  return useQuery({
    ...buildListsGetQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get a list
 *
 * @remarks
 * Gets a single list in your workspace that your access token has access to.
 *
 * Required scopes: `list_configuration:read`.
 */
export function useListsGetSuspense(
  request: operations.GetV2ListsListRequest,
  options?: SuspenseQueryHookOptions<ListsGetQueryData>,
): UseSuspenseQueryResult<ListsGetQueryData, Error> {
  const client = useAttioContext();
  return useSuspenseQuery({
    ...buildListsGetQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchListsGet(
  queryClient: QueryClient,
  client$: AttioCore,
  request: operations.GetV2ListsListRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildListsGetQuery(
      client$,
      request,
    ),
  });
}

export function setListsGetData(
  client: QueryClient,
  queryKeyBase: [list: string],
  data: ListsGetQueryData,
): ListsGetQueryData | undefined {
  const key = queryKeyListsGet(...queryKeyBase);

  return client.setQueryData<ListsGetQueryData>(key, data);
}

export function invalidateListsGet(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<[list: string]>,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["attio-js", "Lists", "get", ...queryKeyBase],
  });
}

export function invalidateAllListsGet(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["attio-js", "Lists", "get"],
  });
}

export function buildListsGetQuery(
  client$: AttioCore,
  request: operations.GetV2ListsListRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<ListsGetQueryData>;
} {
  return {
    queryKey: queryKeyListsGet(request.list),
    queryFn: async function listsGetQueryFn(ctx): Promise<ListsGetQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(listsGet(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyListsGet(list: string): QueryKey {
  return ["attio-js", "Lists", "get", list];
}
