/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { AttioCore } from "../core.js";
import { objectsList } from "../funcs/objectsList.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useAttioContext } from "./_context.js";
import { QueryHookOptions, SuspenseQueryHookOptions } from "./_types.js";

export type ObjectsListQueryData = operations.GetV2ObjectsResponseBody;

/**
 * List objects
 *
 * @remarks
 * Lists all system-defined and user-defined objects in your workspace.
 *
 * Required scopes: `object_configuration:read`.
 */
export function useObjectsList(
  options?: QueryHookOptions<ObjectsListQueryData>,
): UseQueryResult<ObjectsListQueryData, Error> {
  const client = useAttioContext();
  return useQuery({
    ...buildObjectsListQuery(
      client,
      options,
    ),
    ...options,
  });
}

/**
 * List objects
 *
 * @remarks
 * Lists all system-defined and user-defined objects in your workspace.
 *
 * Required scopes: `object_configuration:read`.
 */
export function useObjectsListSuspense(
  options?: SuspenseQueryHookOptions<ObjectsListQueryData>,
): UseSuspenseQueryResult<ObjectsListQueryData, Error> {
  const client = useAttioContext();
  return useSuspenseQuery({
    ...buildObjectsListQuery(
      client,
      options,
    ),
    ...options,
  });
}

export function prefetchObjectsList(
  queryClient: QueryClient,
  client$: AttioCore,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildObjectsListQuery(
      client$,
    ),
  });
}

export function setObjectsListData(
  client: QueryClient,
  data: ObjectsListQueryData,
): ObjectsListQueryData | undefined {
  const key = queryKeyObjectsList();

  return client.setQueryData<ObjectsListQueryData>(key, data);
}

export function invalidateAllObjectsList(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["attio-js", "Objects", "list"],
  });
}

export function buildObjectsListQuery(
  client$: AttioCore,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<ObjectsListQueryData>;
} {
  return {
    queryKey: queryKeyObjectsList(),
    queryFn: async function objectsListQueryFn(
      ctx,
    ): Promise<ObjectsListQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(objectsList(
        client$,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyObjectsList(): QueryKey {
  return ["attio-js", "Objects", "list"];
}
