/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PutV2ObjectsObjectRecordsDataRequest = {
  /**
   * An object with an attribute `api_slug` or `attribute_id` as the key, and a single value (for single-select attributes), or an array of values (for single or multi-select attributes) as the values. For complete documentation on values for all attribute types, please see our [attribute type docs](/docs/attribute-types).
   */
  values: { [k: string]: any };
};

export type PutV2ObjectsObjectRecordsRequestBody = {
  data: PutV2ObjectsObjectRecordsDataRequest;
};

export type PutV2ObjectsObjectRecordsRequest = {
  object: string;
  matchingAttribute: string;
  requestBody: PutV2ObjectsObjectRecordsRequestBody;
};

export type PutV2ObjectsObjectRecordsId = {
  /**
   * A UUID identifying the workspace this record belongs to.
   */
  workspaceId: string;
  /**
   * A UUID identifying the object this record belongs to.
   */
  objectId: string;
  /**
   * A UUID identifying this record.
   */
  recordId: string;
};

export type PutV2ObjectsObjectRecordsDataResponse = {
  id: PutV2ObjectsObjectRecordsId;
  /**
   * When this record was created.
   */
  createdAt: string;
  /**
   * A record type with an attribute `api_slug` as the key, and an array of value objects as the values.
   */
  values: { [k: string]: any };
};

/**
 * Success
 */
export type PutV2ObjectsObjectRecordsResponse = {
  data: PutV2ObjectsObjectRecordsDataResponse;
};

/** @internal */
export const PutV2ObjectsObjectRecordsDataRequest$inboundSchema: z.ZodType<
  PutV2ObjectsObjectRecordsDataRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  values: z.record(z.any()),
});

/** @internal */
export type PutV2ObjectsObjectRecordsDataRequest$Outbound = {
  values: { [k: string]: any };
};

/** @internal */
export const PutV2ObjectsObjectRecordsDataRequest$outboundSchema: z.ZodType<
  PutV2ObjectsObjectRecordsDataRequest$Outbound,
  z.ZodTypeDef,
  PutV2ObjectsObjectRecordsDataRequest
> = z.object({
  values: z.record(z.any()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV2ObjectsObjectRecordsDataRequest$ {
  /** @deprecated use `PutV2ObjectsObjectRecordsDataRequest$inboundSchema` instead. */
  export const inboundSchema =
    PutV2ObjectsObjectRecordsDataRequest$inboundSchema;
  /** @deprecated use `PutV2ObjectsObjectRecordsDataRequest$outboundSchema` instead. */
  export const outboundSchema =
    PutV2ObjectsObjectRecordsDataRequest$outboundSchema;
  /** @deprecated use `PutV2ObjectsObjectRecordsDataRequest$Outbound` instead. */
  export type Outbound = PutV2ObjectsObjectRecordsDataRequest$Outbound;
}

export function putV2ObjectsObjectRecordsDataRequestToJSON(
  putV2ObjectsObjectRecordsDataRequest: PutV2ObjectsObjectRecordsDataRequest,
): string {
  return JSON.stringify(
    PutV2ObjectsObjectRecordsDataRequest$outboundSchema.parse(
      putV2ObjectsObjectRecordsDataRequest,
    ),
  );
}

export function putV2ObjectsObjectRecordsDataRequestFromJSON(
  jsonString: string,
): SafeParseResult<PutV2ObjectsObjectRecordsDataRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PutV2ObjectsObjectRecordsDataRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutV2ObjectsObjectRecordsDataRequest' from JSON`,
  );
}

/** @internal */
export const PutV2ObjectsObjectRecordsRequestBody$inboundSchema: z.ZodType<
  PutV2ObjectsObjectRecordsRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => PutV2ObjectsObjectRecordsDataRequest$inboundSchema),
});

/** @internal */
export type PutV2ObjectsObjectRecordsRequestBody$Outbound = {
  data: PutV2ObjectsObjectRecordsDataRequest$Outbound;
};

/** @internal */
export const PutV2ObjectsObjectRecordsRequestBody$outboundSchema: z.ZodType<
  PutV2ObjectsObjectRecordsRequestBody$Outbound,
  z.ZodTypeDef,
  PutV2ObjectsObjectRecordsRequestBody
> = z.object({
  data: z.lazy(() => PutV2ObjectsObjectRecordsDataRequest$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV2ObjectsObjectRecordsRequestBody$ {
  /** @deprecated use `PutV2ObjectsObjectRecordsRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PutV2ObjectsObjectRecordsRequestBody$inboundSchema;
  /** @deprecated use `PutV2ObjectsObjectRecordsRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PutV2ObjectsObjectRecordsRequestBody$outboundSchema;
  /** @deprecated use `PutV2ObjectsObjectRecordsRequestBody$Outbound` instead. */
  export type Outbound = PutV2ObjectsObjectRecordsRequestBody$Outbound;
}

export function putV2ObjectsObjectRecordsRequestBodyToJSON(
  putV2ObjectsObjectRecordsRequestBody: PutV2ObjectsObjectRecordsRequestBody,
): string {
  return JSON.stringify(
    PutV2ObjectsObjectRecordsRequestBody$outboundSchema.parse(
      putV2ObjectsObjectRecordsRequestBody,
    ),
  );
}

export function putV2ObjectsObjectRecordsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PutV2ObjectsObjectRecordsRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PutV2ObjectsObjectRecordsRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutV2ObjectsObjectRecordsRequestBody' from JSON`,
  );
}

/** @internal */
export const PutV2ObjectsObjectRecordsRequest$inboundSchema: z.ZodType<
  PutV2ObjectsObjectRecordsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: z.string(),
  matching_attribute: z.string(),
  RequestBody: z.lazy(() => PutV2ObjectsObjectRecordsRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "matching_attribute": "matchingAttribute",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PutV2ObjectsObjectRecordsRequest$Outbound = {
  object: string;
  matching_attribute: string;
  RequestBody: PutV2ObjectsObjectRecordsRequestBody$Outbound;
};

/** @internal */
export const PutV2ObjectsObjectRecordsRequest$outboundSchema: z.ZodType<
  PutV2ObjectsObjectRecordsRequest$Outbound,
  z.ZodTypeDef,
  PutV2ObjectsObjectRecordsRequest
> = z.object({
  object: z.string(),
  matchingAttribute: z.string(),
  requestBody: z.lazy(() =>
    PutV2ObjectsObjectRecordsRequestBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    matchingAttribute: "matching_attribute",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV2ObjectsObjectRecordsRequest$ {
  /** @deprecated use `PutV2ObjectsObjectRecordsRequest$inboundSchema` instead. */
  export const inboundSchema = PutV2ObjectsObjectRecordsRequest$inboundSchema;
  /** @deprecated use `PutV2ObjectsObjectRecordsRequest$outboundSchema` instead. */
  export const outboundSchema = PutV2ObjectsObjectRecordsRequest$outboundSchema;
  /** @deprecated use `PutV2ObjectsObjectRecordsRequest$Outbound` instead. */
  export type Outbound = PutV2ObjectsObjectRecordsRequest$Outbound;
}

export function putV2ObjectsObjectRecordsRequestToJSON(
  putV2ObjectsObjectRecordsRequest: PutV2ObjectsObjectRecordsRequest,
): string {
  return JSON.stringify(
    PutV2ObjectsObjectRecordsRequest$outboundSchema.parse(
      putV2ObjectsObjectRecordsRequest,
    ),
  );
}

export function putV2ObjectsObjectRecordsRequestFromJSON(
  jsonString: string,
): SafeParseResult<PutV2ObjectsObjectRecordsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutV2ObjectsObjectRecordsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutV2ObjectsObjectRecordsRequest' from JSON`,
  );
}

/** @internal */
export const PutV2ObjectsObjectRecordsId$inboundSchema: z.ZodType<
  PutV2ObjectsObjectRecordsId,
  z.ZodTypeDef,
  unknown
> = z.object({
  workspace_id: z.string(),
  object_id: z.string(),
  record_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "workspace_id": "workspaceId",
    "object_id": "objectId",
    "record_id": "recordId",
  });
});

/** @internal */
export type PutV2ObjectsObjectRecordsId$Outbound = {
  workspace_id: string;
  object_id: string;
  record_id: string;
};

/** @internal */
export const PutV2ObjectsObjectRecordsId$outboundSchema: z.ZodType<
  PutV2ObjectsObjectRecordsId$Outbound,
  z.ZodTypeDef,
  PutV2ObjectsObjectRecordsId
> = z.object({
  workspaceId: z.string(),
  objectId: z.string(),
  recordId: z.string(),
}).transform((v) => {
  return remap$(v, {
    workspaceId: "workspace_id",
    objectId: "object_id",
    recordId: "record_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV2ObjectsObjectRecordsId$ {
  /** @deprecated use `PutV2ObjectsObjectRecordsId$inboundSchema` instead. */
  export const inboundSchema = PutV2ObjectsObjectRecordsId$inboundSchema;
  /** @deprecated use `PutV2ObjectsObjectRecordsId$outboundSchema` instead. */
  export const outboundSchema = PutV2ObjectsObjectRecordsId$outboundSchema;
  /** @deprecated use `PutV2ObjectsObjectRecordsId$Outbound` instead. */
  export type Outbound = PutV2ObjectsObjectRecordsId$Outbound;
}

export function putV2ObjectsObjectRecordsIdToJSON(
  putV2ObjectsObjectRecordsId: PutV2ObjectsObjectRecordsId,
): string {
  return JSON.stringify(
    PutV2ObjectsObjectRecordsId$outboundSchema.parse(
      putV2ObjectsObjectRecordsId,
    ),
  );
}

export function putV2ObjectsObjectRecordsIdFromJSON(
  jsonString: string,
): SafeParseResult<PutV2ObjectsObjectRecordsId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutV2ObjectsObjectRecordsId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutV2ObjectsObjectRecordsId' from JSON`,
  );
}

/** @internal */
export const PutV2ObjectsObjectRecordsDataResponse$inboundSchema: z.ZodType<
  PutV2ObjectsObjectRecordsDataResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.lazy(() => PutV2ObjectsObjectRecordsId$inboundSchema),
  created_at: z.string(),
  values: z.record(z.any()),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
  });
});

/** @internal */
export type PutV2ObjectsObjectRecordsDataResponse$Outbound = {
  id: PutV2ObjectsObjectRecordsId$Outbound;
  created_at: string;
  values: { [k: string]: any };
};

/** @internal */
export const PutV2ObjectsObjectRecordsDataResponse$outboundSchema: z.ZodType<
  PutV2ObjectsObjectRecordsDataResponse$Outbound,
  z.ZodTypeDef,
  PutV2ObjectsObjectRecordsDataResponse
> = z.object({
  id: z.lazy(() => PutV2ObjectsObjectRecordsId$outboundSchema),
  createdAt: z.string(),
  values: z.record(z.any()),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV2ObjectsObjectRecordsDataResponse$ {
  /** @deprecated use `PutV2ObjectsObjectRecordsDataResponse$inboundSchema` instead. */
  export const inboundSchema =
    PutV2ObjectsObjectRecordsDataResponse$inboundSchema;
  /** @deprecated use `PutV2ObjectsObjectRecordsDataResponse$outboundSchema` instead. */
  export const outboundSchema =
    PutV2ObjectsObjectRecordsDataResponse$outboundSchema;
  /** @deprecated use `PutV2ObjectsObjectRecordsDataResponse$Outbound` instead. */
  export type Outbound = PutV2ObjectsObjectRecordsDataResponse$Outbound;
}

export function putV2ObjectsObjectRecordsDataResponseToJSON(
  putV2ObjectsObjectRecordsDataResponse: PutV2ObjectsObjectRecordsDataResponse,
): string {
  return JSON.stringify(
    PutV2ObjectsObjectRecordsDataResponse$outboundSchema.parse(
      putV2ObjectsObjectRecordsDataResponse,
    ),
  );
}

export function putV2ObjectsObjectRecordsDataResponseFromJSON(
  jsonString: string,
): SafeParseResult<PutV2ObjectsObjectRecordsDataResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PutV2ObjectsObjectRecordsDataResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutV2ObjectsObjectRecordsDataResponse' from JSON`,
  );
}

/** @internal */
export const PutV2ObjectsObjectRecordsResponse$inboundSchema: z.ZodType<
  PutV2ObjectsObjectRecordsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => PutV2ObjectsObjectRecordsDataResponse$inboundSchema),
});

/** @internal */
export type PutV2ObjectsObjectRecordsResponse$Outbound = {
  data: PutV2ObjectsObjectRecordsDataResponse$Outbound;
};

/** @internal */
export const PutV2ObjectsObjectRecordsResponse$outboundSchema: z.ZodType<
  PutV2ObjectsObjectRecordsResponse$Outbound,
  z.ZodTypeDef,
  PutV2ObjectsObjectRecordsResponse
> = z.object({
  data: z.lazy(() => PutV2ObjectsObjectRecordsDataResponse$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV2ObjectsObjectRecordsResponse$ {
  /** @deprecated use `PutV2ObjectsObjectRecordsResponse$inboundSchema` instead. */
  export const inboundSchema = PutV2ObjectsObjectRecordsResponse$inboundSchema;
  /** @deprecated use `PutV2ObjectsObjectRecordsResponse$outboundSchema` instead. */
  export const outboundSchema =
    PutV2ObjectsObjectRecordsResponse$outboundSchema;
  /** @deprecated use `PutV2ObjectsObjectRecordsResponse$Outbound` instead. */
  export type Outbound = PutV2ObjectsObjectRecordsResponse$Outbound;
}

export function putV2ObjectsObjectRecordsResponseToJSON(
  putV2ObjectsObjectRecordsResponse: PutV2ObjectsObjectRecordsResponse,
): string {
  return JSON.stringify(
    PutV2ObjectsObjectRecordsResponse$outboundSchema.parse(
      putV2ObjectsObjectRecordsResponse,
    ),
  );
}

export function putV2ObjectsObjectRecordsResponseFromJSON(
  jsonString: string,
): SafeParseResult<PutV2ObjectsObjectRecordsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutV2ObjectsObjectRecordsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutV2ObjectsObjectRecordsResponse' from JSON`,
  );
}
