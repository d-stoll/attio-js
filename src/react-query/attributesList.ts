/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { AttioCore } from "../core.js";
import { attributesList } from "../funcs/attributesList.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useAttioContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type AttributesListQueryData =
  operations.GetV2TargetIdentifierAttributesResponseBody;

/**
 * List attributes
 *
 * @remarks
 * Lists all attributes defined on a specific object or list. Attributes are returned in the order that they are sorted by in the UI.
 *
 * Required scopes: `object_configuration:read`.
 */
export function useAttributesList(
  request: operations.GetV2TargetIdentifierAttributesRequest,
  options?: QueryHookOptions<AttributesListQueryData>,
): UseQueryResult<AttributesListQueryData, Error> {
  const client = useAttioContext();
  return useQuery({
    ...buildAttributesListQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * List attributes
 *
 * @remarks
 * Lists all attributes defined on a specific object or list. Attributes are returned in the order that they are sorted by in the UI.
 *
 * Required scopes: `object_configuration:read`.
 */
export function useAttributesListSuspense(
  request: operations.GetV2TargetIdentifierAttributesRequest,
  options?: SuspenseQueryHookOptions<AttributesListQueryData>,
): UseSuspenseQueryResult<AttributesListQueryData, Error> {
  const client = useAttioContext();
  return useSuspenseQuery({
    ...buildAttributesListQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchAttributesList(
  queryClient: QueryClient,
  client$: AttioCore,
  request: operations.GetV2TargetIdentifierAttributesRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildAttributesListQuery(
      client$,
      request,
    ),
  });
}

export function setAttributesListData(
  client: QueryClient,
  queryKeyBase: [
    target: operations.Target,
    identifier: string,
    parameters: {
      limit?: number | undefined;
      offset?: number | undefined;
      showArchived?: boolean | undefined;
    },
  ],
  data: AttributesListQueryData,
): AttributesListQueryData | undefined {
  const key = queryKeyAttributesList(...queryKeyBase);

  return client.setQueryData<AttributesListQueryData>(key, data);
}

export function invalidateAttributesList(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [
      target: operations.Target,
      identifier: string,
      parameters: {
        limit?: number | undefined;
        offset?: number | undefined;
        showArchived?: boolean | undefined;
      },
    ]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["attio-js", "Attributes", "list", ...queryKeyBase],
  });
}

export function invalidateAllAttributesList(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["attio-js", "Attributes", "list"],
  });
}

export function buildAttributesListQuery(
  client$: AttioCore,
  request: operations.GetV2TargetIdentifierAttributesRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<AttributesListQueryData>;
} {
  return {
    queryKey: queryKeyAttributesList(request.target, request.identifier, {
      limit: request.limit,
      offset: request.offset,
      showArchived: request.showArchived,
    }),
    queryFn: async function attributesListQueryFn(
      ctx,
    ): Promise<AttributesListQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(attributesList(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyAttributesList(
  target: operations.Target,
  identifier: string,
  parameters: {
    limit?: number | undefined;
    offset?: number | undefined;
    showArchived?: boolean | undefined;
  },
): QueryKey {
  return ["attio-js", "Attributes", "list", target, identifier, parameters];
}
