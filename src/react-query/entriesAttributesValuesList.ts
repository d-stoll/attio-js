/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { AttioCore } from "../core.js";
import { entriesAttributesValuesList } from "../funcs/entriesAttributesValuesList.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useAttioContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type EntriesAttributesValuesListQueryData =
  operations.GetV2ListsListEntriesEntryIdAttributesAttributeValuesResponseBody;

/**
 * List attribute values for a list entry
 *
 * @remarks
 * Gets all values for a given attribute on a list entry. If the attribute is historic, this endpoint has the ability to return all historic values using the `show_historic` query param.
 *
 * Required scopes: `list_entry:read`, `list_configuration:read`.
 */
export function useEntriesAttributesValuesList(
  request:
    operations.GetV2ListsListEntriesEntryIdAttributesAttributeValuesRequest,
  options?: QueryHookOptions<EntriesAttributesValuesListQueryData>,
): UseQueryResult<EntriesAttributesValuesListQueryData, Error> {
  const client = useAttioContext();
  return useQuery({
    ...buildEntriesAttributesValuesListQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * List attribute values for a list entry
 *
 * @remarks
 * Gets all values for a given attribute on a list entry. If the attribute is historic, this endpoint has the ability to return all historic values using the `show_historic` query param.
 *
 * Required scopes: `list_entry:read`, `list_configuration:read`.
 */
export function useEntriesAttributesValuesListSuspense(
  request:
    operations.GetV2ListsListEntriesEntryIdAttributesAttributeValuesRequest,
  options?: SuspenseQueryHookOptions<EntriesAttributesValuesListQueryData>,
): UseSuspenseQueryResult<EntriesAttributesValuesListQueryData, Error> {
  const client = useAttioContext();
  return useSuspenseQuery({
    ...buildEntriesAttributesValuesListQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchEntriesAttributesValuesList(
  queryClient: QueryClient,
  client$: AttioCore,
  request:
    operations.GetV2ListsListEntriesEntryIdAttributesAttributeValuesRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildEntriesAttributesValuesListQuery(
      client$,
      request,
    ),
  });
}

export function setEntriesAttributesValuesListData(
  client: QueryClient,
  queryKeyBase: [
    list: string,
    entryId: string,
    attribute: string,
    parameters: {
      showHistoric?: boolean | undefined;
      limit?: number | undefined;
      offset?: number | undefined;
    },
  ],
  data: EntriesAttributesValuesListQueryData,
): EntriesAttributesValuesListQueryData | undefined {
  const key = queryKeyEntriesAttributesValuesList(...queryKeyBase);

  return client.setQueryData<EntriesAttributesValuesListQueryData>(key, data);
}

export function invalidateEntriesAttributesValuesList(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [
      list: string,
      entryId: string,
      attribute: string,
      parameters: {
        showHistoric?: boolean | undefined;
        limit?: number | undefined;
        offset?: number | undefined;
      },
    ]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["attio-js", "values", "list", ...queryKeyBase],
  });
}

export function invalidateAllEntriesAttributesValuesList(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["attio-js", "values", "list"],
  });
}

export function buildEntriesAttributesValuesListQuery(
  client$: AttioCore,
  request:
    operations.GetV2ListsListEntriesEntryIdAttributesAttributeValuesRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<EntriesAttributesValuesListQueryData>;
} {
  return {
    queryKey: queryKeyEntriesAttributesValuesList(
      request.list,
      request.entryId,
      request.attribute,
      {
        showHistoric: request.showHistoric,
        limit: request.limit,
        offset: request.offset,
      },
    ),
    queryFn: async function entriesAttributesValuesListQueryFn(
      ctx,
    ): Promise<EntriesAttributesValuesListQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(entriesAttributesValuesList(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyEntriesAttributesValuesList(
  list: string,
  entryId: string,
  attribute: string,
  parameters: {
    showHistoric?: boolean | undefined;
    limit?: number | undefined;
    offset?: number | undefined;
  },
): QueryKey {
  return ["attio-js", "values", "list", list, entryId, attribute, parameters];
}
