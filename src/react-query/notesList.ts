/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { AttioCore } from "../core.js";
import { notesList } from "../funcs/notesList.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useAttioContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type NotesListQueryData = operations.GetV2NotesResponseBody;

/**
 * List notes
 *
 * @remarks
 * List notes for all records or for a specific record.
 *
 * Required scopes: `note:read`, `object_configuration:read`, `record_permission:read`.
 */
export function useNotesList(
  request: operations.GetV2NotesRequest,
  options?: QueryHookOptions<NotesListQueryData>,
): UseQueryResult<NotesListQueryData, Error> {
  const client = useAttioContext();
  return useQuery({
    ...buildNotesListQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * List notes
 *
 * @remarks
 * List notes for all records or for a specific record.
 *
 * Required scopes: `note:read`, `object_configuration:read`, `record_permission:read`.
 */
export function useNotesListSuspense(
  request: operations.GetV2NotesRequest,
  options?: SuspenseQueryHookOptions<NotesListQueryData>,
): UseSuspenseQueryResult<NotesListQueryData, Error> {
  const client = useAttioContext();
  return useSuspenseQuery({
    ...buildNotesListQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchNotesList(
  queryClient: QueryClient,
  client$: AttioCore,
  request: operations.GetV2NotesRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildNotesListQuery(
      client$,
      request,
    ),
  });
}

export function setNotesListData(
  client: QueryClient,
  queryKeyBase: [
    parameters: {
      limit?: number | undefined;
      offset?: number | undefined;
      parentObject?: string | undefined;
      parentRecordId?: string | undefined;
    },
  ],
  data: NotesListQueryData,
): NotesListQueryData | undefined {
  const key = queryKeyNotesList(...queryKeyBase);

  return client.setQueryData<NotesListQueryData>(key, data);
}

export function invalidateNotesList(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: {
      limit?: number | undefined;
      offset?: number | undefined;
      parentObject?: string | undefined;
      parentRecordId?: string | undefined;
    }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["attio-js", "Notes", "list", ...queryKeyBase],
  });
}

export function invalidateAllNotesList(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["attio-js", "Notes", "list"],
  });
}

export function buildNotesListQuery(
  client$: AttioCore,
  request: operations.GetV2NotesRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<NotesListQueryData>;
} {
  return {
    queryKey: queryKeyNotesList({
      limit: request.limit,
      offset: request.offset,
      parentObject: request.parentObject,
      parentRecordId: request.parentRecordId,
    }),
    queryFn: async function notesListQueryFn(ctx): Promise<NotesListQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(notesList(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyNotesList(
  parameters: {
    limit?: number | undefined;
    offset?: number | undefined;
    parentObject?: string | undefined;
    parentRecordId?: string | undefined;
  },
): QueryKey {
  return ["attio-js", "Notes", "list", parameters];
}
