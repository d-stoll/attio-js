/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";

export const PutV2ObjectsObjectRecordsRecordIdRecordsType = {
  InvalidRequestError: "invalid_request_error",
} as const;
export type PutV2ObjectsObjectRecordsRecordIdRecordsType = ClosedEnum<
  typeof PutV2ObjectsObjectRecordsRecordIdRecordsType
>;

export const PutV2ObjectsObjectRecordsRecordIdRecordsCode = {
  NotFound: "not_found",
} as const;
export type PutV2ObjectsObjectRecordsRecordIdRecordsCode = ClosedEnum<
  typeof PutV2ObjectsObjectRecordsRecordIdRecordsCode
>;

/**
 * Not Found
 */
export type PutV2ObjectsObjectRecordsRecordIdRecordsResponseBodyData = {
  statusCode: number;
  type: PutV2ObjectsObjectRecordsRecordIdRecordsType;
  code: PutV2ObjectsObjectRecordsRecordIdRecordsCode;
  message: string;
};

/**
 * Not Found
 */
export class PutV2ObjectsObjectRecordsRecordIdRecordsResponseBody
  extends Error
{
  statusCode: number;
  type: PutV2ObjectsObjectRecordsRecordIdRecordsType;
  code: PutV2ObjectsObjectRecordsRecordIdRecordsCode;

  /** The original data that was passed to this error instance. */
  data$: PutV2ObjectsObjectRecordsRecordIdRecordsResponseBodyData;

  constructor(err: PutV2ObjectsObjectRecordsRecordIdRecordsResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.statusCode = err.statusCode;
    this.type = err.type;
    this.code = err.code;

    this.name = "PutV2ObjectsObjectRecordsRecordIdRecordsResponseBody";
  }
}

export const PutV2ObjectsObjectRecordsRecordIdType = {
  InvalidRequestError: "invalid_request_error",
} as const;
export type PutV2ObjectsObjectRecordsRecordIdType = ClosedEnum<
  typeof PutV2ObjectsObjectRecordsRecordIdType
>;

export const PutV2ObjectsObjectRecordsRecordIdCode = {
  MissingValue: "missing_value",
} as const;
export type PutV2ObjectsObjectRecordsRecordIdCode = ClosedEnum<
  typeof PutV2ObjectsObjectRecordsRecordIdCode
>;

/**
 * Bad Request
 */
export type PutV2ObjectsObjectRecordsRecordIdResponseBodyData = {
  statusCode: number;
  type: PutV2ObjectsObjectRecordsRecordIdType;
  code: PutV2ObjectsObjectRecordsRecordIdCode;
  message: string;
};

/**
 * Bad Request
 */
export class PutV2ObjectsObjectRecordsRecordIdResponseBody extends Error {
  statusCode: number;
  type: PutV2ObjectsObjectRecordsRecordIdType;
  code: PutV2ObjectsObjectRecordsRecordIdCode;

  /** The original data that was passed to this error instance. */
  data$: PutV2ObjectsObjectRecordsRecordIdResponseBodyData;

  constructor(err: PutV2ObjectsObjectRecordsRecordIdResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.statusCode = err.statusCode;
    this.type = err.type;
    this.code = err.code;

    this.name = "PutV2ObjectsObjectRecordsRecordIdResponseBody";
  }
}

/** @internal */
export const PutV2ObjectsObjectRecordsRecordIdRecordsType$inboundSchema:
  z.ZodNativeEnum<typeof PutV2ObjectsObjectRecordsRecordIdRecordsType> = z
    .nativeEnum(PutV2ObjectsObjectRecordsRecordIdRecordsType);

/** @internal */
export const PutV2ObjectsObjectRecordsRecordIdRecordsType$outboundSchema:
  z.ZodNativeEnum<typeof PutV2ObjectsObjectRecordsRecordIdRecordsType> =
    PutV2ObjectsObjectRecordsRecordIdRecordsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV2ObjectsObjectRecordsRecordIdRecordsType$ {
  /** @deprecated use `PutV2ObjectsObjectRecordsRecordIdRecordsType$inboundSchema` instead. */
  export const inboundSchema =
    PutV2ObjectsObjectRecordsRecordIdRecordsType$inboundSchema;
  /** @deprecated use `PutV2ObjectsObjectRecordsRecordIdRecordsType$outboundSchema` instead. */
  export const outboundSchema =
    PutV2ObjectsObjectRecordsRecordIdRecordsType$outboundSchema;
}

/** @internal */
export const PutV2ObjectsObjectRecordsRecordIdRecordsCode$inboundSchema:
  z.ZodNativeEnum<typeof PutV2ObjectsObjectRecordsRecordIdRecordsCode> = z
    .nativeEnum(PutV2ObjectsObjectRecordsRecordIdRecordsCode);

/** @internal */
export const PutV2ObjectsObjectRecordsRecordIdRecordsCode$outboundSchema:
  z.ZodNativeEnum<typeof PutV2ObjectsObjectRecordsRecordIdRecordsCode> =
    PutV2ObjectsObjectRecordsRecordIdRecordsCode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV2ObjectsObjectRecordsRecordIdRecordsCode$ {
  /** @deprecated use `PutV2ObjectsObjectRecordsRecordIdRecordsCode$inboundSchema` instead. */
  export const inboundSchema =
    PutV2ObjectsObjectRecordsRecordIdRecordsCode$inboundSchema;
  /** @deprecated use `PutV2ObjectsObjectRecordsRecordIdRecordsCode$outboundSchema` instead. */
  export const outboundSchema =
    PutV2ObjectsObjectRecordsRecordIdRecordsCode$outboundSchema;
}

/** @internal */
export const PutV2ObjectsObjectRecordsRecordIdRecordsResponseBody$inboundSchema:
  z.ZodType<
    PutV2ObjectsObjectRecordsRecordIdRecordsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number(),
    type: PutV2ObjectsObjectRecordsRecordIdRecordsType$inboundSchema,
    code: PutV2ObjectsObjectRecordsRecordIdRecordsCode$inboundSchema,
    message: z.string(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
      });

      return new PutV2ObjectsObjectRecordsRecordIdRecordsResponseBody(remapped);
    });

/** @internal */
export type PutV2ObjectsObjectRecordsRecordIdRecordsResponseBody$Outbound = {
  status_code: number;
  type: string;
  code: string;
  message: string;
};

/** @internal */
export const PutV2ObjectsObjectRecordsRecordIdRecordsResponseBody$outboundSchema:
  z.ZodType<
    PutV2ObjectsObjectRecordsRecordIdRecordsResponseBody$Outbound,
    z.ZodTypeDef,
    PutV2ObjectsObjectRecordsRecordIdRecordsResponseBody
  > = z.instanceof(PutV2ObjectsObjectRecordsRecordIdRecordsResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number(),
        type: PutV2ObjectsObjectRecordsRecordIdRecordsType$outboundSchema,
        code: PutV2ObjectsObjectRecordsRecordIdRecordsCode$outboundSchema,
        message: z.string(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV2ObjectsObjectRecordsRecordIdRecordsResponseBody$ {
  /** @deprecated use `PutV2ObjectsObjectRecordsRecordIdRecordsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PutV2ObjectsObjectRecordsRecordIdRecordsResponseBody$inboundSchema;
  /** @deprecated use `PutV2ObjectsObjectRecordsRecordIdRecordsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PutV2ObjectsObjectRecordsRecordIdRecordsResponseBody$outboundSchema;
  /** @deprecated use `PutV2ObjectsObjectRecordsRecordIdRecordsResponseBody$Outbound` instead. */
  export type Outbound =
    PutV2ObjectsObjectRecordsRecordIdRecordsResponseBody$Outbound;
}

/** @internal */
export const PutV2ObjectsObjectRecordsRecordIdType$inboundSchema:
  z.ZodNativeEnum<typeof PutV2ObjectsObjectRecordsRecordIdType> = z.nativeEnum(
    PutV2ObjectsObjectRecordsRecordIdType,
  );

/** @internal */
export const PutV2ObjectsObjectRecordsRecordIdType$outboundSchema:
  z.ZodNativeEnum<typeof PutV2ObjectsObjectRecordsRecordIdType> =
    PutV2ObjectsObjectRecordsRecordIdType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV2ObjectsObjectRecordsRecordIdType$ {
  /** @deprecated use `PutV2ObjectsObjectRecordsRecordIdType$inboundSchema` instead. */
  export const inboundSchema =
    PutV2ObjectsObjectRecordsRecordIdType$inboundSchema;
  /** @deprecated use `PutV2ObjectsObjectRecordsRecordIdType$outboundSchema` instead. */
  export const outboundSchema =
    PutV2ObjectsObjectRecordsRecordIdType$outboundSchema;
}

/** @internal */
export const PutV2ObjectsObjectRecordsRecordIdCode$inboundSchema:
  z.ZodNativeEnum<typeof PutV2ObjectsObjectRecordsRecordIdCode> = z.nativeEnum(
    PutV2ObjectsObjectRecordsRecordIdCode,
  );

/** @internal */
export const PutV2ObjectsObjectRecordsRecordIdCode$outboundSchema:
  z.ZodNativeEnum<typeof PutV2ObjectsObjectRecordsRecordIdCode> =
    PutV2ObjectsObjectRecordsRecordIdCode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV2ObjectsObjectRecordsRecordIdCode$ {
  /** @deprecated use `PutV2ObjectsObjectRecordsRecordIdCode$inboundSchema` instead. */
  export const inboundSchema =
    PutV2ObjectsObjectRecordsRecordIdCode$inboundSchema;
  /** @deprecated use `PutV2ObjectsObjectRecordsRecordIdCode$outboundSchema` instead. */
  export const outboundSchema =
    PutV2ObjectsObjectRecordsRecordIdCode$outboundSchema;
}

/** @internal */
export const PutV2ObjectsObjectRecordsRecordIdResponseBody$inboundSchema:
  z.ZodType<
    PutV2ObjectsObjectRecordsRecordIdResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number(),
    type: PutV2ObjectsObjectRecordsRecordIdType$inboundSchema,
    code: PutV2ObjectsObjectRecordsRecordIdCode$inboundSchema,
    message: z.string(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
      });

      return new PutV2ObjectsObjectRecordsRecordIdResponseBody(remapped);
    });

/** @internal */
export type PutV2ObjectsObjectRecordsRecordIdResponseBody$Outbound = {
  status_code: number;
  type: string;
  code: string;
  message: string;
};

/** @internal */
export const PutV2ObjectsObjectRecordsRecordIdResponseBody$outboundSchema:
  z.ZodType<
    PutV2ObjectsObjectRecordsRecordIdResponseBody$Outbound,
    z.ZodTypeDef,
    PutV2ObjectsObjectRecordsRecordIdResponseBody
  > = z.instanceof(PutV2ObjectsObjectRecordsRecordIdResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number(),
        type: PutV2ObjectsObjectRecordsRecordIdType$outboundSchema,
        code: PutV2ObjectsObjectRecordsRecordIdCode$outboundSchema,
        message: z.string(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV2ObjectsObjectRecordsRecordIdResponseBody$ {
  /** @deprecated use `PutV2ObjectsObjectRecordsRecordIdResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PutV2ObjectsObjectRecordsRecordIdResponseBody$inboundSchema;
  /** @deprecated use `PutV2ObjectsObjectRecordsRecordIdResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PutV2ObjectsObjectRecordsRecordIdResponseBody$outboundSchema;
  /** @deprecated use `PutV2ObjectsObjectRecordsRecordIdResponseBody$Outbound` instead. */
  export type Outbound = PutV2ObjectsObjectRecordsRecordIdResponseBody$Outbound;
}
