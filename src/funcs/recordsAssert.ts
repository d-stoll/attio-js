/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { AttioCore } from "../core.js";
import { encodeFormQuery, encodeJSON, encodeSimple } from "../lib/encodings.js";
import * as M from "../lib/matchers.js";
import { compactMap } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import { AttioError } from "../models/errors/attioerror.js";
import {
  GetV2ObjectsObjectNotFoundError,
  GetV2ObjectsObjectNotFoundError$inboundSchema,
  PutV2ObjectsObjectRecordsInvalidRequestError,
  PutV2ObjectsObjectRecordsInvalidRequestError$inboundSchema,
} from "../models/errors/getv2objectsobject.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import { ResponseValidationError } from "../models/errors/responsevalidationerror.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import {
  PutV2ObjectsObjectRecordsRequest,
  PutV2ObjectsObjectRecordsRequest$outboundSchema,
  PutV2ObjectsObjectRecordsResponse,
  PutV2ObjectsObjectRecordsResponse$inboundSchema,
} from "../models/operations/putv2objectsobjectrecords.js";
import { APICall, APIPromise } from "../types/async.js";
import { Result } from "../types/fp.js";

/**
 * Assert a record
 *
 * @remarks
 * Use this endpoint to create or update people, companies and other records. A matching attribute is used to search for existing records. If a record is found with the same value for the matching attribute, that record will be updated. If no record with the same value for the matching attribute is found, a new record will be created instead. If you would like to avoid matching, please use the [Create record endpoint](/reference/post_v2-objects-object-records).
 *
 * If the matching attribute is a multiselect attribute, new values will be added and existing values will not be deleted. For any other multiselect attribute, all values will be either created or deleted as necessary to match the list of supplied values.
 *
 * Required scopes: `record_permission:read-write`, `object_configuration:read`.
 */
export function recordsAssert(
  client: AttioCore,
  request: PutV2ObjectsObjectRecordsRequest,
  options?: RequestOptions,
): APIPromise<
  Result<
    PutV2ObjectsObjectRecordsResponse,
    | PutV2ObjectsObjectRecordsInvalidRequestError
    | GetV2ObjectsObjectNotFoundError
    | AttioError
    | ResponseValidationError
    | ConnectionError
    | RequestAbortedError
    | RequestTimeoutError
    | InvalidRequestError
    | UnexpectedClientError
    | SDKValidationError
  >
> {
  return new APIPromise($do(
    client,
    request,
    options,
  ));
}

async function $do(
  client: AttioCore,
  request: PutV2ObjectsObjectRecordsRequest,
  options?: RequestOptions,
): Promise<
  [
    Result<
      PutV2ObjectsObjectRecordsResponse,
      | PutV2ObjectsObjectRecordsInvalidRequestError
      | GetV2ObjectsObjectNotFoundError
      | AttioError
      | ResponseValidationError
      | ConnectionError
      | RequestAbortedError
      | RequestTimeoutError
      | InvalidRequestError
      | UnexpectedClientError
      | SDKValidationError
    >,
    APICall,
  ]
> {
  const parsed = safeParse(
    request,
    (value) => PutV2ObjectsObjectRecordsRequest$outboundSchema.parse(value),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return [parsed, { status: "invalid" }];
  }
  const payload = parsed.value;
  const body = encodeJSON("body", payload.RequestBody, { explode: true });

  const pathParams = {
    object: encodeSimple("object", payload.object, {
      explode: false,
      charEncoding: "percent",
    }),
  };

  const path = pathToFunc("/v2/objects/{object}/records")(pathParams);

  const query = encodeFormQuery({
    "matching_attribute": payload.matching_attribute,
  });

  const headers = new Headers(compactMap({
    "Content-Type": "application/json",
    Accept: "application/json",
  }));

  const secConfig = await extractSecurity(client._options.apiKey);
  const securityInput = secConfig == null ? {} : { apiKey: secConfig };
  const requestSecurity = resolveGlobalSecurity(securityInput);

  const context = {
    options: client._options,
    baseURL: options?.serverURL ?? client._baseURL ?? "",
    operationID: "put_/v2/objects/{object}/records",
    oAuth2Scopes: [],

    resolvedSecurity: requestSecurity,

    securitySource: client._options.apiKey,
    retryConfig: options?.retries
      || client._options.retryConfig
      || { strategy: "none" },
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  };

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "PUT",
    baseURL: options?.serverURL,
    path: path,
    headers: headers,
    query: query,
    body: body,
    userAgent: client._options.userAgent,
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return [requestRes, { status: "invalid" }];
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ["400", "404", "4XX", "5XX"],
    retryConfig: context.retryConfig,
    retryCodes: context.retryCodes,
  });
  if (!doResult.ok) {
    return [doResult, { status: "request-error", request: req }];
  }
  const response = doResult.value;

  const responseFields = {
    HttpMeta: { Response: response, Request: req },
  };

  const [result] = await M.match<
    PutV2ObjectsObjectRecordsResponse,
    | PutV2ObjectsObjectRecordsInvalidRequestError
    | GetV2ObjectsObjectNotFoundError
    | AttioError
    | ResponseValidationError
    | ConnectionError
    | RequestAbortedError
    | RequestTimeoutError
    | InvalidRequestError
    | UnexpectedClientError
    | SDKValidationError
  >(
    M.json(200, PutV2ObjectsObjectRecordsResponse$inboundSchema),
    M.jsonErr(400, PutV2ObjectsObjectRecordsInvalidRequestError$inboundSchema),
    M.jsonErr(404, GetV2ObjectsObjectNotFoundError$inboundSchema),
    M.fail("4XX"),
    M.fail("5XX"),
  )(response, req, { extraFields: responseFields });
  if (!result.ok) {
    return [result, { status: "complete", request: req, response }];
  }

  return [result, { status: "complete", request: req, response }];
}
