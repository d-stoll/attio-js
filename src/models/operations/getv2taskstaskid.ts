/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetV2TasksTaskIdRequest = {
  taskId: string;
};

/**
 * Success
 */
export type GetV2TasksTaskIdResponseBody = {
  data: components.Task;
};

/** @internal */
export const GetV2TasksTaskIdRequest$inboundSchema: z.ZodType<
  GetV2TasksTaskIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  task_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "task_id": "taskId",
  });
});

/** @internal */
export type GetV2TasksTaskIdRequest$Outbound = {
  task_id: string;
};

/** @internal */
export const GetV2TasksTaskIdRequest$outboundSchema: z.ZodType<
  GetV2TasksTaskIdRequest$Outbound,
  z.ZodTypeDef,
  GetV2TasksTaskIdRequest
> = z.object({
  taskId: z.string(),
}).transform((v) => {
  return remap$(v, {
    taskId: "task_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2TasksTaskIdRequest$ {
  /** @deprecated use `GetV2TasksTaskIdRequest$inboundSchema` instead. */
  export const inboundSchema = GetV2TasksTaskIdRequest$inboundSchema;
  /** @deprecated use `GetV2TasksTaskIdRequest$outboundSchema` instead. */
  export const outboundSchema = GetV2TasksTaskIdRequest$outboundSchema;
  /** @deprecated use `GetV2TasksTaskIdRequest$Outbound` instead. */
  export type Outbound = GetV2TasksTaskIdRequest$Outbound;
}

export function getV2TasksTaskIdRequestToJSON(
  getV2TasksTaskIdRequest: GetV2TasksTaskIdRequest,
): string {
  return JSON.stringify(
    GetV2TasksTaskIdRequest$outboundSchema.parse(getV2TasksTaskIdRequest),
  );
}

export function getV2TasksTaskIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetV2TasksTaskIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2TasksTaskIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2TasksTaskIdRequest' from JSON`,
  );
}

/** @internal */
export const GetV2TasksTaskIdResponseBody$inboundSchema: z.ZodType<
  GetV2TasksTaskIdResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: components.Task$inboundSchema,
});

/** @internal */
export type GetV2TasksTaskIdResponseBody$Outbound = {
  data: components.Task$Outbound;
};

/** @internal */
export const GetV2TasksTaskIdResponseBody$outboundSchema: z.ZodType<
  GetV2TasksTaskIdResponseBody$Outbound,
  z.ZodTypeDef,
  GetV2TasksTaskIdResponseBody
> = z.object({
  data: components.Task$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2TasksTaskIdResponseBody$ {
  /** @deprecated use `GetV2TasksTaskIdResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetV2TasksTaskIdResponseBody$inboundSchema;
  /** @deprecated use `GetV2TasksTaskIdResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetV2TasksTaskIdResponseBody$outboundSchema;
  /** @deprecated use `GetV2TasksTaskIdResponseBody$Outbound` instead. */
  export type Outbound = GetV2TasksTaskIdResponseBody$Outbound;
}

export function getV2TasksTaskIdResponseBodyToJSON(
  getV2TasksTaskIdResponseBody: GetV2TasksTaskIdResponseBody,
): string {
  return JSON.stringify(
    GetV2TasksTaskIdResponseBody$outboundSchema.parse(
      getV2TasksTaskIdResponseBody,
    ),
  );
}

export function getV2TasksTaskIdResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetV2TasksTaskIdResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2TasksTaskIdResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2TasksTaskIdResponseBody' from JSON`,
  );
}
