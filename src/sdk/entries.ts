/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { entriesDeleteV2ListsListEntriesEntryId } from "../funcs/entriesDeleteV2ListsListEntriesEntryId.js";
import { entriesGetV2ListsListEntriesEntryId } from "../funcs/entriesGetV2ListsListEntriesEntryId.js";
import { entriesGetV2ListsListEntriesEntryIdAttributesAttributeValues } from "../funcs/entriesGetV2ListsListEntriesEntryIdAttributesAttributeValues.js";
import { entriesPatchV2ListsListEntriesEntryId } from "../funcs/entriesPatchV2ListsListEntriesEntryId.js";
import { entriesPostV2ListsListEntries } from "../funcs/entriesPostV2ListsListEntries.js";
import { entriesPostV2ListsListEntriesQuery } from "../funcs/entriesPostV2ListsListEntriesQuery.js";
import { entriesPutV2ListsListEntries } from "../funcs/entriesPutV2ListsListEntries.js";
import { entriesPutV2ListsListEntriesEntryId } from "../funcs/entriesPutV2ListsListEntriesEntryId.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Entries extends ClientSDK {
  /**
   * List entries
   *
   * @remarks
   * Lists entries in a given list, with the option to filter and sort results.
   *
   * Required scopes: `list_entry:read`, `list_configuration:read`.
   */
  async postV2ListsListEntriesQuery(
    request: operations.PostV2ListsListEntriesQueryRequest,
    options?: RequestOptions,
  ): Promise<operations.PostV2ListsListEntriesQueryResponseBody> {
    return unwrapAsync(entriesPostV2ListsListEntriesQuery(
      this,
      request,
      options,
    ));
  }

  /**
   * Create an entry (add record to list)
   *
   * @remarks
   * Adds a record to a list as a new list entry. This endpoint will throw on conflicts of unique attributes. Multiple list entries are allowed for the same parent record
   *
   * Required scopes: `list_entry:read-write`, `list_configuration:read`.
   */
  async postV2ListsListEntries(
    request: operations.PostV2ListsListEntriesRequest,
    options?: RequestOptions,
  ): Promise<operations.PostV2ListsListEntriesResponseBody> {
    return unwrapAsync(entriesPostV2ListsListEntries(
      this,
      request,
      options,
    ));
  }

  /**
   * Assert a list entry by parent
   *
   * @remarks
   * Use this endpoint to create or update a list entry for a given parent record. If an entry with the specified parent record is found, that entry will be updated. If no such entry is found, a new entry will be created instead. If there are multiple entries with the same parent record, this endpoint with return the "MULTIPLE_MATCH_RESULTS" error. When writing to multi-select attributes, all values will be either created or deleted as necessary to match the list of values supplied in the request body.
   *
   * Required scopes: `list_entry:read-write`, `list_configuration:read`.
   */
  async putV2ListsListEntries(
    request: operations.PutV2ListsListEntriesRequest,
    options?: RequestOptions,
  ): Promise<operations.PutV2ListsListEntriesResponseBody> {
    return unwrapAsync(entriesPutV2ListsListEntries(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a list entry
   *
   * @remarks
   * Gets a single list entry by its `entry_id`.
   *
   * Required scopes: `list_entry:read`, `list_configuration:read`.
   */
  async getV2ListsListEntriesEntryId(
    request: operations.GetV2ListsListEntriesEntryIdRequest,
    options?: RequestOptions,
  ): Promise<operations.GetV2ListsListEntriesEntryIdResponseBody> {
    return unwrapAsync(entriesGetV2ListsListEntriesEntryId(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a list entry (append multiselect values)
   *
   * @remarks
   * Use this endpoint to update list entries by `entry_id`. If the update payload includes multiselect attributes, the values supplied will be created and prepended to the list of values that already exist (if any). Use the `PUT` endpoint to overwrite or remove multiselect attribute values.
   *
   * Required scopes: `list_entry:read-write`, `list_configuration:read`.
   */
  async patchV2ListsListEntriesEntryId(
    request: operations.PatchV2ListsListEntriesEntryIdRequest,
    options?: RequestOptions,
  ): Promise<operations.PatchV2ListsListEntriesEntryIdResponseBody> {
    return unwrapAsync(entriesPatchV2ListsListEntriesEntryId(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a list entry (overwrite multiselect values)
   *
   * @remarks
   * Use this endpoint to update list entries by `entry_id`. If the update payload includes multiselect attributes, the values supplied will overwrite/remove the list of values that already exist (if any). Use the `PATCH` endpoint to add multiselect attribute values without removing those value that already exist.
   *
   * Required scopes: `list_entry:read-write`, `list_configuration:read`.
   */
  async putV2ListsListEntriesEntryId(
    request: operations.PutV2ListsListEntriesEntryIdRequest,
    options?: RequestOptions,
  ): Promise<operations.PutV2ListsListEntriesEntryIdResponseBody> {
    return unwrapAsync(entriesPutV2ListsListEntriesEntryId(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a list entry
   *
   * @remarks
   * Deletes a single list entry by its `entry_id`.
   *
   * Required scopes: `list_entry:read-write`, `list_configuration:read`.
   */
  async deleteV2ListsListEntriesEntryId(
    request: operations.DeleteV2ListsListEntriesEntryIdRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteV2ListsListEntriesEntryIdResponseBody> {
    return unwrapAsync(entriesDeleteV2ListsListEntriesEntryId(
      this,
      request,
      options,
    ));
  }

  /**
   * List attribute values for a list entry
   *
   * @remarks
   * Gets all values for a given attribute on a list entry. If the attribute is historic, this endpoint has the ability to return all historic values using the `show_historic` query param.
   *
   * Required scopes: `list_entry:read`, `list_configuration:read`.
   */
  async getV2ListsListEntriesEntryIdAttributesAttributeValues(
    request:
      operations.GetV2ListsListEntriesEntryIdAttributesAttributeValuesRequest,
    options?: RequestOptions,
  ): Promise<
    operations.GetV2ListsListEntriesEntryIdAttributesAttributeValuesResponseBody
  > {
    return unwrapAsync(
      entriesGetV2ListsListEntriesEntryIdAttributesAttributeValues(
        this,
        request,
        options,
      ),
    );
  }
}
