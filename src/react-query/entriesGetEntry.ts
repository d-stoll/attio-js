/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { AttioCore } from "../core.js";
import { entriesGetEntry } from "../funcs/entriesGetEntry.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useAttioContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type EntriesGetEntryQueryData =
  operations.GetV2ListsListEntriesEntryIdResponseBody;

/**
 * Get a list entry
 *
 * @remarks
 * Gets a single list entry by its `entry_id`.
 *
 * Required scopes: `list_entry:read`, `list_configuration:read`.
 */
export function useEntriesGetEntry(
  request: operations.GetV2ListsListEntriesEntryIdRequest,
  options?: QueryHookOptions<EntriesGetEntryQueryData>,
): UseQueryResult<EntriesGetEntryQueryData, Error> {
  const client = useAttioContext();
  return useQuery({
    ...buildEntriesGetEntryQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get a list entry
 *
 * @remarks
 * Gets a single list entry by its `entry_id`.
 *
 * Required scopes: `list_entry:read`, `list_configuration:read`.
 */
export function useEntriesGetEntrySuspense(
  request: operations.GetV2ListsListEntriesEntryIdRequest,
  options?: SuspenseQueryHookOptions<EntriesGetEntryQueryData>,
): UseSuspenseQueryResult<EntriesGetEntryQueryData, Error> {
  const client = useAttioContext();
  return useSuspenseQuery({
    ...buildEntriesGetEntryQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchEntriesGetEntry(
  queryClient: QueryClient,
  client$: AttioCore,
  request: operations.GetV2ListsListEntriesEntryIdRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildEntriesGetEntryQuery(
      client$,
      request,
    ),
  });
}

export function setEntriesGetEntryData(
  client: QueryClient,
  queryKeyBase: [list: string, entryId: string],
  data: EntriesGetEntryQueryData,
): EntriesGetEntryQueryData | undefined {
  const key = queryKeyEntriesGetEntry(...queryKeyBase);

  return client.setQueryData<EntriesGetEntryQueryData>(key, data);
}

export function invalidateEntriesGetEntry(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<[list: string, entryId: string]>,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["attio-js", "Entries", "getEntry", ...queryKeyBase],
  });
}

export function invalidateAllEntriesGetEntry(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["attio-js", "Entries", "getEntry"],
  });
}

export function buildEntriesGetEntryQuery(
  client$: AttioCore,
  request: operations.GetV2ListsListEntriesEntryIdRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<EntriesGetEntryQueryData>;
} {
  return {
    queryKey: queryKeyEntriesGetEntry(request.list, request.entryId),
    queryFn: async function entriesGetEntryQueryFn(
      ctx,
    ): Promise<EntriesGetEntryQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(entriesGetEntry(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyEntriesGetEntry(
  list: string,
  entryId: string,
): QueryKey {
  return ["attio-js", "Entries", "getEntry", list, entryId];
}
