/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { recordsPatchV2ObjectsObjectRecordsRecordId } from "../../funcs/recordsPatchV2ObjectsObjectRecordsRecordId.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.PatchV2ObjectsObjectRecordsRecordIdRequest$inboundSchema,
};

export const tool$recordsPatchV2ObjectsObjectRecordsRecordId: ToolDefinition<
  typeof args
> = {
  name: "records-patch-v2-objects-object-records-record-id",
  description: `Update a record (append multiselect values)

Use this endpoint to update people, companies, and other records by \`record_id\`. If the update payload includes multiselect attributes, the values supplied will be created and prepended to the list of values that already exist (if any). Use the \`PUT\` endpoint to overwrite or remove multiselect attribute values.

Required scopes: \`record_permission:read-write\`, \`object_configuration:read\`.`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await recordsPatchV2ObjectsObjectRecordsRecordId(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
