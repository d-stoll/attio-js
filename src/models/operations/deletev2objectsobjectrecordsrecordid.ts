/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteV2ObjectsObjectRecordsRecordIdRequest = {
  object: string;
  recordId: string;
};

/**
 * Success
 */
export type DeleteV2ObjectsObjectRecordsRecordIdResponseBody = {};

/** @internal */
export const DeleteV2ObjectsObjectRecordsRecordIdRequest$inboundSchema:
  z.ZodType<
    DeleteV2ObjectsObjectRecordsRecordIdRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    object: z.string(),
    record_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "record_id": "recordId",
    });
  });

/** @internal */
export type DeleteV2ObjectsObjectRecordsRecordIdRequest$Outbound = {
  object: string;
  record_id: string;
};

/** @internal */
export const DeleteV2ObjectsObjectRecordsRecordIdRequest$outboundSchema:
  z.ZodType<
    DeleteV2ObjectsObjectRecordsRecordIdRequest$Outbound,
    z.ZodTypeDef,
    DeleteV2ObjectsObjectRecordsRecordIdRequest
  > = z.object({
    object: z.string(),
    recordId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      recordId: "record_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteV2ObjectsObjectRecordsRecordIdRequest$ {
  /** @deprecated use `DeleteV2ObjectsObjectRecordsRecordIdRequest$inboundSchema` instead. */
  export const inboundSchema =
    DeleteV2ObjectsObjectRecordsRecordIdRequest$inboundSchema;
  /** @deprecated use `DeleteV2ObjectsObjectRecordsRecordIdRequest$outboundSchema` instead. */
  export const outboundSchema =
    DeleteV2ObjectsObjectRecordsRecordIdRequest$outboundSchema;
  /** @deprecated use `DeleteV2ObjectsObjectRecordsRecordIdRequest$Outbound` instead. */
  export type Outbound = DeleteV2ObjectsObjectRecordsRecordIdRequest$Outbound;
}

export function deleteV2ObjectsObjectRecordsRecordIdRequestToJSON(
  deleteV2ObjectsObjectRecordsRecordIdRequest:
    DeleteV2ObjectsObjectRecordsRecordIdRequest,
): string {
  return JSON.stringify(
    DeleteV2ObjectsObjectRecordsRecordIdRequest$outboundSchema.parse(
      deleteV2ObjectsObjectRecordsRecordIdRequest,
    ),
  );
}

export function deleteV2ObjectsObjectRecordsRecordIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  DeleteV2ObjectsObjectRecordsRecordIdRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteV2ObjectsObjectRecordsRecordIdRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeleteV2ObjectsObjectRecordsRecordIdRequest' from JSON`,
  );
}

/** @internal */
export const DeleteV2ObjectsObjectRecordsRecordIdResponseBody$inboundSchema:
  z.ZodType<
    DeleteV2ObjectsObjectRecordsRecordIdResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type DeleteV2ObjectsObjectRecordsRecordIdResponseBody$Outbound = {};

/** @internal */
export const DeleteV2ObjectsObjectRecordsRecordIdResponseBody$outboundSchema:
  z.ZodType<
    DeleteV2ObjectsObjectRecordsRecordIdResponseBody$Outbound,
    z.ZodTypeDef,
    DeleteV2ObjectsObjectRecordsRecordIdResponseBody
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteV2ObjectsObjectRecordsRecordIdResponseBody$ {
  /** @deprecated use `DeleteV2ObjectsObjectRecordsRecordIdResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    DeleteV2ObjectsObjectRecordsRecordIdResponseBody$inboundSchema;
  /** @deprecated use `DeleteV2ObjectsObjectRecordsRecordIdResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    DeleteV2ObjectsObjectRecordsRecordIdResponseBody$outboundSchema;
  /** @deprecated use `DeleteV2ObjectsObjectRecordsRecordIdResponseBody$Outbound` instead. */
  export type Outbound =
    DeleteV2ObjectsObjectRecordsRecordIdResponseBody$Outbound;
}

export function deleteV2ObjectsObjectRecordsRecordIdResponseBodyToJSON(
  deleteV2ObjectsObjectRecordsRecordIdResponseBody:
    DeleteV2ObjectsObjectRecordsRecordIdResponseBody,
): string {
  return JSON.stringify(
    DeleteV2ObjectsObjectRecordsRecordIdResponseBody$outboundSchema.parse(
      deleteV2ObjectsObjectRecordsRecordIdResponseBody,
    ),
  );
}

export function deleteV2ObjectsObjectRecordsRecordIdResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  DeleteV2ObjectsObjectRecordsRecordIdResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteV2ObjectsObjectRecordsRecordIdResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeleteV2ObjectsObjectRecordsRecordIdResponseBody' from JSON`,
  );
}
