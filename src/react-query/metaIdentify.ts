/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { AttioCore } from "../core.js";
import { metaIdentify } from "../funcs/metaIdentify.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useAttioContext } from "./_context.js";
import { QueryHookOptions, SuspenseQueryHookOptions } from "./_types.js";

export type MetaIdentifyQueryData = operations.GetV2SelfResponseBody;

/**
 * Identify
 *
 * @remarks
 * Identify the current access token, the workspace it is linked to, and any permissions it has.
 */
export function useMetaIdentify(
  options?: QueryHookOptions<MetaIdentifyQueryData>,
): UseQueryResult<MetaIdentifyQueryData, Error> {
  const client = useAttioContext();
  return useQuery({
    ...buildMetaIdentifyQuery(
      client,
      options,
    ),
    ...options,
  });
}

/**
 * Identify
 *
 * @remarks
 * Identify the current access token, the workspace it is linked to, and any permissions it has.
 */
export function useMetaIdentifySuspense(
  options?: SuspenseQueryHookOptions<MetaIdentifyQueryData>,
): UseSuspenseQueryResult<MetaIdentifyQueryData, Error> {
  const client = useAttioContext();
  return useSuspenseQuery({
    ...buildMetaIdentifyQuery(
      client,
      options,
    ),
    ...options,
  });
}

export function prefetchMetaIdentify(
  queryClient: QueryClient,
  client$: AttioCore,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildMetaIdentifyQuery(
      client$,
    ),
  });
}

export function setMetaIdentifyData(
  client: QueryClient,
  data: MetaIdentifyQueryData,
): MetaIdentifyQueryData | undefined {
  const key = queryKeyMetaIdentify();

  return client.setQueryData<MetaIdentifyQueryData>(key, data);
}

export function invalidateAllMetaIdentify(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["attio-js", "Meta", "identify"],
  });
}

export function buildMetaIdentifyQuery(
  client$: AttioCore,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<MetaIdentifyQueryData>;
} {
  return {
    queryKey: queryKeyMetaIdentify(),
    queryFn: async function metaIdentifyQueryFn(
      ctx,
    ): Promise<MetaIdentifyQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(metaIdentify(
        client$,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyMetaIdentify(): QueryKey {
  return ["attio-js", "Meta", "identify"];
}
