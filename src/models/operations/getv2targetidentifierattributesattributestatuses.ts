/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Whether the attribute is on an object or a list. Please note that the company and people objects do not support status attributes at this time.
 */
export const GetV2TargetIdentifierAttributesAttributeStatusesPathParamTarget = {
  Lists: "lists",
  Objects: "objects",
} as const;
/**
 * Whether the attribute is on an object or a list. Please note that the company and people objects do not support status attributes at this time.
 */
export type GetV2TargetIdentifierAttributesAttributeStatusesPathParamTarget =
  ClosedEnum<
    typeof GetV2TargetIdentifierAttributesAttributeStatusesPathParamTarget
  >;

export type GetV2TargetIdentifierAttributesAttributeStatusesRequest = {
  /**
   * Whether the attribute is on an object or a list. Please note that the company and people objects do not support status attributes at this time.
   */
  target: GetV2TargetIdentifierAttributesAttributeStatusesPathParamTarget;
  identifier: string;
  attribute: string;
  showArchived?: boolean | undefined;
};

/**
 * Success
 */
export type GetV2TargetIdentifierAttributesAttributeStatusesResponseBody = {
  data: Array<components.Status>;
};

/** @internal */
export const GetV2TargetIdentifierAttributesAttributeStatusesPathParamTarget$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2TargetIdentifierAttributesAttributeStatusesPathParamTarget
  > = z.nativeEnum(
    GetV2TargetIdentifierAttributesAttributeStatusesPathParamTarget,
  );

/** @internal */
export const GetV2TargetIdentifierAttributesAttributeStatusesPathParamTarget$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2TargetIdentifierAttributesAttributeStatusesPathParamTarget
  > =
    GetV2TargetIdentifierAttributesAttributeStatusesPathParamTarget$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2TargetIdentifierAttributesAttributeStatusesPathParamTarget$ {
  /** @deprecated use `GetV2TargetIdentifierAttributesAttributeStatusesPathParamTarget$inboundSchema` instead. */
  export const inboundSchema =
    GetV2TargetIdentifierAttributesAttributeStatusesPathParamTarget$inboundSchema;
  /** @deprecated use `GetV2TargetIdentifierAttributesAttributeStatusesPathParamTarget$outboundSchema` instead. */
  export const outboundSchema =
    GetV2TargetIdentifierAttributesAttributeStatusesPathParamTarget$outboundSchema;
}

/** @internal */
export const GetV2TargetIdentifierAttributesAttributeStatusesRequest$inboundSchema:
  z.ZodType<
    GetV2TargetIdentifierAttributesAttributeStatusesRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    target:
      GetV2TargetIdentifierAttributesAttributeStatusesPathParamTarget$inboundSchema,
    identifier: z.string(),
    attribute: z.string(),
    show_archived: z.boolean().default(false),
  }).transform((v) => {
    return remap$(v, {
      "show_archived": "showArchived",
    });
  });

/** @internal */
export type GetV2TargetIdentifierAttributesAttributeStatusesRequest$Outbound = {
  target: string;
  identifier: string;
  attribute: string;
  show_archived: boolean;
};

/** @internal */
export const GetV2TargetIdentifierAttributesAttributeStatusesRequest$outboundSchema:
  z.ZodType<
    GetV2TargetIdentifierAttributesAttributeStatusesRequest$Outbound,
    z.ZodTypeDef,
    GetV2TargetIdentifierAttributesAttributeStatusesRequest
  > = z.object({
    target:
      GetV2TargetIdentifierAttributesAttributeStatusesPathParamTarget$outboundSchema,
    identifier: z.string(),
    attribute: z.string(),
    showArchived: z.boolean().default(false),
  }).transform((v) => {
    return remap$(v, {
      showArchived: "show_archived",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2TargetIdentifierAttributesAttributeStatusesRequest$ {
  /** @deprecated use `GetV2TargetIdentifierAttributesAttributeStatusesRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetV2TargetIdentifierAttributesAttributeStatusesRequest$inboundSchema;
  /** @deprecated use `GetV2TargetIdentifierAttributesAttributeStatusesRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetV2TargetIdentifierAttributesAttributeStatusesRequest$outboundSchema;
  /** @deprecated use `GetV2TargetIdentifierAttributesAttributeStatusesRequest$Outbound` instead. */
  export type Outbound =
    GetV2TargetIdentifierAttributesAttributeStatusesRequest$Outbound;
}

export function getV2TargetIdentifierAttributesAttributeStatusesRequestToJSON(
  getV2TargetIdentifierAttributesAttributeStatusesRequest:
    GetV2TargetIdentifierAttributesAttributeStatusesRequest,
): string {
  return JSON.stringify(
    GetV2TargetIdentifierAttributesAttributeStatusesRequest$outboundSchema
      .parse(getV2TargetIdentifierAttributesAttributeStatusesRequest),
  );
}

export function getV2TargetIdentifierAttributesAttributeStatusesRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2TargetIdentifierAttributesAttributeStatusesRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2TargetIdentifierAttributesAttributeStatusesRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2TargetIdentifierAttributesAttributeStatusesRequest' from JSON`,
  );
}

/** @internal */
export const GetV2TargetIdentifierAttributesAttributeStatusesResponseBody$inboundSchema:
  z.ZodType<
    GetV2TargetIdentifierAttributesAttributeStatusesResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    data: z.array(components.Status$inboundSchema),
  });

/** @internal */
export type GetV2TargetIdentifierAttributesAttributeStatusesResponseBody$Outbound =
  {
    data: Array<components.Status$Outbound>;
  };

/** @internal */
export const GetV2TargetIdentifierAttributesAttributeStatusesResponseBody$outboundSchema:
  z.ZodType<
    GetV2TargetIdentifierAttributesAttributeStatusesResponseBody$Outbound,
    z.ZodTypeDef,
    GetV2TargetIdentifierAttributesAttributeStatusesResponseBody
  > = z.object({
    data: z.array(components.Status$outboundSchema),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2TargetIdentifierAttributesAttributeStatusesResponseBody$ {
  /** @deprecated use `GetV2TargetIdentifierAttributesAttributeStatusesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    GetV2TargetIdentifierAttributesAttributeStatusesResponseBody$inboundSchema;
  /** @deprecated use `GetV2TargetIdentifierAttributesAttributeStatusesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetV2TargetIdentifierAttributesAttributeStatusesResponseBody$outboundSchema;
  /** @deprecated use `GetV2TargetIdentifierAttributesAttributeStatusesResponseBody$Outbound` instead. */
  export type Outbound =
    GetV2TargetIdentifierAttributesAttributeStatusesResponseBody$Outbound;
}

export function getV2TargetIdentifierAttributesAttributeStatusesResponseBodyToJSON(
  getV2TargetIdentifierAttributesAttributeStatusesResponseBody:
    GetV2TargetIdentifierAttributesAttributeStatusesResponseBody,
): string {
  return JSON.stringify(
    GetV2TargetIdentifierAttributesAttributeStatusesResponseBody$outboundSchema
      .parse(getV2TargetIdentifierAttributesAttributeStatusesResponseBody),
  );
}

export function getV2TargetIdentifierAttributesAttributeStatusesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2TargetIdentifierAttributesAttributeStatusesResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2TargetIdentifierAttributesAttributeStatusesResponseBody$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2TargetIdentifierAttributesAttributeStatusesResponseBody' from JSON`,
  );
}
