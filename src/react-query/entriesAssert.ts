/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { AttioCore } from "../core.js";
import { entriesAssert } from "../funcs/entriesAssert.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useAttioContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type EntriesAssertMutationVariables = {
  request: operations.PutV2ListsListEntriesRequest;
  options?: RequestOptions;
};

export type EntriesAssertMutationData =
  operations.PutV2ListsListEntriesResponseBody;

/**
 * Assert a list entry by parent
 *
 * @remarks
 * Use this endpoint to create or update a list entry for a given parent record. If an entry with the specified parent record is found, that entry will be updated. If no such entry is found, a new entry will be created instead. If there are multiple entries with the same parent record, this endpoint with return the "MULTIPLE_MATCH_RESULTS" error. When writing to multi-select attributes, all values will be either created or deleted as necessary to match the list of values supplied in the request body.
 *
 * Required scopes: `list_entry:read-write`, `list_configuration:read`.
 */
export function useEntriesAssertMutation(
  options?: MutationHookOptions<
    EntriesAssertMutationData,
    Error,
    EntriesAssertMutationVariables
  >,
): UseMutationResult<
  EntriesAssertMutationData,
  Error,
  EntriesAssertMutationVariables
> {
  const client = useAttioContext();
  return useMutation({
    ...buildEntriesAssertMutation(client, options),
    ...options,
  });
}

export function mutationKeyEntriesAssert(): MutationKey {
  return ["attio-js", "Entries", "assert"];
}

export function buildEntriesAssertMutation(
  client$: AttioCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: EntriesAssertMutationVariables,
  ) => Promise<EntriesAssertMutationData>;
} {
  return {
    mutationKey: mutationKeyEntriesAssert(),
    mutationFn: function entriesAssertMutationFn({
      request,
      options,
    }): Promise<EntriesAssertMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(entriesAssert(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
