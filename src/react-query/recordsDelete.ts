/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { AttioCore } from "../core.js";
import { recordsDelete } from "../funcs/recordsDelete.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useAttioContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type RecordsDeleteMutationVariables = {
  request: operations.DeleteV2ObjectsObjectRecordsRecordIdRequest;
  options?: RequestOptions;
};

export type RecordsDeleteMutationData =
  operations.DeleteV2ObjectsObjectRecordsRecordIdResponseBody;

/**
 * Delete a record
 *
 * @remarks
 * Deletes a single record (e.g. a company or person) by ID.
 *
 * Required scopes: `object_configuration:read`, `record_permission:read-write`.
 */
export function useRecordsDeleteMutation(
  options?: MutationHookOptions<
    RecordsDeleteMutationData,
    Error,
    RecordsDeleteMutationVariables
  >,
): UseMutationResult<
  RecordsDeleteMutationData,
  Error,
  RecordsDeleteMutationVariables
> {
  const client = useAttioContext();
  return useMutation({
    ...buildRecordsDeleteMutation(client, options),
    ...options,
  });
}

export function mutationKeyRecordsDelete(): MutationKey {
  return ["attio-js", "Records", "delete"];
}

export function buildRecordsDeleteMutation(
  client$: AttioCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: RecordsDeleteMutationVariables,
  ) => Promise<RecordsDeleteMutationData>;
} {
  return {
    mutationKey: mutationKeyRecordsDelete(),
    mutationFn: function recordsDeleteMutationFn({
      request,
      options,
    }): Promise<RecordsDeleteMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(recordsDelete(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
