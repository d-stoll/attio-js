/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { commentsDeleteV2CommentsCommentId } from "../funcs/commentsDeleteV2CommentsCommentId.js";
import { commentsGetV2CommentsCommentId } from "../funcs/commentsGetV2CommentsCommentId.js";
import { commentsPostV2Comments } from "../funcs/commentsPostV2Comments.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Comments extends ClientSDK {
  /**
   * Create a comment
   *
   * @remarks
   * Creates a new comment related to an existing thread, record or entry.
   *
   * To create comments on records, you will need the `object_configuration:read` and `record_permission:read` scopes.
   *
   * To create comments on list entries, you will need the `list_configuration:read` and `list_entry:read` scopes.
   *
   * Required scopes: `comment:read-write`.
   */
  async postV2Comments(
    request: operations.PostV2CommentsRequestBody,
    options?: RequestOptions,
  ): Promise<operations.PostV2CommentsResponseBody> {
    return unwrapAsync(commentsPostV2Comments(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a comment
   *
   * @remarks
   * Get a single comment by ID.
   *
   * To view comments on records, you will need the `object_configuration:read` and `record_permission:read` scopes.
   *
   * To view comments on list entries, you will need the `list_configuration:read` and `list_entry:read` scopes.
   *
   * Required scopes: `comment:read`.
   */
  async getV2CommentsCommentId(
    request: operations.GetV2CommentsCommentIdRequest,
    options?: RequestOptions,
  ): Promise<operations.GetV2CommentsCommentIdResponseBody> {
    return unwrapAsync(commentsGetV2CommentsCommentId(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a comment
   *
   * @remarks
   * Deletes a comment by ID. If deleting a comment at the head of a thread, all messages in the thread are also deleted.
   *
   * Required scopes: `comment:read-write`.
   */
  async deleteV2CommentsCommentId(
    request: operations.DeleteV2CommentsCommentIdRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteV2CommentsCommentIdResponseBody> {
    return unwrapAsync(commentsDeleteV2CommentsCommentId(
      this,
      request,
      options,
    ));
  }
}
