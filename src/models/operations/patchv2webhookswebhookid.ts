/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Type of event the webhook is subscribed to.
 */
export const PatchV2WebhooksWebhookIdEventType = {
  CommentCreated: "comment.created",
  CommentResolved: "comment.resolved",
  CommentUnresolved: "comment.unresolved",
  CommentDeleted: "comment.deleted",
  ListCreated: "list.created",
  ListUpdated: "list.updated",
  ListDeleted: "list.deleted",
  ListAttributeCreated: "list-attribute.created",
  ListAttributeUpdated: "list-attribute.updated",
  ListEntryCreated: "list-entry.created",
  ListEntryUpdated: "list-entry.updated",
  ListEntryDeleted: "list-entry.deleted",
  ObjectAttributeCreated: "object-attribute.created",
  ObjectAttributeUpdated: "object-attribute.updated",
  NoteCreated: "note.created",
  NoteUpdated: "note.updated",
  NoteDeleted: "note.deleted",
  RecordCreated: "record.created",
  RecordMerged: "record.merged",
  RecordUpdated: "record.updated",
  RecordDeleted: "record.deleted",
  TaskCreated: "task.created",
  TaskUpdated: "task.updated",
  TaskDeleted: "task.deleted",
  WorkspaceMemberCreated: "workspace-member.created",
} as const;
/**
 * Type of event the webhook is subscribed to.
 */
export type PatchV2WebhooksWebhookIdEventType = ClosedEnum<
  typeof PatchV2WebhooksWebhookIdEventType
>;

export const PatchV2WebhooksWebhookIdDollarAndWebhooksOperator = {
  NotEquals: "not_equals",
} as const;
export type PatchV2WebhooksWebhookIdDollarAndWebhooksOperator = ClosedEnum<
  typeof PatchV2WebhooksWebhookIdDollarAndWebhooksOperator
>;

export type PatchV2WebhooksWebhookIdDollarAnd2 = {
  field: string;
  operator: PatchV2WebhooksWebhookIdDollarAndWebhooksOperator;
  value: string;
};

export const PatchV2WebhooksWebhookIdDollarAndOperator = {
  Equals: "equals",
} as const;
export type PatchV2WebhooksWebhookIdDollarAndOperator = ClosedEnum<
  typeof PatchV2WebhooksWebhookIdDollarAndOperator
>;

export type PatchV2WebhooksWebhookIdDollarAnd1 = {
  field: string;
  operator: PatchV2WebhooksWebhookIdDollarAndOperator;
  value: string;
};

export type FilterDollarAnd =
  | PatchV2WebhooksWebhookIdDollarAnd1
  | PatchV2WebhooksWebhookIdDollarAnd2;

export type PatchV2WebhooksWebhookIdFilter2 = {
  dollarAnd: Array<
    PatchV2WebhooksWebhookIdDollarAnd1 | PatchV2WebhooksWebhookIdDollarAnd2
  >;
};

export const PatchV2WebhooksWebhookIdDollarOrWebhooksOperator = {
  NotEquals: "not_equals",
} as const;
export type PatchV2WebhooksWebhookIdDollarOrWebhooksOperator = ClosedEnum<
  typeof PatchV2WebhooksWebhookIdDollarOrWebhooksOperator
>;

export type PatchV2WebhooksWebhookIdDollarOr2 = {
  field: string;
  operator: PatchV2WebhooksWebhookIdDollarOrWebhooksOperator;
  value: string;
};

export const PatchV2WebhooksWebhookIdDollarOrOperator = {
  Equals: "equals",
} as const;
export type PatchV2WebhooksWebhookIdDollarOrOperator = ClosedEnum<
  typeof PatchV2WebhooksWebhookIdDollarOrOperator
>;

export type PatchV2WebhooksWebhookIdDollarOr1 = {
  field: string;
  operator: PatchV2WebhooksWebhookIdDollarOrOperator;
  value: string;
};

export type FilterDollarOr =
  | PatchV2WebhooksWebhookIdDollarOr1
  | PatchV2WebhooksWebhookIdDollarOr2;

export type PatchV2WebhooksWebhookIdFilter1 = {
  dollarOr: Array<
    PatchV2WebhooksWebhookIdDollarOr1 | PatchV2WebhooksWebhookIdDollarOr2
  >;
};

/**
 * Filters to determine whether the webhook event should be sent. If null, the filter always passes.
 */
export type PatchV2WebhooksWebhookIdFilter =
  | PatchV2WebhooksWebhookIdFilter1
  | PatchV2WebhooksWebhookIdFilter2;

export type PatchV2WebhooksWebhookIdSubscriptions = {
  /**
   * Type of event the webhook is subscribed to.
   */
  eventType: PatchV2WebhooksWebhookIdEventType;
  /**
   * Filters to determine whether the webhook event should be sent. If null, the filter always passes.
   */
  filter:
    | PatchV2WebhooksWebhookIdFilter1
    | PatchV2WebhooksWebhookIdFilter2
    | null;
};

export type PatchV2WebhooksWebhookIdData = {
  /**
   * URL where the webhook events will be delivered to.
   */
  targetUrl?: string | undefined;
  /**
   * One or more events the webhook is subscribed to.
   */
  subscriptions?: Array<PatchV2WebhooksWebhookIdSubscriptions> | undefined;
};

export type PatchV2WebhooksWebhookIdRequestBody = {
  data: PatchV2WebhooksWebhookIdData;
};

export type PatchV2WebhooksWebhookIdRequest = {
  webhookId: string;
  requestBody: PatchV2WebhooksWebhookIdRequestBody;
};

/**
 * Type of event the webhook is subscribed to.
 */
export const PatchV2WebhooksWebhookIdWebhooksEventType = {
  CommentCreated: "comment.created",
  CommentResolved: "comment.resolved",
  CommentUnresolved: "comment.unresolved",
  CommentDeleted: "comment.deleted",
  ListCreated: "list.created",
  ListUpdated: "list.updated",
  ListDeleted: "list.deleted",
  ListAttributeCreated: "list-attribute.created",
  ListAttributeUpdated: "list-attribute.updated",
  ListEntryCreated: "list-entry.created",
  ListEntryUpdated: "list-entry.updated",
  ListEntryDeleted: "list-entry.deleted",
  ObjectAttributeCreated: "object-attribute.created",
  ObjectAttributeUpdated: "object-attribute.updated",
  NoteCreated: "note.created",
  NoteUpdated: "note.updated",
  NoteDeleted: "note.deleted",
  RecordCreated: "record.created",
  RecordMerged: "record.merged",
  RecordUpdated: "record.updated",
  RecordDeleted: "record.deleted",
  TaskCreated: "task.created",
  TaskUpdated: "task.updated",
  TaskDeleted: "task.deleted",
  WorkspaceMemberCreated: "workspace-member.created",
} as const;
/**
 * Type of event the webhook is subscribed to.
 */
export type PatchV2WebhooksWebhookIdWebhooksEventType = ClosedEnum<
  typeof PatchV2WebhooksWebhookIdWebhooksEventType
>;

export const PatchV2WebhooksWebhookIdDollarAndWebhooksResponse200Operator = {
  NotEquals: "not_equals",
} as const;
export type PatchV2WebhooksWebhookIdDollarAndWebhooksResponse200Operator =
  ClosedEnum<
    typeof PatchV2WebhooksWebhookIdDollarAndWebhooksResponse200Operator
  >;

export type PatchV2WebhooksWebhookIdDollarAndWebhooks2 = {
  field: string;
  operator: PatchV2WebhooksWebhookIdDollarAndWebhooksResponse200Operator;
  value: string;
};

export const PatchV2WebhooksWebhookIdDollarAndWebhooksResponseOperator = {
  Equals: "equals",
} as const;
export type PatchV2WebhooksWebhookIdDollarAndWebhooksResponseOperator =
  ClosedEnum<typeof PatchV2WebhooksWebhookIdDollarAndWebhooksResponseOperator>;

export type PatchV2WebhooksWebhookIdDollarAndWebhooks1 = {
  field: string;
  operator: PatchV2WebhooksWebhookIdDollarAndWebhooksResponseOperator;
  value: string;
};

export type PatchV2WebhooksWebhookIdFilterDollarAnd =
  | PatchV2WebhooksWebhookIdDollarAndWebhooks1
  | PatchV2WebhooksWebhookIdDollarAndWebhooks2;

export type PatchV2WebhooksWebhookIdFilterWebhooks2 = {
  dollarAnd: Array<
    | PatchV2WebhooksWebhookIdDollarAndWebhooks1
    | PatchV2WebhooksWebhookIdDollarAndWebhooks2
  >;
};

export const PatchV2WebhooksWebhookIdDollarOrWebhooksResponse200Operator = {
  NotEquals: "not_equals",
} as const;
export type PatchV2WebhooksWebhookIdDollarOrWebhooksResponse200Operator =
  ClosedEnum<
    typeof PatchV2WebhooksWebhookIdDollarOrWebhooksResponse200Operator
  >;

export type PatchV2WebhooksWebhookIdDollarOrWebhooks2 = {
  field: string;
  operator: PatchV2WebhooksWebhookIdDollarOrWebhooksResponse200Operator;
  value: string;
};

export const PatchV2WebhooksWebhookIdDollarOrWebhooksResponseOperator = {
  Equals: "equals",
} as const;
export type PatchV2WebhooksWebhookIdDollarOrWebhooksResponseOperator =
  ClosedEnum<typeof PatchV2WebhooksWebhookIdDollarOrWebhooksResponseOperator>;

export type PatchV2WebhooksWebhookIdDollarOrWebhooks1 = {
  field: string;
  operator: PatchV2WebhooksWebhookIdDollarOrWebhooksResponseOperator;
  value: string;
};

export type PatchV2WebhooksWebhookIdFilterDollarOr =
  | PatchV2WebhooksWebhookIdDollarOrWebhooks1
  | PatchV2WebhooksWebhookIdDollarOrWebhooks2;

export type PatchV2WebhooksWebhookIdFilterWebhooks1 = {
  dollarOr: Array<
    | PatchV2WebhooksWebhookIdDollarOrWebhooks1
    | PatchV2WebhooksWebhookIdDollarOrWebhooks2
  >;
};

/**
 * Filters to determine whether the webhook event should be sent. If null, the filter always passes.
 */
export type PatchV2WebhooksWebhookIdWebhooksFilter =
  | PatchV2WebhooksWebhookIdFilterWebhooks1
  | PatchV2WebhooksWebhookIdFilterWebhooks2;

export type PatchV2WebhooksWebhookIdWebhooksSubscriptions = {
  /**
   * Type of event the webhook is subscribed to.
   */
  eventType: PatchV2WebhooksWebhookIdWebhooksEventType;
  /**
   * Filters to determine whether the webhook event should be sent. If null, the filter always passes.
   */
  filter:
    | PatchV2WebhooksWebhookIdFilterWebhooks1
    | PatchV2WebhooksWebhookIdFilterWebhooks2
    | null;
};

export type PatchV2WebhooksWebhookIdId = {
  /**
   * The ID of the workspace the webhook belongs to.
   */
  workspaceId: string;
  /**
   * The ID of the webhook.
   */
  webhookId: string;
};

/**
 * The state of the webhook. Webhooks marked as active and degraded will receive events, inactive ones will not. If a webhook remains in the degraded state for 7 days, it will be marked inactive.
 */
export const PatchV2WebhooksWebhookIdStatus = {
  Active: "active",
  Degraded: "degraded",
  Inactive: "inactive",
} as const;
/**
 * The state of the webhook. Webhooks marked as active and degraded will receive events, inactive ones will not. If a webhook remains in the degraded state for 7 days, it will be marked inactive.
 */
export type PatchV2WebhooksWebhookIdStatus = ClosedEnum<
  typeof PatchV2WebhooksWebhookIdStatus
>;

export type PatchV2WebhooksWebhookIdWebhooksData = {
  /**
   * URL where the webhook events will be delivered to.
   */
  targetUrl: string;
  /**
   * One or more events the webhook is subscribed to.
   */
  subscriptions: Array<PatchV2WebhooksWebhookIdWebhooksSubscriptions>;
  id: PatchV2WebhooksWebhookIdId;
  /**
   * The state of the webhook. Webhooks marked as active and degraded will receive events, inactive ones will not. If a webhook remains in the degraded state for 7 days, it will be marked inactive.
   */
  status: PatchV2WebhooksWebhookIdStatus;
  /**
   * When the webhook was created.
   */
  createdAt: string;
};

/**
 * Success
 */
export type PatchV2WebhooksWebhookIdResponseBody = {
  data: PatchV2WebhooksWebhookIdWebhooksData;
};

/** @internal */
export const PatchV2WebhooksWebhookIdEventType$inboundSchema: z.ZodNativeEnum<
  typeof PatchV2WebhooksWebhookIdEventType
> = z.nativeEnum(PatchV2WebhooksWebhookIdEventType);

/** @internal */
export const PatchV2WebhooksWebhookIdEventType$outboundSchema: z.ZodNativeEnum<
  typeof PatchV2WebhooksWebhookIdEventType
> = PatchV2WebhooksWebhookIdEventType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2WebhooksWebhookIdEventType$ {
  /** @deprecated use `PatchV2WebhooksWebhookIdEventType$inboundSchema` instead. */
  export const inboundSchema = PatchV2WebhooksWebhookIdEventType$inboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdEventType$outboundSchema` instead. */
  export const outboundSchema =
    PatchV2WebhooksWebhookIdEventType$outboundSchema;
}

/** @internal */
export const PatchV2WebhooksWebhookIdDollarAndWebhooksOperator$inboundSchema:
  z.ZodNativeEnum<typeof PatchV2WebhooksWebhookIdDollarAndWebhooksOperator> = z
    .nativeEnum(PatchV2WebhooksWebhookIdDollarAndWebhooksOperator);

/** @internal */
export const PatchV2WebhooksWebhookIdDollarAndWebhooksOperator$outboundSchema:
  z.ZodNativeEnum<typeof PatchV2WebhooksWebhookIdDollarAndWebhooksOperator> =
    PatchV2WebhooksWebhookIdDollarAndWebhooksOperator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2WebhooksWebhookIdDollarAndWebhooksOperator$ {
  /** @deprecated use `PatchV2WebhooksWebhookIdDollarAndWebhooksOperator$inboundSchema` instead. */
  export const inboundSchema =
    PatchV2WebhooksWebhookIdDollarAndWebhooksOperator$inboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdDollarAndWebhooksOperator$outboundSchema` instead. */
  export const outboundSchema =
    PatchV2WebhooksWebhookIdDollarAndWebhooksOperator$outboundSchema;
}

/** @internal */
export const PatchV2WebhooksWebhookIdDollarAnd2$inboundSchema: z.ZodType<
  PatchV2WebhooksWebhookIdDollarAnd2,
  z.ZodTypeDef,
  unknown
> = z.object({
  field: z.string(),
  operator: PatchV2WebhooksWebhookIdDollarAndWebhooksOperator$inboundSchema,
  value: z.string(),
});

/** @internal */
export type PatchV2WebhooksWebhookIdDollarAnd2$Outbound = {
  field: string;
  operator: string;
  value: string;
};

/** @internal */
export const PatchV2WebhooksWebhookIdDollarAnd2$outboundSchema: z.ZodType<
  PatchV2WebhooksWebhookIdDollarAnd2$Outbound,
  z.ZodTypeDef,
  PatchV2WebhooksWebhookIdDollarAnd2
> = z.object({
  field: z.string(),
  operator: PatchV2WebhooksWebhookIdDollarAndWebhooksOperator$outboundSchema,
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2WebhooksWebhookIdDollarAnd2$ {
  /** @deprecated use `PatchV2WebhooksWebhookIdDollarAnd2$inboundSchema` instead. */
  export const inboundSchema = PatchV2WebhooksWebhookIdDollarAnd2$inboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdDollarAnd2$outboundSchema` instead. */
  export const outboundSchema =
    PatchV2WebhooksWebhookIdDollarAnd2$outboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdDollarAnd2$Outbound` instead. */
  export type Outbound = PatchV2WebhooksWebhookIdDollarAnd2$Outbound;
}

export function patchV2WebhooksWebhookIdDollarAnd2ToJSON(
  patchV2WebhooksWebhookIdDollarAnd2: PatchV2WebhooksWebhookIdDollarAnd2,
): string {
  return JSON.stringify(
    PatchV2WebhooksWebhookIdDollarAnd2$outboundSchema.parse(
      patchV2WebhooksWebhookIdDollarAnd2,
    ),
  );
}

export function patchV2WebhooksWebhookIdDollarAnd2FromJSON(
  jsonString: string,
): SafeParseResult<PatchV2WebhooksWebhookIdDollarAnd2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PatchV2WebhooksWebhookIdDollarAnd2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV2WebhooksWebhookIdDollarAnd2' from JSON`,
  );
}

/** @internal */
export const PatchV2WebhooksWebhookIdDollarAndOperator$inboundSchema:
  z.ZodNativeEnum<typeof PatchV2WebhooksWebhookIdDollarAndOperator> = z
    .nativeEnum(PatchV2WebhooksWebhookIdDollarAndOperator);

/** @internal */
export const PatchV2WebhooksWebhookIdDollarAndOperator$outboundSchema:
  z.ZodNativeEnum<typeof PatchV2WebhooksWebhookIdDollarAndOperator> =
    PatchV2WebhooksWebhookIdDollarAndOperator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2WebhooksWebhookIdDollarAndOperator$ {
  /** @deprecated use `PatchV2WebhooksWebhookIdDollarAndOperator$inboundSchema` instead. */
  export const inboundSchema =
    PatchV2WebhooksWebhookIdDollarAndOperator$inboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdDollarAndOperator$outboundSchema` instead. */
  export const outboundSchema =
    PatchV2WebhooksWebhookIdDollarAndOperator$outboundSchema;
}

/** @internal */
export const PatchV2WebhooksWebhookIdDollarAnd1$inboundSchema: z.ZodType<
  PatchV2WebhooksWebhookIdDollarAnd1,
  z.ZodTypeDef,
  unknown
> = z.object({
  field: z.string(),
  operator: PatchV2WebhooksWebhookIdDollarAndOperator$inboundSchema,
  value: z.string(),
});

/** @internal */
export type PatchV2WebhooksWebhookIdDollarAnd1$Outbound = {
  field: string;
  operator: string;
  value: string;
};

/** @internal */
export const PatchV2WebhooksWebhookIdDollarAnd1$outboundSchema: z.ZodType<
  PatchV2WebhooksWebhookIdDollarAnd1$Outbound,
  z.ZodTypeDef,
  PatchV2WebhooksWebhookIdDollarAnd1
> = z.object({
  field: z.string(),
  operator: PatchV2WebhooksWebhookIdDollarAndOperator$outboundSchema,
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2WebhooksWebhookIdDollarAnd1$ {
  /** @deprecated use `PatchV2WebhooksWebhookIdDollarAnd1$inboundSchema` instead. */
  export const inboundSchema = PatchV2WebhooksWebhookIdDollarAnd1$inboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdDollarAnd1$outboundSchema` instead. */
  export const outboundSchema =
    PatchV2WebhooksWebhookIdDollarAnd1$outboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdDollarAnd1$Outbound` instead. */
  export type Outbound = PatchV2WebhooksWebhookIdDollarAnd1$Outbound;
}

export function patchV2WebhooksWebhookIdDollarAnd1ToJSON(
  patchV2WebhooksWebhookIdDollarAnd1: PatchV2WebhooksWebhookIdDollarAnd1,
): string {
  return JSON.stringify(
    PatchV2WebhooksWebhookIdDollarAnd1$outboundSchema.parse(
      patchV2WebhooksWebhookIdDollarAnd1,
    ),
  );
}

export function patchV2WebhooksWebhookIdDollarAnd1FromJSON(
  jsonString: string,
): SafeParseResult<PatchV2WebhooksWebhookIdDollarAnd1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PatchV2WebhooksWebhookIdDollarAnd1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV2WebhooksWebhookIdDollarAnd1' from JSON`,
  );
}

/** @internal */
export const FilterDollarAnd$inboundSchema: z.ZodType<
  FilterDollarAnd,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => PatchV2WebhooksWebhookIdDollarAnd1$inboundSchema),
  z.lazy(() => PatchV2WebhooksWebhookIdDollarAnd2$inboundSchema),
]);

/** @internal */
export type FilterDollarAnd$Outbound =
  | PatchV2WebhooksWebhookIdDollarAnd1$Outbound
  | PatchV2WebhooksWebhookIdDollarAnd2$Outbound;

/** @internal */
export const FilterDollarAnd$outboundSchema: z.ZodType<
  FilterDollarAnd$Outbound,
  z.ZodTypeDef,
  FilterDollarAnd
> = z.union([
  z.lazy(() => PatchV2WebhooksWebhookIdDollarAnd1$outboundSchema),
  z.lazy(() => PatchV2WebhooksWebhookIdDollarAnd2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterDollarAnd$ {
  /** @deprecated use `FilterDollarAnd$inboundSchema` instead. */
  export const inboundSchema = FilterDollarAnd$inboundSchema;
  /** @deprecated use `FilterDollarAnd$outboundSchema` instead. */
  export const outboundSchema = FilterDollarAnd$outboundSchema;
  /** @deprecated use `FilterDollarAnd$Outbound` instead. */
  export type Outbound = FilterDollarAnd$Outbound;
}

export function filterDollarAndToJSON(
  filterDollarAnd: FilterDollarAnd,
): string {
  return JSON.stringify(FilterDollarAnd$outboundSchema.parse(filterDollarAnd));
}

export function filterDollarAndFromJSON(
  jsonString: string,
): SafeParseResult<FilterDollarAnd, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FilterDollarAnd$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FilterDollarAnd' from JSON`,
  );
}

/** @internal */
export const PatchV2WebhooksWebhookIdFilter2$inboundSchema: z.ZodType<
  PatchV2WebhooksWebhookIdFilter2,
  z.ZodTypeDef,
  unknown
> = z.object({
  $and: z.array(
    z.union([
      z.lazy(() => PatchV2WebhooksWebhookIdDollarAnd1$inboundSchema),
      z.lazy(() => PatchV2WebhooksWebhookIdDollarAnd2$inboundSchema),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    "$and": "dollarAnd",
  });
});

/** @internal */
export type PatchV2WebhooksWebhookIdFilter2$Outbound = {
  $and: Array<
    | PatchV2WebhooksWebhookIdDollarAnd1$Outbound
    | PatchV2WebhooksWebhookIdDollarAnd2$Outbound
  >;
};

/** @internal */
export const PatchV2WebhooksWebhookIdFilter2$outboundSchema: z.ZodType<
  PatchV2WebhooksWebhookIdFilter2$Outbound,
  z.ZodTypeDef,
  PatchV2WebhooksWebhookIdFilter2
> = z.object({
  dollarAnd: z.array(
    z.union([
      z.lazy(() => PatchV2WebhooksWebhookIdDollarAnd1$outboundSchema),
      z.lazy(() => PatchV2WebhooksWebhookIdDollarAnd2$outboundSchema),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    dollarAnd: "$and",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2WebhooksWebhookIdFilter2$ {
  /** @deprecated use `PatchV2WebhooksWebhookIdFilter2$inboundSchema` instead. */
  export const inboundSchema = PatchV2WebhooksWebhookIdFilter2$inboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdFilter2$outboundSchema` instead. */
  export const outboundSchema = PatchV2WebhooksWebhookIdFilter2$outboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdFilter2$Outbound` instead. */
  export type Outbound = PatchV2WebhooksWebhookIdFilter2$Outbound;
}

export function patchV2WebhooksWebhookIdFilter2ToJSON(
  patchV2WebhooksWebhookIdFilter2: PatchV2WebhooksWebhookIdFilter2,
): string {
  return JSON.stringify(
    PatchV2WebhooksWebhookIdFilter2$outboundSchema.parse(
      patchV2WebhooksWebhookIdFilter2,
    ),
  );
}

export function patchV2WebhooksWebhookIdFilter2FromJSON(
  jsonString: string,
): SafeParseResult<PatchV2WebhooksWebhookIdFilter2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV2WebhooksWebhookIdFilter2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV2WebhooksWebhookIdFilter2' from JSON`,
  );
}

/** @internal */
export const PatchV2WebhooksWebhookIdDollarOrWebhooksOperator$inboundSchema:
  z.ZodNativeEnum<typeof PatchV2WebhooksWebhookIdDollarOrWebhooksOperator> = z
    .nativeEnum(PatchV2WebhooksWebhookIdDollarOrWebhooksOperator);

/** @internal */
export const PatchV2WebhooksWebhookIdDollarOrWebhooksOperator$outboundSchema:
  z.ZodNativeEnum<typeof PatchV2WebhooksWebhookIdDollarOrWebhooksOperator> =
    PatchV2WebhooksWebhookIdDollarOrWebhooksOperator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2WebhooksWebhookIdDollarOrWebhooksOperator$ {
  /** @deprecated use `PatchV2WebhooksWebhookIdDollarOrWebhooksOperator$inboundSchema` instead. */
  export const inboundSchema =
    PatchV2WebhooksWebhookIdDollarOrWebhooksOperator$inboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdDollarOrWebhooksOperator$outboundSchema` instead. */
  export const outboundSchema =
    PatchV2WebhooksWebhookIdDollarOrWebhooksOperator$outboundSchema;
}

/** @internal */
export const PatchV2WebhooksWebhookIdDollarOr2$inboundSchema: z.ZodType<
  PatchV2WebhooksWebhookIdDollarOr2,
  z.ZodTypeDef,
  unknown
> = z.object({
  field: z.string(),
  operator: PatchV2WebhooksWebhookIdDollarOrWebhooksOperator$inboundSchema,
  value: z.string(),
});

/** @internal */
export type PatchV2WebhooksWebhookIdDollarOr2$Outbound = {
  field: string;
  operator: string;
  value: string;
};

/** @internal */
export const PatchV2WebhooksWebhookIdDollarOr2$outboundSchema: z.ZodType<
  PatchV2WebhooksWebhookIdDollarOr2$Outbound,
  z.ZodTypeDef,
  PatchV2WebhooksWebhookIdDollarOr2
> = z.object({
  field: z.string(),
  operator: PatchV2WebhooksWebhookIdDollarOrWebhooksOperator$outboundSchema,
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2WebhooksWebhookIdDollarOr2$ {
  /** @deprecated use `PatchV2WebhooksWebhookIdDollarOr2$inboundSchema` instead. */
  export const inboundSchema = PatchV2WebhooksWebhookIdDollarOr2$inboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdDollarOr2$outboundSchema` instead. */
  export const outboundSchema =
    PatchV2WebhooksWebhookIdDollarOr2$outboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdDollarOr2$Outbound` instead. */
  export type Outbound = PatchV2WebhooksWebhookIdDollarOr2$Outbound;
}

export function patchV2WebhooksWebhookIdDollarOr2ToJSON(
  patchV2WebhooksWebhookIdDollarOr2: PatchV2WebhooksWebhookIdDollarOr2,
): string {
  return JSON.stringify(
    PatchV2WebhooksWebhookIdDollarOr2$outboundSchema.parse(
      patchV2WebhooksWebhookIdDollarOr2,
    ),
  );
}

export function patchV2WebhooksWebhookIdDollarOr2FromJSON(
  jsonString: string,
): SafeParseResult<PatchV2WebhooksWebhookIdDollarOr2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV2WebhooksWebhookIdDollarOr2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV2WebhooksWebhookIdDollarOr2' from JSON`,
  );
}

/** @internal */
export const PatchV2WebhooksWebhookIdDollarOrOperator$inboundSchema:
  z.ZodNativeEnum<typeof PatchV2WebhooksWebhookIdDollarOrOperator> = z
    .nativeEnum(PatchV2WebhooksWebhookIdDollarOrOperator);

/** @internal */
export const PatchV2WebhooksWebhookIdDollarOrOperator$outboundSchema:
  z.ZodNativeEnum<typeof PatchV2WebhooksWebhookIdDollarOrOperator> =
    PatchV2WebhooksWebhookIdDollarOrOperator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2WebhooksWebhookIdDollarOrOperator$ {
  /** @deprecated use `PatchV2WebhooksWebhookIdDollarOrOperator$inboundSchema` instead. */
  export const inboundSchema =
    PatchV2WebhooksWebhookIdDollarOrOperator$inboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdDollarOrOperator$outboundSchema` instead. */
  export const outboundSchema =
    PatchV2WebhooksWebhookIdDollarOrOperator$outboundSchema;
}

/** @internal */
export const PatchV2WebhooksWebhookIdDollarOr1$inboundSchema: z.ZodType<
  PatchV2WebhooksWebhookIdDollarOr1,
  z.ZodTypeDef,
  unknown
> = z.object({
  field: z.string(),
  operator: PatchV2WebhooksWebhookIdDollarOrOperator$inboundSchema,
  value: z.string(),
});

/** @internal */
export type PatchV2WebhooksWebhookIdDollarOr1$Outbound = {
  field: string;
  operator: string;
  value: string;
};

/** @internal */
export const PatchV2WebhooksWebhookIdDollarOr1$outboundSchema: z.ZodType<
  PatchV2WebhooksWebhookIdDollarOr1$Outbound,
  z.ZodTypeDef,
  PatchV2WebhooksWebhookIdDollarOr1
> = z.object({
  field: z.string(),
  operator: PatchV2WebhooksWebhookIdDollarOrOperator$outboundSchema,
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2WebhooksWebhookIdDollarOr1$ {
  /** @deprecated use `PatchV2WebhooksWebhookIdDollarOr1$inboundSchema` instead. */
  export const inboundSchema = PatchV2WebhooksWebhookIdDollarOr1$inboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdDollarOr1$outboundSchema` instead. */
  export const outboundSchema =
    PatchV2WebhooksWebhookIdDollarOr1$outboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdDollarOr1$Outbound` instead. */
  export type Outbound = PatchV2WebhooksWebhookIdDollarOr1$Outbound;
}

export function patchV2WebhooksWebhookIdDollarOr1ToJSON(
  patchV2WebhooksWebhookIdDollarOr1: PatchV2WebhooksWebhookIdDollarOr1,
): string {
  return JSON.stringify(
    PatchV2WebhooksWebhookIdDollarOr1$outboundSchema.parse(
      patchV2WebhooksWebhookIdDollarOr1,
    ),
  );
}

export function patchV2WebhooksWebhookIdDollarOr1FromJSON(
  jsonString: string,
): SafeParseResult<PatchV2WebhooksWebhookIdDollarOr1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV2WebhooksWebhookIdDollarOr1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV2WebhooksWebhookIdDollarOr1' from JSON`,
  );
}

/** @internal */
export const FilterDollarOr$inboundSchema: z.ZodType<
  FilterDollarOr,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => PatchV2WebhooksWebhookIdDollarOr1$inboundSchema),
  z.lazy(() => PatchV2WebhooksWebhookIdDollarOr2$inboundSchema),
]);

/** @internal */
export type FilterDollarOr$Outbound =
  | PatchV2WebhooksWebhookIdDollarOr1$Outbound
  | PatchV2WebhooksWebhookIdDollarOr2$Outbound;

/** @internal */
export const FilterDollarOr$outboundSchema: z.ZodType<
  FilterDollarOr$Outbound,
  z.ZodTypeDef,
  FilterDollarOr
> = z.union([
  z.lazy(() => PatchV2WebhooksWebhookIdDollarOr1$outboundSchema),
  z.lazy(() => PatchV2WebhooksWebhookIdDollarOr2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterDollarOr$ {
  /** @deprecated use `FilterDollarOr$inboundSchema` instead. */
  export const inboundSchema = FilterDollarOr$inboundSchema;
  /** @deprecated use `FilterDollarOr$outboundSchema` instead. */
  export const outboundSchema = FilterDollarOr$outboundSchema;
  /** @deprecated use `FilterDollarOr$Outbound` instead. */
  export type Outbound = FilterDollarOr$Outbound;
}

export function filterDollarOrToJSON(filterDollarOr: FilterDollarOr): string {
  return JSON.stringify(FilterDollarOr$outboundSchema.parse(filterDollarOr));
}

export function filterDollarOrFromJSON(
  jsonString: string,
): SafeParseResult<FilterDollarOr, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FilterDollarOr$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FilterDollarOr' from JSON`,
  );
}

/** @internal */
export const PatchV2WebhooksWebhookIdFilter1$inboundSchema: z.ZodType<
  PatchV2WebhooksWebhookIdFilter1,
  z.ZodTypeDef,
  unknown
> = z.object({
  $or: z.array(
    z.union([
      z.lazy(() => PatchV2WebhooksWebhookIdDollarOr1$inboundSchema),
      z.lazy(() => PatchV2WebhooksWebhookIdDollarOr2$inboundSchema),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    "$or": "dollarOr",
  });
});

/** @internal */
export type PatchV2WebhooksWebhookIdFilter1$Outbound = {
  $or: Array<
    | PatchV2WebhooksWebhookIdDollarOr1$Outbound
    | PatchV2WebhooksWebhookIdDollarOr2$Outbound
  >;
};

/** @internal */
export const PatchV2WebhooksWebhookIdFilter1$outboundSchema: z.ZodType<
  PatchV2WebhooksWebhookIdFilter1$Outbound,
  z.ZodTypeDef,
  PatchV2WebhooksWebhookIdFilter1
> = z.object({
  dollarOr: z.array(
    z.union([
      z.lazy(() => PatchV2WebhooksWebhookIdDollarOr1$outboundSchema),
      z.lazy(() => PatchV2WebhooksWebhookIdDollarOr2$outboundSchema),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    dollarOr: "$or",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2WebhooksWebhookIdFilter1$ {
  /** @deprecated use `PatchV2WebhooksWebhookIdFilter1$inboundSchema` instead. */
  export const inboundSchema = PatchV2WebhooksWebhookIdFilter1$inboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdFilter1$outboundSchema` instead. */
  export const outboundSchema = PatchV2WebhooksWebhookIdFilter1$outboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdFilter1$Outbound` instead. */
  export type Outbound = PatchV2WebhooksWebhookIdFilter1$Outbound;
}

export function patchV2WebhooksWebhookIdFilter1ToJSON(
  patchV2WebhooksWebhookIdFilter1: PatchV2WebhooksWebhookIdFilter1,
): string {
  return JSON.stringify(
    PatchV2WebhooksWebhookIdFilter1$outboundSchema.parse(
      patchV2WebhooksWebhookIdFilter1,
    ),
  );
}

export function patchV2WebhooksWebhookIdFilter1FromJSON(
  jsonString: string,
): SafeParseResult<PatchV2WebhooksWebhookIdFilter1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV2WebhooksWebhookIdFilter1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV2WebhooksWebhookIdFilter1' from JSON`,
  );
}

/** @internal */
export const PatchV2WebhooksWebhookIdFilter$inboundSchema: z.ZodType<
  PatchV2WebhooksWebhookIdFilter,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => PatchV2WebhooksWebhookIdFilter1$inboundSchema),
  z.lazy(() => PatchV2WebhooksWebhookIdFilter2$inboundSchema),
]);

/** @internal */
export type PatchV2WebhooksWebhookIdFilter$Outbound =
  | PatchV2WebhooksWebhookIdFilter1$Outbound
  | PatchV2WebhooksWebhookIdFilter2$Outbound;

/** @internal */
export const PatchV2WebhooksWebhookIdFilter$outboundSchema: z.ZodType<
  PatchV2WebhooksWebhookIdFilter$Outbound,
  z.ZodTypeDef,
  PatchV2WebhooksWebhookIdFilter
> = z.union([
  z.lazy(() => PatchV2WebhooksWebhookIdFilter1$outboundSchema),
  z.lazy(() => PatchV2WebhooksWebhookIdFilter2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2WebhooksWebhookIdFilter$ {
  /** @deprecated use `PatchV2WebhooksWebhookIdFilter$inboundSchema` instead. */
  export const inboundSchema = PatchV2WebhooksWebhookIdFilter$inboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdFilter$outboundSchema` instead. */
  export const outboundSchema = PatchV2WebhooksWebhookIdFilter$outboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdFilter$Outbound` instead. */
  export type Outbound = PatchV2WebhooksWebhookIdFilter$Outbound;
}

export function patchV2WebhooksWebhookIdFilterToJSON(
  patchV2WebhooksWebhookIdFilter: PatchV2WebhooksWebhookIdFilter,
): string {
  return JSON.stringify(
    PatchV2WebhooksWebhookIdFilter$outboundSchema.parse(
      patchV2WebhooksWebhookIdFilter,
    ),
  );
}

export function patchV2WebhooksWebhookIdFilterFromJSON(
  jsonString: string,
): SafeParseResult<PatchV2WebhooksWebhookIdFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV2WebhooksWebhookIdFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV2WebhooksWebhookIdFilter' from JSON`,
  );
}

/** @internal */
export const PatchV2WebhooksWebhookIdSubscriptions$inboundSchema: z.ZodType<
  PatchV2WebhooksWebhookIdSubscriptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  event_type: PatchV2WebhooksWebhookIdEventType$inboundSchema,
  filter: z.nullable(
    z.union([
      z.lazy(() => PatchV2WebhooksWebhookIdFilter1$inboundSchema),
      z.lazy(() => PatchV2WebhooksWebhookIdFilter2$inboundSchema),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    "event_type": "eventType",
  });
});

/** @internal */
export type PatchV2WebhooksWebhookIdSubscriptions$Outbound = {
  event_type: string;
  filter:
    | PatchV2WebhooksWebhookIdFilter1$Outbound
    | PatchV2WebhooksWebhookIdFilter2$Outbound
    | null;
};

/** @internal */
export const PatchV2WebhooksWebhookIdSubscriptions$outboundSchema: z.ZodType<
  PatchV2WebhooksWebhookIdSubscriptions$Outbound,
  z.ZodTypeDef,
  PatchV2WebhooksWebhookIdSubscriptions
> = z.object({
  eventType: PatchV2WebhooksWebhookIdEventType$outboundSchema,
  filter: z.nullable(
    z.union([
      z.lazy(() => PatchV2WebhooksWebhookIdFilter1$outboundSchema),
      z.lazy(() => PatchV2WebhooksWebhookIdFilter2$outboundSchema),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    eventType: "event_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2WebhooksWebhookIdSubscriptions$ {
  /** @deprecated use `PatchV2WebhooksWebhookIdSubscriptions$inboundSchema` instead. */
  export const inboundSchema =
    PatchV2WebhooksWebhookIdSubscriptions$inboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdSubscriptions$outboundSchema` instead. */
  export const outboundSchema =
    PatchV2WebhooksWebhookIdSubscriptions$outboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdSubscriptions$Outbound` instead. */
  export type Outbound = PatchV2WebhooksWebhookIdSubscriptions$Outbound;
}

export function patchV2WebhooksWebhookIdSubscriptionsToJSON(
  patchV2WebhooksWebhookIdSubscriptions: PatchV2WebhooksWebhookIdSubscriptions,
): string {
  return JSON.stringify(
    PatchV2WebhooksWebhookIdSubscriptions$outboundSchema.parse(
      patchV2WebhooksWebhookIdSubscriptions,
    ),
  );
}

export function patchV2WebhooksWebhookIdSubscriptionsFromJSON(
  jsonString: string,
): SafeParseResult<PatchV2WebhooksWebhookIdSubscriptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PatchV2WebhooksWebhookIdSubscriptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV2WebhooksWebhookIdSubscriptions' from JSON`,
  );
}

/** @internal */
export const PatchV2WebhooksWebhookIdData$inboundSchema: z.ZodType<
  PatchV2WebhooksWebhookIdData,
  z.ZodTypeDef,
  unknown
> = z.object({
  target_url: z.string().optional(),
  subscriptions: z.array(
    z.lazy(() => PatchV2WebhooksWebhookIdSubscriptions$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "target_url": "targetUrl",
  });
});

/** @internal */
export type PatchV2WebhooksWebhookIdData$Outbound = {
  target_url?: string | undefined;
  subscriptions?:
    | Array<PatchV2WebhooksWebhookIdSubscriptions$Outbound>
    | undefined;
};

/** @internal */
export const PatchV2WebhooksWebhookIdData$outboundSchema: z.ZodType<
  PatchV2WebhooksWebhookIdData$Outbound,
  z.ZodTypeDef,
  PatchV2WebhooksWebhookIdData
> = z.object({
  targetUrl: z.string().optional(),
  subscriptions: z.array(
    z.lazy(() => PatchV2WebhooksWebhookIdSubscriptions$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    targetUrl: "target_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2WebhooksWebhookIdData$ {
  /** @deprecated use `PatchV2WebhooksWebhookIdData$inboundSchema` instead. */
  export const inboundSchema = PatchV2WebhooksWebhookIdData$inboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdData$outboundSchema` instead. */
  export const outboundSchema = PatchV2WebhooksWebhookIdData$outboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdData$Outbound` instead. */
  export type Outbound = PatchV2WebhooksWebhookIdData$Outbound;
}

export function patchV2WebhooksWebhookIdDataToJSON(
  patchV2WebhooksWebhookIdData: PatchV2WebhooksWebhookIdData,
): string {
  return JSON.stringify(
    PatchV2WebhooksWebhookIdData$outboundSchema.parse(
      patchV2WebhooksWebhookIdData,
    ),
  );
}

export function patchV2WebhooksWebhookIdDataFromJSON(
  jsonString: string,
): SafeParseResult<PatchV2WebhooksWebhookIdData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV2WebhooksWebhookIdData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV2WebhooksWebhookIdData' from JSON`,
  );
}

/** @internal */
export const PatchV2WebhooksWebhookIdRequestBody$inboundSchema: z.ZodType<
  PatchV2WebhooksWebhookIdRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => PatchV2WebhooksWebhookIdData$inboundSchema),
});

/** @internal */
export type PatchV2WebhooksWebhookIdRequestBody$Outbound = {
  data: PatchV2WebhooksWebhookIdData$Outbound;
};

/** @internal */
export const PatchV2WebhooksWebhookIdRequestBody$outboundSchema: z.ZodType<
  PatchV2WebhooksWebhookIdRequestBody$Outbound,
  z.ZodTypeDef,
  PatchV2WebhooksWebhookIdRequestBody
> = z.object({
  data: z.lazy(() => PatchV2WebhooksWebhookIdData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2WebhooksWebhookIdRequestBody$ {
  /** @deprecated use `PatchV2WebhooksWebhookIdRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PatchV2WebhooksWebhookIdRequestBody$inboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PatchV2WebhooksWebhookIdRequestBody$outboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdRequestBody$Outbound` instead. */
  export type Outbound = PatchV2WebhooksWebhookIdRequestBody$Outbound;
}

export function patchV2WebhooksWebhookIdRequestBodyToJSON(
  patchV2WebhooksWebhookIdRequestBody: PatchV2WebhooksWebhookIdRequestBody,
): string {
  return JSON.stringify(
    PatchV2WebhooksWebhookIdRequestBody$outboundSchema.parse(
      patchV2WebhooksWebhookIdRequestBody,
    ),
  );
}

export function patchV2WebhooksWebhookIdRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PatchV2WebhooksWebhookIdRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PatchV2WebhooksWebhookIdRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV2WebhooksWebhookIdRequestBody' from JSON`,
  );
}

/** @internal */
export const PatchV2WebhooksWebhookIdRequest$inboundSchema: z.ZodType<
  PatchV2WebhooksWebhookIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  webhook_id: z.string(),
  RequestBody: z.lazy(() => PatchV2WebhooksWebhookIdRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "webhook_id": "webhookId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PatchV2WebhooksWebhookIdRequest$Outbound = {
  webhook_id: string;
  RequestBody: PatchV2WebhooksWebhookIdRequestBody$Outbound;
};

/** @internal */
export const PatchV2WebhooksWebhookIdRequest$outboundSchema: z.ZodType<
  PatchV2WebhooksWebhookIdRequest$Outbound,
  z.ZodTypeDef,
  PatchV2WebhooksWebhookIdRequest
> = z.object({
  webhookId: z.string(),
  requestBody: z.lazy(() => PatchV2WebhooksWebhookIdRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    webhookId: "webhook_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2WebhooksWebhookIdRequest$ {
  /** @deprecated use `PatchV2WebhooksWebhookIdRequest$inboundSchema` instead. */
  export const inboundSchema = PatchV2WebhooksWebhookIdRequest$inboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdRequest$outboundSchema` instead. */
  export const outboundSchema = PatchV2WebhooksWebhookIdRequest$outboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdRequest$Outbound` instead. */
  export type Outbound = PatchV2WebhooksWebhookIdRequest$Outbound;
}

export function patchV2WebhooksWebhookIdRequestToJSON(
  patchV2WebhooksWebhookIdRequest: PatchV2WebhooksWebhookIdRequest,
): string {
  return JSON.stringify(
    PatchV2WebhooksWebhookIdRequest$outboundSchema.parse(
      patchV2WebhooksWebhookIdRequest,
    ),
  );
}

export function patchV2WebhooksWebhookIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<PatchV2WebhooksWebhookIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV2WebhooksWebhookIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV2WebhooksWebhookIdRequest' from JSON`,
  );
}

/** @internal */
export const PatchV2WebhooksWebhookIdWebhooksEventType$inboundSchema:
  z.ZodNativeEnum<typeof PatchV2WebhooksWebhookIdWebhooksEventType> = z
    .nativeEnum(PatchV2WebhooksWebhookIdWebhooksEventType);

/** @internal */
export const PatchV2WebhooksWebhookIdWebhooksEventType$outboundSchema:
  z.ZodNativeEnum<typeof PatchV2WebhooksWebhookIdWebhooksEventType> =
    PatchV2WebhooksWebhookIdWebhooksEventType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2WebhooksWebhookIdWebhooksEventType$ {
  /** @deprecated use `PatchV2WebhooksWebhookIdWebhooksEventType$inboundSchema` instead. */
  export const inboundSchema =
    PatchV2WebhooksWebhookIdWebhooksEventType$inboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdWebhooksEventType$outboundSchema` instead. */
  export const outboundSchema =
    PatchV2WebhooksWebhookIdWebhooksEventType$outboundSchema;
}

/** @internal */
export const PatchV2WebhooksWebhookIdDollarAndWebhooksResponse200Operator$inboundSchema:
  z.ZodNativeEnum<
    typeof PatchV2WebhooksWebhookIdDollarAndWebhooksResponse200Operator
  > = z.nativeEnum(
    PatchV2WebhooksWebhookIdDollarAndWebhooksResponse200Operator,
  );

/** @internal */
export const PatchV2WebhooksWebhookIdDollarAndWebhooksResponse200Operator$outboundSchema:
  z.ZodNativeEnum<
    typeof PatchV2WebhooksWebhookIdDollarAndWebhooksResponse200Operator
  > =
    PatchV2WebhooksWebhookIdDollarAndWebhooksResponse200Operator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2WebhooksWebhookIdDollarAndWebhooksResponse200Operator$ {
  /** @deprecated use `PatchV2WebhooksWebhookIdDollarAndWebhooksResponse200Operator$inboundSchema` instead. */
  export const inboundSchema =
    PatchV2WebhooksWebhookIdDollarAndWebhooksResponse200Operator$inboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdDollarAndWebhooksResponse200Operator$outboundSchema` instead. */
  export const outboundSchema =
    PatchV2WebhooksWebhookIdDollarAndWebhooksResponse200Operator$outboundSchema;
}

/** @internal */
export const PatchV2WebhooksWebhookIdDollarAndWebhooks2$inboundSchema:
  z.ZodType<PatchV2WebhooksWebhookIdDollarAndWebhooks2, z.ZodTypeDef, unknown> =
    z.object({
      field: z.string(),
      operator:
        PatchV2WebhooksWebhookIdDollarAndWebhooksResponse200Operator$inboundSchema,
      value: z.string(),
    });

/** @internal */
export type PatchV2WebhooksWebhookIdDollarAndWebhooks2$Outbound = {
  field: string;
  operator: string;
  value: string;
};

/** @internal */
export const PatchV2WebhooksWebhookIdDollarAndWebhooks2$outboundSchema:
  z.ZodType<
    PatchV2WebhooksWebhookIdDollarAndWebhooks2$Outbound,
    z.ZodTypeDef,
    PatchV2WebhooksWebhookIdDollarAndWebhooks2
  > = z.object({
    field: z.string(),
    operator:
      PatchV2WebhooksWebhookIdDollarAndWebhooksResponse200Operator$outboundSchema,
    value: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2WebhooksWebhookIdDollarAndWebhooks2$ {
  /** @deprecated use `PatchV2WebhooksWebhookIdDollarAndWebhooks2$inboundSchema` instead. */
  export const inboundSchema =
    PatchV2WebhooksWebhookIdDollarAndWebhooks2$inboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdDollarAndWebhooks2$outboundSchema` instead. */
  export const outboundSchema =
    PatchV2WebhooksWebhookIdDollarAndWebhooks2$outboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdDollarAndWebhooks2$Outbound` instead. */
  export type Outbound = PatchV2WebhooksWebhookIdDollarAndWebhooks2$Outbound;
}

export function patchV2WebhooksWebhookIdDollarAndWebhooks2ToJSON(
  patchV2WebhooksWebhookIdDollarAndWebhooks2:
    PatchV2WebhooksWebhookIdDollarAndWebhooks2,
): string {
  return JSON.stringify(
    PatchV2WebhooksWebhookIdDollarAndWebhooks2$outboundSchema.parse(
      patchV2WebhooksWebhookIdDollarAndWebhooks2,
    ),
  );
}

export function patchV2WebhooksWebhookIdDollarAndWebhooks2FromJSON(
  jsonString: string,
): SafeParseResult<
  PatchV2WebhooksWebhookIdDollarAndWebhooks2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchV2WebhooksWebhookIdDollarAndWebhooks2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchV2WebhooksWebhookIdDollarAndWebhooks2' from JSON`,
  );
}

/** @internal */
export const PatchV2WebhooksWebhookIdDollarAndWebhooksResponseOperator$inboundSchema:
  z.ZodNativeEnum<
    typeof PatchV2WebhooksWebhookIdDollarAndWebhooksResponseOperator
  > = z.nativeEnum(PatchV2WebhooksWebhookIdDollarAndWebhooksResponseOperator);

/** @internal */
export const PatchV2WebhooksWebhookIdDollarAndWebhooksResponseOperator$outboundSchema:
  z.ZodNativeEnum<
    typeof PatchV2WebhooksWebhookIdDollarAndWebhooksResponseOperator
  > = PatchV2WebhooksWebhookIdDollarAndWebhooksResponseOperator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2WebhooksWebhookIdDollarAndWebhooksResponseOperator$ {
  /** @deprecated use `PatchV2WebhooksWebhookIdDollarAndWebhooksResponseOperator$inboundSchema` instead. */
  export const inboundSchema =
    PatchV2WebhooksWebhookIdDollarAndWebhooksResponseOperator$inboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdDollarAndWebhooksResponseOperator$outboundSchema` instead. */
  export const outboundSchema =
    PatchV2WebhooksWebhookIdDollarAndWebhooksResponseOperator$outboundSchema;
}

/** @internal */
export const PatchV2WebhooksWebhookIdDollarAndWebhooks1$inboundSchema:
  z.ZodType<PatchV2WebhooksWebhookIdDollarAndWebhooks1, z.ZodTypeDef, unknown> =
    z.object({
      field: z.string(),
      operator:
        PatchV2WebhooksWebhookIdDollarAndWebhooksResponseOperator$inboundSchema,
      value: z.string(),
    });

/** @internal */
export type PatchV2WebhooksWebhookIdDollarAndWebhooks1$Outbound = {
  field: string;
  operator: string;
  value: string;
};

/** @internal */
export const PatchV2WebhooksWebhookIdDollarAndWebhooks1$outboundSchema:
  z.ZodType<
    PatchV2WebhooksWebhookIdDollarAndWebhooks1$Outbound,
    z.ZodTypeDef,
    PatchV2WebhooksWebhookIdDollarAndWebhooks1
  > = z.object({
    field: z.string(),
    operator:
      PatchV2WebhooksWebhookIdDollarAndWebhooksResponseOperator$outboundSchema,
    value: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2WebhooksWebhookIdDollarAndWebhooks1$ {
  /** @deprecated use `PatchV2WebhooksWebhookIdDollarAndWebhooks1$inboundSchema` instead. */
  export const inboundSchema =
    PatchV2WebhooksWebhookIdDollarAndWebhooks1$inboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdDollarAndWebhooks1$outboundSchema` instead. */
  export const outboundSchema =
    PatchV2WebhooksWebhookIdDollarAndWebhooks1$outboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdDollarAndWebhooks1$Outbound` instead. */
  export type Outbound = PatchV2WebhooksWebhookIdDollarAndWebhooks1$Outbound;
}

export function patchV2WebhooksWebhookIdDollarAndWebhooks1ToJSON(
  patchV2WebhooksWebhookIdDollarAndWebhooks1:
    PatchV2WebhooksWebhookIdDollarAndWebhooks1,
): string {
  return JSON.stringify(
    PatchV2WebhooksWebhookIdDollarAndWebhooks1$outboundSchema.parse(
      patchV2WebhooksWebhookIdDollarAndWebhooks1,
    ),
  );
}

export function patchV2WebhooksWebhookIdDollarAndWebhooks1FromJSON(
  jsonString: string,
): SafeParseResult<
  PatchV2WebhooksWebhookIdDollarAndWebhooks1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchV2WebhooksWebhookIdDollarAndWebhooks1$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchV2WebhooksWebhookIdDollarAndWebhooks1' from JSON`,
  );
}

/** @internal */
export const PatchV2WebhooksWebhookIdFilterDollarAnd$inboundSchema: z.ZodType<
  PatchV2WebhooksWebhookIdFilterDollarAnd,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => PatchV2WebhooksWebhookIdDollarAndWebhooks1$inboundSchema),
  z.lazy(() => PatchV2WebhooksWebhookIdDollarAndWebhooks2$inboundSchema),
]);

/** @internal */
export type PatchV2WebhooksWebhookIdFilterDollarAnd$Outbound =
  | PatchV2WebhooksWebhookIdDollarAndWebhooks1$Outbound
  | PatchV2WebhooksWebhookIdDollarAndWebhooks2$Outbound;

/** @internal */
export const PatchV2WebhooksWebhookIdFilterDollarAnd$outboundSchema: z.ZodType<
  PatchV2WebhooksWebhookIdFilterDollarAnd$Outbound,
  z.ZodTypeDef,
  PatchV2WebhooksWebhookIdFilterDollarAnd
> = z.union([
  z.lazy(() => PatchV2WebhooksWebhookIdDollarAndWebhooks1$outboundSchema),
  z.lazy(() => PatchV2WebhooksWebhookIdDollarAndWebhooks2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2WebhooksWebhookIdFilterDollarAnd$ {
  /** @deprecated use `PatchV2WebhooksWebhookIdFilterDollarAnd$inboundSchema` instead. */
  export const inboundSchema =
    PatchV2WebhooksWebhookIdFilterDollarAnd$inboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdFilterDollarAnd$outboundSchema` instead. */
  export const outboundSchema =
    PatchV2WebhooksWebhookIdFilterDollarAnd$outboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdFilterDollarAnd$Outbound` instead. */
  export type Outbound = PatchV2WebhooksWebhookIdFilterDollarAnd$Outbound;
}

export function patchV2WebhooksWebhookIdFilterDollarAndToJSON(
  patchV2WebhooksWebhookIdFilterDollarAnd:
    PatchV2WebhooksWebhookIdFilterDollarAnd,
): string {
  return JSON.stringify(
    PatchV2WebhooksWebhookIdFilterDollarAnd$outboundSchema.parse(
      patchV2WebhooksWebhookIdFilterDollarAnd,
    ),
  );
}

export function patchV2WebhooksWebhookIdFilterDollarAndFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchV2WebhooksWebhookIdFilterDollarAnd,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchV2WebhooksWebhookIdFilterDollarAnd$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchV2WebhooksWebhookIdFilterDollarAnd' from JSON`,
  );
}

/** @internal */
export const PatchV2WebhooksWebhookIdFilterWebhooks2$inboundSchema: z.ZodType<
  PatchV2WebhooksWebhookIdFilterWebhooks2,
  z.ZodTypeDef,
  unknown
> = z.object({
  $and: z.array(
    z.union([
      z.lazy(() => PatchV2WebhooksWebhookIdDollarAndWebhooks1$inboundSchema),
      z.lazy(() => PatchV2WebhooksWebhookIdDollarAndWebhooks2$inboundSchema),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    "$and": "dollarAnd",
  });
});

/** @internal */
export type PatchV2WebhooksWebhookIdFilterWebhooks2$Outbound = {
  $and: Array<
    | PatchV2WebhooksWebhookIdDollarAndWebhooks1$Outbound
    | PatchV2WebhooksWebhookIdDollarAndWebhooks2$Outbound
  >;
};

/** @internal */
export const PatchV2WebhooksWebhookIdFilterWebhooks2$outboundSchema: z.ZodType<
  PatchV2WebhooksWebhookIdFilterWebhooks2$Outbound,
  z.ZodTypeDef,
  PatchV2WebhooksWebhookIdFilterWebhooks2
> = z.object({
  dollarAnd: z.array(
    z.union([
      z.lazy(() => PatchV2WebhooksWebhookIdDollarAndWebhooks1$outboundSchema),
      z.lazy(() => PatchV2WebhooksWebhookIdDollarAndWebhooks2$outboundSchema),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    dollarAnd: "$and",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2WebhooksWebhookIdFilterWebhooks2$ {
  /** @deprecated use `PatchV2WebhooksWebhookIdFilterWebhooks2$inboundSchema` instead. */
  export const inboundSchema =
    PatchV2WebhooksWebhookIdFilterWebhooks2$inboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdFilterWebhooks2$outboundSchema` instead. */
  export const outboundSchema =
    PatchV2WebhooksWebhookIdFilterWebhooks2$outboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdFilterWebhooks2$Outbound` instead. */
  export type Outbound = PatchV2WebhooksWebhookIdFilterWebhooks2$Outbound;
}

export function patchV2WebhooksWebhookIdFilterWebhooks2ToJSON(
  patchV2WebhooksWebhookIdFilterWebhooks2:
    PatchV2WebhooksWebhookIdFilterWebhooks2,
): string {
  return JSON.stringify(
    PatchV2WebhooksWebhookIdFilterWebhooks2$outboundSchema.parse(
      patchV2WebhooksWebhookIdFilterWebhooks2,
    ),
  );
}

export function patchV2WebhooksWebhookIdFilterWebhooks2FromJSON(
  jsonString: string,
): SafeParseResult<
  PatchV2WebhooksWebhookIdFilterWebhooks2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchV2WebhooksWebhookIdFilterWebhooks2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchV2WebhooksWebhookIdFilterWebhooks2' from JSON`,
  );
}

/** @internal */
export const PatchV2WebhooksWebhookIdDollarOrWebhooksResponse200Operator$inboundSchema:
  z.ZodNativeEnum<
    typeof PatchV2WebhooksWebhookIdDollarOrWebhooksResponse200Operator
  > = z.nativeEnum(PatchV2WebhooksWebhookIdDollarOrWebhooksResponse200Operator);

/** @internal */
export const PatchV2WebhooksWebhookIdDollarOrWebhooksResponse200Operator$outboundSchema:
  z.ZodNativeEnum<
    typeof PatchV2WebhooksWebhookIdDollarOrWebhooksResponse200Operator
  > = PatchV2WebhooksWebhookIdDollarOrWebhooksResponse200Operator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2WebhooksWebhookIdDollarOrWebhooksResponse200Operator$ {
  /** @deprecated use `PatchV2WebhooksWebhookIdDollarOrWebhooksResponse200Operator$inboundSchema` instead. */
  export const inboundSchema =
    PatchV2WebhooksWebhookIdDollarOrWebhooksResponse200Operator$inboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdDollarOrWebhooksResponse200Operator$outboundSchema` instead. */
  export const outboundSchema =
    PatchV2WebhooksWebhookIdDollarOrWebhooksResponse200Operator$outboundSchema;
}

/** @internal */
export const PatchV2WebhooksWebhookIdDollarOrWebhooks2$inboundSchema: z.ZodType<
  PatchV2WebhooksWebhookIdDollarOrWebhooks2,
  z.ZodTypeDef,
  unknown
> = z.object({
  field: z.string(),
  operator:
    PatchV2WebhooksWebhookIdDollarOrWebhooksResponse200Operator$inboundSchema,
  value: z.string(),
});

/** @internal */
export type PatchV2WebhooksWebhookIdDollarOrWebhooks2$Outbound = {
  field: string;
  operator: string;
  value: string;
};

/** @internal */
export const PatchV2WebhooksWebhookIdDollarOrWebhooks2$outboundSchema:
  z.ZodType<
    PatchV2WebhooksWebhookIdDollarOrWebhooks2$Outbound,
    z.ZodTypeDef,
    PatchV2WebhooksWebhookIdDollarOrWebhooks2
  > = z.object({
    field: z.string(),
    operator:
      PatchV2WebhooksWebhookIdDollarOrWebhooksResponse200Operator$outboundSchema,
    value: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2WebhooksWebhookIdDollarOrWebhooks2$ {
  /** @deprecated use `PatchV2WebhooksWebhookIdDollarOrWebhooks2$inboundSchema` instead. */
  export const inboundSchema =
    PatchV2WebhooksWebhookIdDollarOrWebhooks2$inboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdDollarOrWebhooks2$outboundSchema` instead. */
  export const outboundSchema =
    PatchV2WebhooksWebhookIdDollarOrWebhooks2$outboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdDollarOrWebhooks2$Outbound` instead. */
  export type Outbound = PatchV2WebhooksWebhookIdDollarOrWebhooks2$Outbound;
}

export function patchV2WebhooksWebhookIdDollarOrWebhooks2ToJSON(
  patchV2WebhooksWebhookIdDollarOrWebhooks2:
    PatchV2WebhooksWebhookIdDollarOrWebhooks2,
): string {
  return JSON.stringify(
    PatchV2WebhooksWebhookIdDollarOrWebhooks2$outboundSchema.parse(
      patchV2WebhooksWebhookIdDollarOrWebhooks2,
    ),
  );
}

export function patchV2WebhooksWebhookIdDollarOrWebhooks2FromJSON(
  jsonString: string,
): SafeParseResult<
  PatchV2WebhooksWebhookIdDollarOrWebhooks2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchV2WebhooksWebhookIdDollarOrWebhooks2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchV2WebhooksWebhookIdDollarOrWebhooks2' from JSON`,
  );
}

/** @internal */
export const PatchV2WebhooksWebhookIdDollarOrWebhooksResponseOperator$inboundSchema:
  z.ZodNativeEnum<
    typeof PatchV2WebhooksWebhookIdDollarOrWebhooksResponseOperator
  > = z.nativeEnum(PatchV2WebhooksWebhookIdDollarOrWebhooksResponseOperator);

/** @internal */
export const PatchV2WebhooksWebhookIdDollarOrWebhooksResponseOperator$outboundSchema:
  z.ZodNativeEnum<
    typeof PatchV2WebhooksWebhookIdDollarOrWebhooksResponseOperator
  > = PatchV2WebhooksWebhookIdDollarOrWebhooksResponseOperator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2WebhooksWebhookIdDollarOrWebhooksResponseOperator$ {
  /** @deprecated use `PatchV2WebhooksWebhookIdDollarOrWebhooksResponseOperator$inboundSchema` instead. */
  export const inboundSchema =
    PatchV2WebhooksWebhookIdDollarOrWebhooksResponseOperator$inboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdDollarOrWebhooksResponseOperator$outboundSchema` instead. */
  export const outboundSchema =
    PatchV2WebhooksWebhookIdDollarOrWebhooksResponseOperator$outboundSchema;
}

/** @internal */
export const PatchV2WebhooksWebhookIdDollarOrWebhooks1$inboundSchema: z.ZodType<
  PatchV2WebhooksWebhookIdDollarOrWebhooks1,
  z.ZodTypeDef,
  unknown
> = z.object({
  field: z.string(),
  operator:
    PatchV2WebhooksWebhookIdDollarOrWebhooksResponseOperator$inboundSchema,
  value: z.string(),
});

/** @internal */
export type PatchV2WebhooksWebhookIdDollarOrWebhooks1$Outbound = {
  field: string;
  operator: string;
  value: string;
};

/** @internal */
export const PatchV2WebhooksWebhookIdDollarOrWebhooks1$outboundSchema:
  z.ZodType<
    PatchV2WebhooksWebhookIdDollarOrWebhooks1$Outbound,
    z.ZodTypeDef,
    PatchV2WebhooksWebhookIdDollarOrWebhooks1
  > = z.object({
    field: z.string(),
    operator:
      PatchV2WebhooksWebhookIdDollarOrWebhooksResponseOperator$outboundSchema,
    value: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2WebhooksWebhookIdDollarOrWebhooks1$ {
  /** @deprecated use `PatchV2WebhooksWebhookIdDollarOrWebhooks1$inboundSchema` instead. */
  export const inboundSchema =
    PatchV2WebhooksWebhookIdDollarOrWebhooks1$inboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdDollarOrWebhooks1$outboundSchema` instead. */
  export const outboundSchema =
    PatchV2WebhooksWebhookIdDollarOrWebhooks1$outboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdDollarOrWebhooks1$Outbound` instead. */
  export type Outbound = PatchV2WebhooksWebhookIdDollarOrWebhooks1$Outbound;
}

export function patchV2WebhooksWebhookIdDollarOrWebhooks1ToJSON(
  patchV2WebhooksWebhookIdDollarOrWebhooks1:
    PatchV2WebhooksWebhookIdDollarOrWebhooks1,
): string {
  return JSON.stringify(
    PatchV2WebhooksWebhookIdDollarOrWebhooks1$outboundSchema.parse(
      patchV2WebhooksWebhookIdDollarOrWebhooks1,
    ),
  );
}

export function patchV2WebhooksWebhookIdDollarOrWebhooks1FromJSON(
  jsonString: string,
): SafeParseResult<
  PatchV2WebhooksWebhookIdDollarOrWebhooks1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchV2WebhooksWebhookIdDollarOrWebhooks1$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchV2WebhooksWebhookIdDollarOrWebhooks1' from JSON`,
  );
}

/** @internal */
export const PatchV2WebhooksWebhookIdFilterDollarOr$inboundSchema: z.ZodType<
  PatchV2WebhooksWebhookIdFilterDollarOr,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => PatchV2WebhooksWebhookIdDollarOrWebhooks1$inboundSchema),
  z.lazy(() => PatchV2WebhooksWebhookIdDollarOrWebhooks2$inboundSchema),
]);

/** @internal */
export type PatchV2WebhooksWebhookIdFilterDollarOr$Outbound =
  | PatchV2WebhooksWebhookIdDollarOrWebhooks1$Outbound
  | PatchV2WebhooksWebhookIdDollarOrWebhooks2$Outbound;

/** @internal */
export const PatchV2WebhooksWebhookIdFilterDollarOr$outboundSchema: z.ZodType<
  PatchV2WebhooksWebhookIdFilterDollarOr$Outbound,
  z.ZodTypeDef,
  PatchV2WebhooksWebhookIdFilterDollarOr
> = z.union([
  z.lazy(() => PatchV2WebhooksWebhookIdDollarOrWebhooks1$outboundSchema),
  z.lazy(() => PatchV2WebhooksWebhookIdDollarOrWebhooks2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2WebhooksWebhookIdFilterDollarOr$ {
  /** @deprecated use `PatchV2WebhooksWebhookIdFilterDollarOr$inboundSchema` instead. */
  export const inboundSchema =
    PatchV2WebhooksWebhookIdFilterDollarOr$inboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdFilterDollarOr$outboundSchema` instead. */
  export const outboundSchema =
    PatchV2WebhooksWebhookIdFilterDollarOr$outboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdFilterDollarOr$Outbound` instead. */
  export type Outbound = PatchV2WebhooksWebhookIdFilterDollarOr$Outbound;
}

export function patchV2WebhooksWebhookIdFilterDollarOrToJSON(
  patchV2WebhooksWebhookIdFilterDollarOr:
    PatchV2WebhooksWebhookIdFilterDollarOr,
): string {
  return JSON.stringify(
    PatchV2WebhooksWebhookIdFilterDollarOr$outboundSchema.parse(
      patchV2WebhooksWebhookIdFilterDollarOr,
    ),
  );
}

export function patchV2WebhooksWebhookIdFilterDollarOrFromJSON(
  jsonString: string,
): SafeParseResult<PatchV2WebhooksWebhookIdFilterDollarOr, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PatchV2WebhooksWebhookIdFilterDollarOr$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV2WebhooksWebhookIdFilterDollarOr' from JSON`,
  );
}

/** @internal */
export const PatchV2WebhooksWebhookIdFilterWebhooks1$inboundSchema: z.ZodType<
  PatchV2WebhooksWebhookIdFilterWebhooks1,
  z.ZodTypeDef,
  unknown
> = z.object({
  $or: z.array(
    z.union([
      z.lazy(() => PatchV2WebhooksWebhookIdDollarOrWebhooks1$inboundSchema),
      z.lazy(() => PatchV2WebhooksWebhookIdDollarOrWebhooks2$inboundSchema),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    "$or": "dollarOr",
  });
});

/** @internal */
export type PatchV2WebhooksWebhookIdFilterWebhooks1$Outbound = {
  $or: Array<
    | PatchV2WebhooksWebhookIdDollarOrWebhooks1$Outbound
    | PatchV2WebhooksWebhookIdDollarOrWebhooks2$Outbound
  >;
};

/** @internal */
export const PatchV2WebhooksWebhookIdFilterWebhooks1$outboundSchema: z.ZodType<
  PatchV2WebhooksWebhookIdFilterWebhooks1$Outbound,
  z.ZodTypeDef,
  PatchV2WebhooksWebhookIdFilterWebhooks1
> = z.object({
  dollarOr: z.array(
    z.union([
      z.lazy(() => PatchV2WebhooksWebhookIdDollarOrWebhooks1$outboundSchema),
      z.lazy(() => PatchV2WebhooksWebhookIdDollarOrWebhooks2$outboundSchema),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    dollarOr: "$or",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2WebhooksWebhookIdFilterWebhooks1$ {
  /** @deprecated use `PatchV2WebhooksWebhookIdFilterWebhooks1$inboundSchema` instead. */
  export const inboundSchema =
    PatchV2WebhooksWebhookIdFilterWebhooks1$inboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdFilterWebhooks1$outboundSchema` instead. */
  export const outboundSchema =
    PatchV2WebhooksWebhookIdFilterWebhooks1$outboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdFilterWebhooks1$Outbound` instead. */
  export type Outbound = PatchV2WebhooksWebhookIdFilterWebhooks1$Outbound;
}

export function patchV2WebhooksWebhookIdFilterWebhooks1ToJSON(
  patchV2WebhooksWebhookIdFilterWebhooks1:
    PatchV2WebhooksWebhookIdFilterWebhooks1,
): string {
  return JSON.stringify(
    PatchV2WebhooksWebhookIdFilterWebhooks1$outboundSchema.parse(
      patchV2WebhooksWebhookIdFilterWebhooks1,
    ),
  );
}

export function patchV2WebhooksWebhookIdFilterWebhooks1FromJSON(
  jsonString: string,
): SafeParseResult<
  PatchV2WebhooksWebhookIdFilterWebhooks1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchV2WebhooksWebhookIdFilterWebhooks1$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchV2WebhooksWebhookIdFilterWebhooks1' from JSON`,
  );
}

/** @internal */
export const PatchV2WebhooksWebhookIdWebhooksFilter$inboundSchema: z.ZodType<
  PatchV2WebhooksWebhookIdWebhooksFilter,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => PatchV2WebhooksWebhookIdFilterWebhooks1$inboundSchema),
  z.lazy(() => PatchV2WebhooksWebhookIdFilterWebhooks2$inboundSchema),
]);

/** @internal */
export type PatchV2WebhooksWebhookIdWebhooksFilter$Outbound =
  | PatchV2WebhooksWebhookIdFilterWebhooks1$Outbound
  | PatchV2WebhooksWebhookIdFilterWebhooks2$Outbound;

/** @internal */
export const PatchV2WebhooksWebhookIdWebhooksFilter$outboundSchema: z.ZodType<
  PatchV2WebhooksWebhookIdWebhooksFilter$Outbound,
  z.ZodTypeDef,
  PatchV2WebhooksWebhookIdWebhooksFilter
> = z.union([
  z.lazy(() => PatchV2WebhooksWebhookIdFilterWebhooks1$outboundSchema),
  z.lazy(() => PatchV2WebhooksWebhookIdFilterWebhooks2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2WebhooksWebhookIdWebhooksFilter$ {
  /** @deprecated use `PatchV2WebhooksWebhookIdWebhooksFilter$inboundSchema` instead. */
  export const inboundSchema =
    PatchV2WebhooksWebhookIdWebhooksFilter$inboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdWebhooksFilter$outboundSchema` instead. */
  export const outboundSchema =
    PatchV2WebhooksWebhookIdWebhooksFilter$outboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdWebhooksFilter$Outbound` instead. */
  export type Outbound = PatchV2WebhooksWebhookIdWebhooksFilter$Outbound;
}

export function patchV2WebhooksWebhookIdWebhooksFilterToJSON(
  patchV2WebhooksWebhookIdWebhooksFilter:
    PatchV2WebhooksWebhookIdWebhooksFilter,
): string {
  return JSON.stringify(
    PatchV2WebhooksWebhookIdWebhooksFilter$outboundSchema.parse(
      patchV2WebhooksWebhookIdWebhooksFilter,
    ),
  );
}

export function patchV2WebhooksWebhookIdWebhooksFilterFromJSON(
  jsonString: string,
): SafeParseResult<PatchV2WebhooksWebhookIdWebhooksFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PatchV2WebhooksWebhookIdWebhooksFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV2WebhooksWebhookIdWebhooksFilter' from JSON`,
  );
}

/** @internal */
export const PatchV2WebhooksWebhookIdWebhooksSubscriptions$inboundSchema:
  z.ZodType<
    PatchV2WebhooksWebhookIdWebhooksSubscriptions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    event_type: PatchV2WebhooksWebhookIdWebhooksEventType$inboundSchema,
    filter: z.nullable(
      z.union([
        z.lazy(() => PatchV2WebhooksWebhookIdFilterWebhooks1$inboundSchema),
        z.lazy(() => PatchV2WebhooksWebhookIdFilterWebhooks2$inboundSchema),
      ]),
    ),
  }).transform((v) => {
    return remap$(v, {
      "event_type": "eventType",
    });
  });

/** @internal */
export type PatchV2WebhooksWebhookIdWebhooksSubscriptions$Outbound = {
  event_type: string;
  filter:
    | PatchV2WebhooksWebhookIdFilterWebhooks1$Outbound
    | PatchV2WebhooksWebhookIdFilterWebhooks2$Outbound
    | null;
};

/** @internal */
export const PatchV2WebhooksWebhookIdWebhooksSubscriptions$outboundSchema:
  z.ZodType<
    PatchV2WebhooksWebhookIdWebhooksSubscriptions$Outbound,
    z.ZodTypeDef,
    PatchV2WebhooksWebhookIdWebhooksSubscriptions
  > = z.object({
    eventType: PatchV2WebhooksWebhookIdWebhooksEventType$outboundSchema,
    filter: z.nullable(
      z.union([
        z.lazy(() => PatchV2WebhooksWebhookIdFilterWebhooks1$outboundSchema),
        z.lazy(() => PatchV2WebhooksWebhookIdFilterWebhooks2$outboundSchema),
      ]),
    ),
  }).transform((v) => {
    return remap$(v, {
      eventType: "event_type",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2WebhooksWebhookIdWebhooksSubscriptions$ {
  /** @deprecated use `PatchV2WebhooksWebhookIdWebhooksSubscriptions$inboundSchema` instead. */
  export const inboundSchema =
    PatchV2WebhooksWebhookIdWebhooksSubscriptions$inboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdWebhooksSubscriptions$outboundSchema` instead. */
  export const outboundSchema =
    PatchV2WebhooksWebhookIdWebhooksSubscriptions$outboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdWebhooksSubscriptions$Outbound` instead. */
  export type Outbound = PatchV2WebhooksWebhookIdWebhooksSubscriptions$Outbound;
}

export function patchV2WebhooksWebhookIdWebhooksSubscriptionsToJSON(
  patchV2WebhooksWebhookIdWebhooksSubscriptions:
    PatchV2WebhooksWebhookIdWebhooksSubscriptions,
): string {
  return JSON.stringify(
    PatchV2WebhooksWebhookIdWebhooksSubscriptions$outboundSchema.parse(
      patchV2WebhooksWebhookIdWebhooksSubscriptions,
    ),
  );
}

export function patchV2WebhooksWebhookIdWebhooksSubscriptionsFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchV2WebhooksWebhookIdWebhooksSubscriptions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchV2WebhooksWebhookIdWebhooksSubscriptions$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchV2WebhooksWebhookIdWebhooksSubscriptions' from JSON`,
  );
}

/** @internal */
export const PatchV2WebhooksWebhookIdId$inboundSchema: z.ZodType<
  PatchV2WebhooksWebhookIdId,
  z.ZodTypeDef,
  unknown
> = z.object({
  workspace_id: z.string(),
  webhook_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "workspace_id": "workspaceId",
    "webhook_id": "webhookId",
  });
});

/** @internal */
export type PatchV2WebhooksWebhookIdId$Outbound = {
  workspace_id: string;
  webhook_id: string;
};

/** @internal */
export const PatchV2WebhooksWebhookIdId$outboundSchema: z.ZodType<
  PatchV2WebhooksWebhookIdId$Outbound,
  z.ZodTypeDef,
  PatchV2WebhooksWebhookIdId
> = z.object({
  workspaceId: z.string(),
  webhookId: z.string(),
}).transform((v) => {
  return remap$(v, {
    workspaceId: "workspace_id",
    webhookId: "webhook_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2WebhooksWebhookIdId$ {
  /** @deprecated use `PatchV2WebhooksWebhookIdId$inboundSchema` instead. */
  export const inboundSchema = PatchV2WebhooksWebhookIdId$inboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdId$outboundSchema` instead. */
  export const outboundSchema = PatchV2WebhooksWebhookIdId$outboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdId$Outbound` instead. */
  export type Outbound = PatchV2WebhooksWebhookIdId$Outbound;
}

export function patchV2WebhooksWebhookIdIdToJSON(
  patchV2WebhooksWebhookIdId: PatchV2WebhooksWebhookIdId,
): string {
  return JSON.stringify(
    PatchV2WebhooksWebhookIdId$outboundSchema.parse(patchV2WebhooksWebhookIdId),
  );
}

export function patchV2WebhooksWebhookIdIdFromJSON(
  jsonString: string,
): SafeParseResult<PatchV2WebhooksWebhookIdId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV2WebhooksWebhookIdId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV2WebhooksWebhookIdId' from JSON`,
  );
}

/** @internal */
export const PatchV2WebhooksWebhookIdStatus$inboundSchema: z.ZodNativeEnum<
  typeof PatchV2WebhooksWebhookIdStatus
> = z.nativeEnum(PatchV2WebhooksWebhookIdStatus);

/** @internal */
export const PatchV2WebhooksWebhookIdStatus$outboundSchema: z.ZodNativeEnum<
  typeof PatchV2WebhooksWebhookIdStatus
> = PatchV2WebhooksWebhookIdStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2WebhooksWebhookIdStatus$ {
  /** @deprecated use `PatchV2WebhooksWebhookIdStatus$inboundSchema` instead. */
  export const inboundSchema = PatchV2WebhooksWebhookIdStatus$inboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdStatus$outboundSchema` instead. */
  export const outboundSchema = PatchV2WebhooksWebhookIdStatus$outboundSchema;
}

/** @internal */
export const PatchV2WebhooksWebhookIdWebhooksData$inboundSchema: z.ZodType<
  PatchV2WebhooksWebhookIdWebhooksData,
  z.ZodTypeDef,
  unknown
> = z.object({
  target_url: z.string(),
  subscriptions: z.array(
    z.lazy(() => PatchV2WebhooksWebhookIdWebhooksSubscriptions$inboundSchema),
  ),
  id: z.lazy(() => PatchV2WebhooksWebhookIdId$inboundSchema),
  status: PatchV2WebhooksWebhookIdStatus$inboundSchema,
  created_at: z.string(),
}).transform((v) => {
  return remap$(v, {
    "target_url": "targetUrl",
    "created_at": "createdAt",
  });
});

/** @internal */
export type PatchV2WebhooksWebhookIdWebhooksData$Outbound = {
  target_url: string;
  subscriptions: Array<PatchV2WebhooksWebhookIdWebhooksSubscriptions$Outbound>;
  id: PatchV2WebhooksWebhookIdId$Outbound;
  status: string;
  created_at: string;
};

/** @internal */
export const PatchV2WebhooksWebhookIdWebhooksData$outboundSchema: z.ZodType<
  PatchV2WebhooksWebhookIdWebhooksData$Outbound,
  z.ZodTypeDef,
  PatchV2WebhooksWebhookIdWebhooksData
> = z.object({
  targetUrl: z.string(),
  subscriptions: z.array(
    z.lazy(() => PatchV2WebhooksWebhookIdWebhooksSubscriptions$outboundSchema),
  ),
  id: z.lazy(() => PatchV2WebhooksWebhookIdId$outboundSchema),
  status: PatchV2WebhooksWebhookIdStatus$outboundSchema,
  createdAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    targetUrl: "target_url",
    createdAt: "created_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2WebhooksWebhookIdWebhooksData$ {
  /** @deprecated use `PatchV2WebhooksWebhookIdWebhooksData$inboundSchema` instead. */
  export const inboundSchema =
    PatchV2WebhooksWebhookIdWebhooksData$inboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdWebhooksData$outboundSchema` instead. */
  export const outboundSchema =
    PatchV2WebhooksWebhookIdWebhooksData$outboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdWebhooksData$Outbound` instead. */
  export type Outbound = PatchV2WebhooksWebhookIdWebhooksData$Outbound;
}

export function patchV2WebhooksWebhookIdWebhooksDataToJSON(
  patchV2WebhooksWebhookIdWebhooksData: PatchV2WebhooksWebhookIdWebhooksData,
): string {
  return JSON.stringify(
    PatchV2WebhooksWebhookIdWebhooksData$outboundSchema.parse(
      patchV2WebhooksWebhookIdWebhooksData,
    ),
  );
}

export function patchV2WebhooksWebhookIdWebhooksDataFromJSON(
  jsonString: string,
): SafeParseResult<PatchV2WebhooksWebhookIdWebhooksData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PatchV2WebhooksWebhookIdWebhooksData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV2WebhooksWebhookIdWebhooksData' from JSON`,
  );
}

/** @internal */
export const PatchV2WebhooksWebhookIdResponseBody$inboundSchema: z.ZodType<
  PatchV2WebhooksWebhookIdResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => PatchV2WebhooksWebhookIdWebhooksData$inboundSchema),
});

/** @internal */
export type PatchV2WebhooksWebhookIdResponseBody$Outbound = {
  data: PatchV2WebhooksWebhookIdWebhooksData$Outbound;
};

/** @internal */
export const PatchV2WebhooksWebhookIdResponseBody$outboundSchema: z.ZodType<
  PatchV2WebhooksWebhookIdResponseBody$Outbound,
  z.ZodTypeDef,
  PatchV2WebhooksWebhookIdResponseBody
> = z.object({
  data: z.lazy(() => PatchV2WebhooksWebhookIdWebhooksData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2WebhooksWebhookIdResponseBody$ {
  /** @deprecated use `PatchV2WebhooksWebhookIdResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PatchV2WebhooksWebhookIdResponseBody$inboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PatchV2WebhooksWebhookIdResponseBody$outboundSchema;
  /** @deprecated use `PatchV2WebhooksWebhookIdResponseBody$Outbound` instead. */
  export type Outbound = PatchV2WebhooksWebhookIdResponseBody$Outbound;
}

export function patchV2WebhooksWebhookIdResponseBodyToJSON(
  patchV2WebhooksWebhookIdResponseBody: PatchV2WebhooksWebhookIdResponseBody,
): string {
  return JSON.stringify(
    PatchV2WebhooksWebhookIdResponseBody$outboundSchema.parse(
      patchV2WebhooksWebhookIdResponseBody,
    ),
  );
}

export function patchV2WebhooksWebhookIdResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<PatchV2WebhooksWebhookIdResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PatchV2WebhooksWebhookIdResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV2WebhooksWebhookIdResponseBody' from JSON`,
  );
}
