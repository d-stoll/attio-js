/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { AttioCore } from "../core.js";
import { recordsPartialUpdate } from "../funcs/recordsPartialUpdate.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useAttioContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type RecordsPartialUpdateMutationVariables = {
  request: operations.PatchV2ObjectsObjectRecordsRecordIdRequest;
  options?: RequestOptions;
};

export type RecordsPartialUpdateMutationData =
  operations.PatchV2ObjectsObjectRecordsRecordIdResponseBody;

/**
 * Update a record (append multiselect values)
 *
 * @remarks
 * Use this endpoint to update people, companies, and other records by `record_id`. If the update payload includes multiselect attributes, the values supplied will be created and prepended to the list of values that already exist (if any). Use the `PUT` endpoint to overwrite or remove multiselect attribute values.
 *
 * Required scopes: `record_permission:read-write`, `object_configuration:read`.
 */
export function useRecordsPartialUpdateMutation(
  options?: MutationHookOptions<
    RecordsPartialUpdateMutationData,
    Error,
    RecordsPartialUpdateMutationVariables
  >,
): UseMutationResult<
  RecordsPartialUpdateMutationData,
  Error,
  RecordsPartialUpdateMutationVariables
> {
  const client = useAttioContext();
  return useMutation({
    ...buildRecordsPartialUpdateMutation(client, options),
    ...options,
  });
}

export function mutationKeyRecordsPartialUpdate(): MutationKey {
  return ["attio-js", "Records", "partialUpdate"];
}

export function buildRecordsPartialUpdateMutation(
  client$: AttioCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: RecordsPartialUpdateMutationVariables,
  ) => Promise<RecordsPartialUpdateMutationData>;
} {
  return {
    mutationKey: mutationKeyRecordsPartialUpdate(),
    mutationFn: function recordsPartialUpdateMutationFn({
      request,
      options,
    }): Promise<RecordsPartialUpdateMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(recordsPartialUpdate(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
