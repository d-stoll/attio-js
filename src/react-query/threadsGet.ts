/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { AttioCore } from "../core.js";
import { threadsGet } from "../funcs/threadsGet.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useAttioContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type ThreadsGetQueryData = operations.GetV2ThreadsThreadIdResponseBody;

/**
 * Get a thread
 *
 * @remarks
 * Get all comments in a thread.
 *
 * To view threads on records, you will need the `object_configuration:read` and `record_permission:read` scopes.
 *
 * To view threads on list entries, you will need the `list_configuration:read` and `list_entry:read` scopes.
 *
 * Required scopes: `comment:read`.
 */
export function useThreadsGet(
  request: operations.GetV2ThreadsThreadIdRequest,
  options?: QueryHookOptions<ThreadsGetQueryData>,
): UseQueryResult<ThreadsGetQueryData, Error> {
  const client = useAttioContext();
  return useQuery({
    ...buildThreadsGetQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get a thread
 *
 * @remarks
 * Get all comments in a thread.
 *
 * To view threads on records, you will need the `object_configuration:read` and `record_permission:read` scopes.
 *
 * To view threads on list entries, you will need the `list_configuration:read` and `list_entry:read` scopes.
 *
 * Required scopes: `comment:read`.
 */
export function useThreadsGetSuspense(
  request: operations.GetV2ThreadsThreadIdRequest,
  options?: SuspenseQueryHookOptions<ThreadsGetQueryData>,
): UseSuspenseQueryResult<ThreadsGetQueryData, Error> {
  const client = useAttioContext();
  return useSuspenseQuery({
    ...buildThreadsGetQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchThreadsGet(
  queryClient: QueryClient,
  client$: AttioCore,
  request: operations.GetV2ThreadsThreadIdRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildThreadsGetQuery(
      client$,
      request,
    ),
  });
}

export function setThreadsGetData(
  client: QueryClient,
  queryKeyBase: [threadId: string],
  data: ThreadsGetQueryData,
): ThreadsGetQueryData | undefined {
  const key = queryKeyThreadsGet(...queryKeyBase);

  return client.setQueryData<ThreadsGetQueryData>(key, data);
}

export function invalidateThreadsGet(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<[threadId: string]>,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["attio-js", "Threads", "get", ...queryKeyBase],
  });
}

export function invalidateAllThreadsGet(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["attio-js", "Threads", "get"],
  });
}

export function buildThreadsGetQuery(
  client$: AttioCore,
  request: operations.GetV2ThreadsThreadIdRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<ThreadsGetQueryData>;
} {
  return {
    queryKey: queryKeyThreadsGet(request.threadId),
    queryFn: async function threadsGetQueryFn(
      ctx,
    ): Promise<ThreadsGetQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(threadsGet(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyThreadsGet(threadId: string): QueryKey {
  return ["attio-js", "Threads", "get", threadId];
}
