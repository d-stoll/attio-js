/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { AttioCore } from "../core.js";
import { entriesCreate } from "../funcs/entriesCreate.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useAttioContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type EntriesCreateMutationVariables = {
  request: operations.PostV2ListsListEntriesRequest;
  options?: RequestOptions;
};

export type EntriesCreateMutationData =
  operations.PostV2ListsListEntriesResponseBody;

/**
 * Create an entry (add record to list)
 *
 * @remarks
 * Adds a record to a list as a new list entry. This endpoint will throw on conflicts of unique attributes. Multiple list entries are allowed for the same parent record
 *
 * Required scopes: `list_entry:read-write`, `list_configuration:read`.
 */
export function useEntriesCreateMutation(
  options?: MutationHookOptions<
    EntriesCreateMutationData,
    Error,
    EntriesCreateMutationVariables
  >,
): UseMutationResult<
  EntriesCreateMutationData,
  Error,
  EntriesCreateMutationVariables
> {
  const client = useAttioContext();
  return useMutation({
    ...buildEntriesCreateMutation(client, options),
    ...options,
  });
}

export function mutationKeyEntriesCreate(): MutationKey {
  return ["attio-js", "Entries", "create"];
}

export function buildEntriesCreateMutation(
  client$: AttioCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: EntriesCreateMutationVariables,
  ) => Promise<EntriesCreateMutationData>;
} {
  return {
    mutationKey: mutationKeyEntriesCreate(),
    mutationFn: function entriesCreateMutationFn({
      request,
      options,
    }): Promise<EntriesCreateMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(entriesCreate(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
