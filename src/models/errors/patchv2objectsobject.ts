/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";

export const PatchV2ObjectsObjectObjectsResponseType = {
  InvalidRequestError: "invalid_request_error",
} as const;
export type PatchV2ObjectsObjectObjectsResponseType = ClosedEnum<
  typeof PatchV2ObjectsObjectObjectsResponseType
>;

export const PatchV2ObjectsObjectObjectsResponseCode = {
  SlugConflict: "slug_conflict",
} as const;
export type PatchV2ObjectsObjectObjectsResponseCode = ClosedEnum<
  typeof PatchV2ObjectsObjectObjectsResponseCode
>;

/**
 * Conflict
 */
export type PatchV2ObjectsObjectObjectsResponseResponseBodyData = {
  statusCode: number;
  type: PatchV2ObjectsObjectObjectsResponseType;
  code: PatchV2ObjectsObjectObjectsResponseCode;
  message: string;
};

/**
 * Conflict
 */
export class PatchV2ObjectsObjectObjectsResponseResponseBody extends Error {
  statusCode: number;
  type: PatchV2ObjectsObjectObjectsResponseType;
  code: PatchV2ObjectsObjectObjectsResponseCode;

  /** The original data that was passed to this error instance. */
  data$: PatchV2ObjectsObjectObjectsResponseResponseBodyData;

  constructor(err: PatchV2ObjectsObjectObjectsResponseResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.statusCode = err.statusCode;
    this.type = err.type;
    this.code = err.code;

    this.name = "PatchV2ObjectsObjectObjectsResponseResponseBody";
  }
}

export const PatchV2ObjectsObjectObjectsType = {
  InvalidRequestError: "invalid_request_error",
} as const;
export type PatchV2ObjectsObjectObjectsType = ClosedEnum<
  typeof PatchV2ObjectsObjectObjectsType
>;

export const PatchV2ObjectsObjectObjectsCode = {
  NotFound: "not_found",
} as const;
export type PatchV2ObjectsObjectObjectsCode = ClosedEnum<
  typeof PatchV2ObjectsObjectObjectsCode
>;

/**
 * Not Found
 */
export type PatchV2ObjectsObjectObjectsResponseBodyData = {
  statusCode: number;
  type: PatchV2ObjectsObjectObjectsType;
  code: PatchV2ObjectsObjectObjectsCode;
  message: string;
};

/**
 * Not Found
 */
export class PatchV2ObjectsObjectObjectsResponseBody extends Error {
  statusCode: number;
  type: PatchV2ObjectsObjectObjectsType;
  code: PatchV2ObjectsObjectObjectsCode;

  /** The original data that was passed to this error instance. */
  data$: PatchV2ObjectsObjectObjectsResponseBodyData;

  constructor(err: PatchV2ObjectsObjectObjectsResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.statusCode = err.statusCode;
    this.type = err.type;
    this.code = err.code;

    this.name = "PatchV2ObjectsObjectObjectsResponseBody";
  }
}

export const PatchV2ObjectsObjectType = {
  InvalidRequestError: "invalid_request_error",
} as const;
export type PatchV2ObjectsObjectType = ClosedEnum<
  typeof PatchV2ObjectsObjectType
>;

export const PatchV2ObjectsObjectCode = {
  ValidationType: "validation_type",
} as const;
export type PatchV2ObjectsObjectCode = ClosedEnum<
  typeof PatchV2ObjectsObjectCode
>;

/**
 * Bad Request
 */
export type PatchV2ObjectsObjectResponseBodyData = {
  statusCode: number;
  type: PatchV2ObjectsObjectType;
  code: PatchV2ObjectsObjectCode;
  message: string;
};

/**
 * Bad Request
 */
export class PatchV2ObjectsObjectResponseBody extends Error {
  statusCode: number;
  type: PatchV2ObjectsObjectType;
  code: PatchV2ObjectsObjectCode;

  /** The original data that was passed to this error instance. */
  data$: PatchV2ObjectsObjectResponseBodyData;

  constructor(err: PatchV2ObjectsObjectResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.statusCode = err.statusCode;
    this.type = err.type;
    this.code = err.code;

    this.name = "PatchV2ObjectsObjectResponseBody";
  }
}

/** @internal */
export const PatchV2ObjectsObjectObjectsResponseType$inboundSchema:
  z.ZodNativeEnum<typeof PatchV2ObjectsObjectObjectsResponseType> = z
    .nativeEnum(PatchV2ObjectsObjectObjectsResponseType);

/** @internal */
export const PatchV2ObjectsObjectObjectsResponseType$outboundSchema:
  z.ZodNativeEnum<typeof PatchV2ObjectsObjectObjectsResponseType> =
    PatchV2ObjectsObjectObjectsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2ObjectsObjectObjectsResponseType$ {
  /** @deprecated use `PatchV2ObjectsObjectObjectsResponseType$inboundSchema` instead. */
  export const inboundSchema =
    PatchV2ObjectsObjectObjectsResponseType$inboundSchema;
  /** @deprecated use `PatchV2ObjectsObjectObjectsResponseType$outboundSchema` instead. */
  export const outboundSchema =
    PatchV2ObjectsObjectObjectsResponseType$outboundSchema;
}

/** @internal */
export const PatchV2ObjectsObjectObjectsResponseCode$inboundSchema:
  z.ZodNativeEnum<typeof PatchV2ObjectsObjectObjectsResponseCode> = z
    .nativeEnum(PatchV2ObjectsObjectObjectsResponseCode);

/** @internal */
export const PatchV2ObjectsObjectObjectsResponseCode$outboundSchema:
  z.ZodNativeEnum<typeof PatchV2ObjectsObjectObjectsResponseCode> =
    PatchV2ObjectsObjectObjectsResponseCode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2ObjectsObjectObjectsResponseCode$ {
  /** @deprecated use `PatchV2ObjectsObjectObjectsResponseCode$inboundSchema` instead. */
  export const inboundSchema =
    PatchV2ObjectsObjectObjectsResponseCode$inboundSchema;
  /** @deprecated use `PatchV2ObjectsObjectObjectsResponseCode$outboundSchema` instead. */
  export const outboundSchema =
    PatchV2ObjectsObjectObjectsResponseCode$outboundSchema;
}

/** @internal */
export const PatchV2ObjectsObjectObjectsResponseResponseBody$inboundSchema:
  z.ZodType<
    PatchV2ObjectsObjectObjectsResponseResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number(),
    type: PatchV2ObjectsObjectObjectsResponseType$inboundSchema,
    code: PatchV2ObjectsObjectObjectsResponseCode$inboundSchema,
    message: z.string(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
      });

      return new PatchV2ObjectsObjectObjectsResponseResponseBody(remapped);
    });

/** @internal */
export type PatchV2ObjectsObjectObjectsResponseResponseBody$Outbound = {
  status_code: number;
  type: string;
  code: string;
  message: string;
};

/** @internal */
export const PatchV2ObjectsObjectObjectsResponseResponseBody$outboundSchema:
  z.ZodType<
    PatchV2ObjectsObjectObjectsResponseResponseBody$Outbound,
    z.ZodTypeDef,
    PatchV2ObjectsObjectObjectsResponseResponseBody
  > = z.instanceof(PatchV2ObjectsObjectObjectsResponseResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number(),
        type: PatchV2ObjectsObjectObjectsResponseType$outboundSchema,
        code: PatchV2ObjectsObjectObjectsResponseCode$outboundSchema,
        message: z.string(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2ObjectsObjectObjectsResponseResponseBody$ {
  /** @deprecated use `PatchV2ObjectsObjectObjectsResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PatchV2ObjectsObjectObjectsResponseResponseBody$inboundSchema;
  /** @deprecated use `PatchV2ObjectsObjectObjectsResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PatchV2ObjectsObjectObjectsResponseResponseBody$outboundSchema;
  /** @deprecated use `PatchV2ObjectsObjectObjectsResponseResponseBody$Outbound` instead. */
  export type Outbound =
    PatchV2ObjectsObjectObjectsResponseResponseBody$Outbound;
}

/** @internal */
export const PatchV2ObjectsObjectObjectsType$inboundSchema: z.ZodNativeEnum<
  typeof PatchV2ObjectsObjectObjectsType
> = z.nativeEnum(PatchV2ObjectsObjectObjectsType);

/** @internal */
export const PatchV2ObjectsObjectObjectsType$outboundSchema: z.ZodNativeEnum<
  typeof PatchV2ObjectsObjectObjectsType
> = PatchV2ObjectsObjectObjectsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2ObjectsObjectObjectsType$ {
  /** @deprecated use `PatchV2ObjectsObjectObjectsType$inboundSchema` instead. */
  export const inboundSchema = PatchV2ObjectsObjectObjectsType$inboundSchema;
  /** @deprecated use `PatchV2ObjectsObjectObjectsType$outboundSchema` instead. */
  export const outboundSchema = PatchV2ObjectsObjectObjectsType$outboundSchema;
}

/** @internal */
export const PatchV2ObjectsObjectObjectsCode$inboundSchema: z.ZodNativeEnum<
  typeof PatchV2ObjectsObjectObjectsCode
> = z.nativeEnum(PatchV2ObjectsObjectObjectsCode);

/** @internal */
export const PatchV2ObjectsObjectObjectsCode$outboundSchema: z.ZodNativeEnum<
  typeof PatchV2ObjectsObjectObjectsCode
> = PatchV2ObjectsObjectObjectsCode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2ObjectsObjectObjectsCode$ {
  /** @deprecated use `PatchV2ObjectsObjectObjectsCode$inboundSchema` instead. */
  export const inboundSchema = PatchV2ObjectsObjectObjectsCode$inboundSchema;
  /** @deprecated use `PatchV2ObjectsObjectObjectsCode$outboundSchema` instead. */
  export const outboundSchema = PatchV2ObjectsObjectObjectsCode$outboundSchema;
}

/** @internal */
export const PatchV2ObjectsObjectObjectsResponseBody$inboundSchema: z.ZodType<
  PatchV2ObjectsObjectObjectsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number(),
  type: PatchV2ObjectsObjectObjectsType$inboundSchema,
  code: PatchV2ObjectsObjectObjectsCode$inboundSchema,
  message: z.string(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
    });

    return new PatchV2ObjectsObjectObjectsResponseBody(remapped);
  });

/** @internal */
export type PatchV2ObjectsObjectObjectsResponseBody$Outbound = {
  status_code: number;
  type: string;
  code: string;
  message: string;
};

/** @internal */
export const PatchV2ObjectsObjectObjectsResponseBody$outboundSchema: z.ZodType<
  PatchV2ObjectsObjectObjectsResponseBody$Outbound,
  z.ZodTypeDef,
  PatchV2ObjectsObjectObjectsResponseBody
> = z.instanceof(PatchV2ObjectsObjectObjectsResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number(),
      type: PatchV2ObjectsObjectObjectsType$outboundSchema,
      code: PatchV2ObjectsObjectObjectsCode$outboundSchema,
      message: z.string(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2ObjectsObjectObjectsResponseBody$ {
  /** @deprecated use `PatchV2ObjectsObjectObjectsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PatchV2ObjectsObjectObjectsResponseBody$inboundSchema;
  /** @deprecated use `PatchV2ObjectsObjectObjectsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PatchV2ObjectsObjectObjectsResponseBody$outboundSchema;
  /** @deprecated use `PatchV2ObjectsObjectObjectsResponseBody$Outbound` instead. */
  export type Outbound = PatchV2ObjectsObjectObjectsResponseBody$Outbound;
}

/** @internal */
export const PatchV2ObjectsObjectType$inboundSchema: z.ZodNativeEnum<
  typeof PatchV2ObjectsObjectType
> = z.nativeEnum(PatchV2ObjectsObjectType);

/** @internal */
export const PatchV2ObjectsObjectType$outboundSchema: z.ZodNativeEnum<
  typeof PatchV2ObjectsObjectType
> = PatchV2ObjectsObjectType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2ObjectsObjectType$ {
  /** @deprecated use `PatchV2ObjectsObjectType$inboundSchema` instead. */
  export const inboundSchema = PatchV2ObjectsObjectType$inboundSchema;
  /** @deprecated use `PatchV2ObjectsObjectType$outboundSchema` instead. */
  export const outboundSchema = PatchV2ObjectsObjectType$outboundSchema;
}

/** @internal */
export const PatchV2ObjectsObjectCode$inboundSchema: z.ZodNativeEnum<
  typeof PatchV2ObjectsObjectCode
> = z.nativeEnum(PatchV2ObjectsObjectCode);

/** @internal */
export const PatchV2ObjectsObjectCode$outboundSchema: z.ZodNativeEnum<
  typeof PatchV2ObjectsObjectCode
> = PatchV2ObjectsObjectCode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2ObjectsObjectCode$ {
  /** @deprecated use `PatchV2ObjectsObjectCode$inboundSchema` instead. */
  export const inboundSchema = PatchV2ObjectsObjectCode$inboundSchema;
  /** @deprecated use `PatchV2ObjectsObjectCode$outboundSchema` instead. */
  export const outboundSchema = PatchV2ObjectsObjectCode$outboundSchema;
}

/** @internal */
export const PatchV2ObjectsObjectResponseBody$inboundSchema: z.ZodType<
  PatchV2ObjectsObjectResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number(),
  type: PatchV2ObjectsObjectType$inboundSchema,
  code: PatchV2ObjectsObjectCode$inboundSchema,
  message: z.string(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
    });

    return new PatchV2ObjectsObjectResponseBody(remapped);
  });

/** @internal */
export type PatchV2ObjectsObjectResponseBody$Outbound = {
  status_code: number;
  type: string;
  code: string;
  message: string;
};

/** @internal */
export const PatchV2ObjectsObjectResponseBody$outboundSchema: z.ZodType<
  PatchV2ObjectsObjectResponseBody$Outbound,
  z.ZodTypeDef,
  PatchV2ObjectsObjectResponseBody
> = z.instanceof(PatchV2ObjectsObjectResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number(),
      type: PatchV2ObjectsObjectType$outboundSchema,
      code: PatchV2ObjectsObjectCode$outboundSchema,
      message: z.string(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2ObjectsObjectResponseBody$ {
  /** @deprecated use `PatchV2ObjectsObjectResponseBody$inboundSchema` instead. */
  export const inboundSchema = PatchV2ObjectsObjectResponseBody$inboundSchema;
  /** @deprecated use `PatchV2ObjectsObjectResponseBody$outboundSchema` instead. */
  export const outboundSchema = PatchV2ObjectsObjectResponseBody$outboundSchema;
  /** @deprecated use `PatchV2ObjectsObjectResponseBody$Outbound` instead. */
  export type Outbound = PatchV2ObjectsObjectResponseBody$Outbound;
}
