/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";

export const PatchV2ListsListListsType = {
  InvalidRequestError: "invalid_request_error",
} as const;
export type PatchV2ListsListListsType = ClosedEnum<
  typeof PatchV2ListsListListsType
>;

export const PatchV2ListsListListsCode = {
  NotFound: "not_found",
} as const;
export type PatchV2ListsListListsCode = ClosedEnum<
  typeof PatchV2ListsListListsCode
>;

/**
 * Not Found
 */
export type PatchV2ListsListListsResponseBodyData = {
  statusCode: number;
  type: PatchV2ListsListListsType;
  code: PatchV2ListsListListsCode;
  message: string;
};

/**
 * Not Found
 */
export class PatchV2ListsListListsResponseBody extends Error {
  statusCode: number;
  type: PatchV2ListsListListsType;
  code: PatchV2ListsListListsCode;

  /** The original data that was passed to this error instance. */
  data$: PatchV2ListsListListsResponseBodyData;

  constructor(err: PatchV2ListsListListsResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.statusCode = err.statusCode;
    this.type = err.type;
    this.code = err.code;

    this.name = "PatchV2ListsListListsResponseBody";
  }
}

export const PatchV2ListsListType = {
  InvalidRequestError: "invalid_request_error",
} as const;
export type PatchV2ListsListType = ClosedEnum<typeof PatchV2ListsListType>;

export const PatchV2ListsListCode = {
  ValueNotFound: "value_not_found",
} as const;
export type PatchV2ListsListCode = ClosedEnum<typeof PatchV2ListsListCode>;

/**
 * Bad Request
 */
export type PatchV2ListsListResponseBodyData = {
  statusCode: number;
  type: PatchV2ListsListType;
  code: PatchV2ListsListCode;
  message: string;
};

/**
 * Bad Request
 */
export class PatchV2ListsListResponseBody extends Error {
  statusCode: number;
  type: PatchV2ListsListType;
  code: PatchV2ListsListCode;

  /** The original data that was passed to this error instance. */
  data$: PatchV2ListsListResponseBodyData;

  constructor(err: PatchV2ListsListResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.statusCode = err.statusCode;
    this.type = err.type;
    this.code = err.code;

    this.name = "PatchV2ListsListResponseBody";
  }
}

/** @internal */
export const PatchV2ListsListListsType$inboundSchema: z.ZodNativeEnum<
  typeof PatchV2ListsListListsType
> = z.nativeEnum(PatchV2ListsListListsType);

/** @internal */
export const PatchV2ListsListListsType$outboundSchema: z.ZodNativeEnum<
  typeof PatchV2ListsListListsType
> = PatchV2ListsListListsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2ListsListListsType$ {
  /** @deprecated use `PatchV2ListsListListsType$inboundSchema` instead. */
  export const inboundSchema = PatchV2ListsListListsType$inboundSchema;
  /** @deprecated use `PatchV2ListsListListsType$outboundSchema` instead. */
  export const outboundSchema = PatchV2ListsListListsType$outboundSchema;
}

/** @internal */
export const PatchV2ListsListListsCode$inboundSchema: z.ZodNativeEnum<
  typeof PatchV2ListsListListsCode
> = z.nativeEnum(PatchV2ListsListListsCode);

/** @internal */
export const PatchV2ListsListListsCode$outboundSchema: z.ZodNativeEnum<
  typeof PatchV2ListsListListsCode
> = PatchV2ListsListListsCode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2ListsListListsCode$ {
  /** @deprecated use `PatchV2ListsListListsCode$inboundSchema` instead. */
  export const inboundSchema = PatchV2ListsListListsCode$inboundSchema;
  /** @deprecated use `PatchV2ListsListListsCode$outboundSchema` instead. */
  export const outboundSchema = PatchV2ListsListListsCode$outboundSchema;
}

/** @internal */
export const PatchV2ListsListListsResponseBody$inboundSchema: z.ZodType<
  PatchV2ListsListListsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number(),
  type: PatchV2ListsListListsType$inboundSchema,
  code: PatchV2ListsListListsCode$inboundSchema,
  message: z.string(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
    });

    return new PatchV2ListsListListsResponseBody(remapped);
  });

/** @internal */
export type PatchV2ListsListListsResponseBody$Outbound = {
  status_code: number;
  type: string;
  code: string;
  message: string;
};

/** @internal */
export const PatchV2ListsListListsResponseBody$outboundSchema: z.ZodType<
  PatchV2ListsListListsResponseBody$Outbound,
  z.ZodTypeDef,
  PatchV2ListsListListsResponseBody
> = z.instanceof(PatchV2ListsListListsResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number(),
      type: PatchV2ListsListListsType$outboundSchema,
      code: PatchV2ListsListListsCode$outboundSchema,
      message: z.string(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2ListsListListsResponseBody$ {
  /** @deprecated use `PatchV2ListsListListsResponseBody$inboundSchema` instead. */
  export const inboundSchema = PatchV2ListsListListsResponseBody$inboundSchema;
  /** @deprecated use `PatchV2ListsListListsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PatchV2ListsListListsResponseBody$outboundSchema;
  /** @deprecated use `PatchV2ListsListListsResponseBody$Outbound` instead. */
  export type Outbound = PatchV2ListsListListsResponseBody$Outbound;
}

/** @internal */
export const PatchV2ListsListType$inboundSchema: z.ZodNativeEnum<
  typeof PatchV2ListsListType
> = z.nativeEnum(PatchV2ListsListType);

/** @internal */
export const PatchV2ListsListType$outboundSchema: z.ZodNativeEnum<
  typeof PatchV2ListsListType
> = PatchV2ListsListType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2ListsListType$ {
  /** @deprecated use `PatchV2ListsListType$inboundSchema` instead. */
  export const inboundSchema = PatchV2ListsListType$inboundSchema;
  /** @deprecated use `PatchV2ListsListType$outboundSchema` instead. */
  export const outboundSchema = PatchV2ListsListType$outboundSchema;
}

/** @internal */
export const PatchV2ListsListCode$inboundSchema: z.ZodNativeEnum<
  typeof PatchV2ListsListCode
> = z.nativeEnum(PatchV2ListsListCode);

/** @internal */
export const PatchV2ListsListCode$outboundSchema: z.ZodNativeEnum<
  typeof PatchV2ListsListCode
> = PatchV2ListsListCode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2ListsListCode$ {
  /** @deprecated use `PatchV2ListsListCode$inboundSchema` instead. */
  export const inboundSchema = PatchV2ListsListCode$inboundSchema;
  /** @deprecated use `PatchV2ListsListCode$outboundSchema` instead. */
  export const outboundSchema = PatchV2ListsListCode$outboundSchema;
}

/** @internal */
export const PatchV2ListsListResponseBody$inboundSchema: z.ZodType<
  PatchV2ListsListResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number(),
  type: PatchV2ListsListType$inboundSchema,
  code: PatchV2ListsListCode$inboundSchema,
  message: z.string(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
    });

    return new PatchV2ListsListResponseBody(remapped);
  });

/** @internal */
export type PatchV2ListsListResponseBody$Outbound = {
  status_code: number;
  type: string;
  code: string;
  message: string;
};

/** @internal */
export const PatchV2ListsListResponseBody$outboundSchema: z.ZodType<
  PatchV2ListsListResponseBody$Outbound,
  z.ZodTypeDef,
  PatchV2ListsListResponseBody
> = z.instanceof(PatchV2ListsListResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number(),
      type: PatchV2ListsListType$outboundSchema,
      code: PatchV2ListsListCode$outboundSchema,
      message: z.string(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV2ListsListResponseBody$ {
  /** @deprecated use `PatchV2ListsListResponseBody$inboundSchema` instead. */
  export const inboundSchema = PatchV2ListsListResponseBody$inboundSchema;
  /** @deprecated use `PatchV2ListsListResponseBody$outboundSchema` instead. */
  export const outboundSchema = PatchV2ListsListResponseBody$outboundSchema;
  /** @deprecated use `PatchV2ListsListResponseBody$Outbound` instead. */
  export type Outbound = PatchV2ListsListResponseBody$Outbound;
}
