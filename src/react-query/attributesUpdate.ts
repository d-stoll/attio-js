/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { AttioCore } from "../core.js";
import { attributesUpdate } from "../funcs/attributesUpdate.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useAttioContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type AttributesUpdateMutationVariables = {
  request: operations.PatchV2TargetIdentifierAttributesAttributeRequest;
  options?: RequestOptions;
};

export type AttributesUpdateMutationData =
  operations.PatchV2TargetIdentifierAttributesAttributeResponseBody;

/**
 * Update an attribute
 *
 * @remarks
 * Updates a single attribute on a given object or list.
 *
 * Required scopes: `object_configuration:read-write`.
 */
export function useAttributesUpdateMutation(
  options?: MutationHookOptions<
    AttributesUpdateMutationData,
    Error,
    AttributesUpdateMutationVariables
  >,
): UseMutationResult<
  AttributesUpdateMutationData,
  Error,
  AttributesUpdateMutationVariables
> {
  const client = useAttioContext();
  return useMutation({
    ...buildAttributesUpdateMutation(client, options),
    ...options,
  });
}

export function mutationKeyAttributesUpdate(): MutationKey {
  return ["attio-js", "Attributes", "update"];
}

export function buildAttributesUpdateMutation(
  client$: AttioCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: AttributesUpdateMutationVariables,
  ) => Promise<AttributesUpdateMutationData>;
} {
  return {
    mutationKey: mutationKeyAttributesUpdate(),
    mutationFn: function attributesUpdateMutationFn({
      request,
      options,
    }): Promise<AttributesUpdateMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(attributesUpdate(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
