/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetV2CommentsCommentIdRequest = {
  commentId: string;
};

/**
 * Success
 */
export type GetV2CommentsCommentIdResponseBody = {
  data: components.Comment;
};

/** @internal */
export const GetV2CommentsCommentIdRequest$inboundSchema: z.ZodType<
  GetV2CommentsCommentIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  comment_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "comment_id": "commentId",
  });
});

/** @internal */
export type GetV2CommentsCommentIdRequest$Outbound = {
  comment_id: string;
};

/** @internal */
export const GetV2CommentsCommentIdRequest$outboundSchema: z.ZodType<
  GetV2CommentsCommentIdRequest$Outbound,
  z.ZodTypeDef,
  GetV2CommentsCommentIdRequest
> = z.object({
  commentId: z.string(),
}).transform((v) => {
  return remap$(v, {
    commentId: "comment_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2CommentsCommentIdRequest$ {
  /** @deprecated use `GetV2CommentsCommentIdRequest$inboundSchema` instead. */
  export const inboundSchema = GetV2CommentsCommentIdRequest$inboundSchema;
  /** @deprecated use `GetV2CommentsCommentIdRequest$outboundSchema` instead. */
  export const outboundSchema = GetV2CommentsCommentIdRequest$outboundSchema;
  /** @deprecated use `GetV2CommentsCommentIdRequest$Outbound` instead. */
  export type Outbound = GetV2CommentsCommentIdRequest$Outbound;
}

export function getV2CommentsCommentIdRequestToJSON(
  getV2CommentsCommentIdRequest: GetV2CommentsCommentIdRequest,
): string {
  return JSON.stringify(
    GetV2CommentsCommentIdRequest$outboundSchema.parse(
      getV2CommentsCommentIdRequest,
    ),
  );
}

export function getV2CommentsCommentIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetV2CommentsCommentIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2CommentsCommentIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2CommentsCommentIdRequest' from JSON`,
  );
}

/** @internal */
export const GetV2CommentsCommentIdResponseBody$inboundSchema: z.ZodType<
  GetV2CommentsCommentIdResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: components.Comment$inboundSchema,
});

/** @internal */
export type GetV2CommentsCommentIdResponseBody$Outbound = {
  data: components.Comment$Outbound;
};

/** @internal */
export const GetV2CommentsCommentIdResponseBody$outboundSchema: z.ZodType<
  GetV2CommentsCommentIdResponseBody$Outbound,
  z.ZodTypeDef,
  GetV2CommentsCommentIdResponseBody
> = z.object({
  data: components.Comment$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2CommentsCommentIdResponseBody$ {
  /** @deprecated use `GetV2CommentsCommentIdResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetV2CommentsCommentIdResponseBody$inboundSchema;
  /** @deprecated use `GetV2CommentsCommentIdResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetV2CommentsCommentIdResponseBody$outboundSchema;
  /** @deprecated use `GetV2CommentsCommentIdResponseBody$Outbound` instead. */
  export type Outbound = GetV2CommentsCommentIdResponseBody$Outbound;
}

export function getV2CommentsCommentIdResponseBodyToJSON(
  getV2CommentsCommentIdResponseBody: GetV2CommentsCommentIdResponseBody,
): string {
  return JSON.stringify(
    GetV2CommentsCommentIdResponseBody$outboundSchema.parse(
      getV2CommentsCommentIdResponseBody,
    ),
  );
}

export function getV2CommentsCommentIdResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetV2CommentsCommentIdResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2CommentsCommentIdResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2CommentsCommentIdResponseBody' from JSON`,
  );
}
